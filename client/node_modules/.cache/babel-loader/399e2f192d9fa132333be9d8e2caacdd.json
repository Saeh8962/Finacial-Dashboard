{"ast":null,"code":"var _require = require(\"./stream-errors\"),\n    StreamError = _require.StreamError;\n/**\n * Generate write methods on the stream class.\n *\n * @internal\n * @param  {DataStreamOptions} newOptions Sanitized options passed to scramjet stream\n * @return {Boolean} returns true if creation of new stream is not necessary (promise can be pushed to queue)\n */\n\n\nmodule.exports = function () {\n  return function mkWrite(newOptions) {\n    var _this = this;\n\n    this.tap().setOptions({\n      // transforms: [],\n      promiseWrite: newOptions.promiseWrite\n    });\n\n    this.pipe = function () {\n      throw new Error(\"Method not allowed on a Writable only stream\");\n    };\n\n    this._write = function (chunk, encoding, callback) {\n      Promise.resolve(chunk).then(function (chunk) {\n        return _this._options.promiseWrite(chunk, encoding);\n      }).then(function () {\n        return callback();\n      }).catch(function (e) {\n        return _this.raise(new StreamError(e, _this, \"EXTERNAL\", chunk), chunk);\n      });\n    };\n  };\n};","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/node_modules/scramjet-core/lib/util/mk-write.js"],"names":["require","StreamError","module","exports","mkWrite","newOptions","tap","setOptions","promiseWrite","pipe","Error","_write","chunk","encoding","callback","Promise","resolve","then","_options","catch","e","raise"],"mappings":"AAAA,eAAwBA,OAAO,CAAC,iBAAD,CAA/B;AAAA,IAAQC,WAAR,YAAQA,WAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB;AAAA,SAAM,SAASC,OAAT,CAAiBC,UAAjB,EAA6B;AAAA;;AAChD,SAAKC,GAAL,GAAWC,UAAX,CACI;AACI;AACAC,MAAAA,YAAY,EAAEH,UAAU,CAACG;AAF7B,KADJ;;AAOA,SAAKC,IAAL,GAAY,YAAM;AACd,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH,KAFD;;AAIA,SAAKC,MAAL,GAAc,UAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA+B;AACzCC,MAAAA,OAAO,CAACC,OAAR,CAAgBJ,KAAhB,EACKK,IADL,CACU,UAACL,KAAD;AAAA,eAAW,KAAI,CAACM,QAAL,CAAcV,YAAd,CAA2BI,KAA3B,EAAkCC,QAAlC,CAAX;AAAA,OADV,EAEKI,IAFL,CAEU;AAAA,eAAMH,QAAQ,EAAd;AAAA,OAFV,EAGKK,KAHL,CAIQ,UAACC,CAAD;AAAA,eAAO,KAAI,CAACC,KAAL,CAAW,IAAIpB,WAAJ,CAAgBmB,CAAhB,EAAmB,KAAnB,EAAyB,UAAzB,EAAqCR,KAArC,CAAX,EAAwDA,KAAxD,CAAP;AAAA,OAJR;AAMH,KAPD;AASH,GArBgB;AAAA,CAAjB","sourcesContent":["const { StreamError } = require(\"./stream-errors\");\n\n/**\n * Generate write methods on the stream class.\n *\n * @internal\n * @param  {DataStreamOptions} newOptions Sanitized options passed to scramjet stream\n * @return {Boolean} returns true if creation of new stream is not necessary (promise can be pushed to queue)\n */\nmodule.exports = () => function mkWrite(newOptions) {\n    this.tap().setOptions(\n        {\n            // transforms: [],\n            promiseWrite: newOptions.promiseWrite\n        }\n    );\n\n    this.pipe = () => {\n        throw new Error(\"Method not allowed on a Writable only stream\");\n    };\n\n    this._write = (chunk, encoding, callback) => {\n        Promise.resolve(chunk)\n            .then((chunk) => this._options.promiseWrite(chunk, encoding))\n            .then(() => callback())\n            .catch(\n                (e) => this.raise(new StreamError(e, this, \"EXTERNAL\", chunk), chunk)\n            );\n    };\n\n};\n"]},"metadata":{},"sourceType":"script"}