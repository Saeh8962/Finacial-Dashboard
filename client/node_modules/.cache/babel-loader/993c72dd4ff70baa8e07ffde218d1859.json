{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../../browser/parser\"),\n    parseFragment = _require.parseFragment;\n\nvar _require2 = require(\"../helpers/namespaces.js\"),\n    HTML_NS = _require2.HTML_NS;\n\nvar _require3 = require(\"../helpers/shadow-dom.js\"),\n    isShadowRoot = _require3.isShadowRoot;\n\nvar NODE_TYPE = require(\"../node-type.js\");\n\nvar _require4 = require(\"./serialization.js\"),\n    fragmentSerialization = _require4.fragmentSerialization; // https://w3c.github.io/DOM-Parsing/#the-innerhtml-mixin\n\n\nexports.implementation = /*#__PURE__*/function () {\n  function InnerHTMLImpl() {\n    _classCallCheck(this, InnerHTMLImpl);\n  }\n\n  _createClass(InnerHTMLImpl, [{\n    key: \"innerHTML\",\n    get: // https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml\n    function get() {\n      return fragmentSerialization(this, {\n        requireWellFormed: true,\n        globalObject: this._globalObject\n      });\n    },\n    set: function set(markup) {\n      var contextElement = isShadowRoot(this) ? this.host : this;\n      var fragment = parseFragment(markup, contextElement);\n      var contextObject = this;\n\n      if (this.nodeType === NODE_TYPE.ELEMENT_NODE && this.localName === \"template\" && this.namespaceURI === HTML_NS) {\n        contextObject = this._templateContents;\n      }\n\n      contextObject._replaceAll(fragment);\n    }\n  }]);\n\n  return InnerHTMLImpl;\n}();","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/jsdom/lib/jsdom/living/domparsing/InnerHTML-impl.js"],"names":["require","parseFragment","HTML_NS","isShadowRoot","NODE_TYPE","fragmentSerialization","exports","implementation","requireWellFormed","globalObject","_globalObject","markup","contextElement","host","fragment","contextObject","nodeType","ELEMENT_NODE","localName","namespaceURI","_templateContents","_replaceAll"],"mappings":"AAAA;;;;;;AAEA,eAA0BA,OAAO,CAAC,sBAAD,CAAjC;AAAA,IAAQC,aAAR,YAAQA,aAAR;;AACA,gBAAoBD,OAAO,CAAC,0BAAD,CAA3B;AAAA,IAAQE,OAAR,aAAQA,OAAR;;AACA,gBAAyBF,OAAO,CAAC,0BAAD,CAAhC;AAAA,IAAQG,YAAR,aAAQA,YAAR;;AACA,IAAMC,SAAS,GAAGJ,OAAO,CAAC,iBAAD,CAAzB;;AACA,gBAAkCA,OAAO,CAAC,oBAAD,CAAzC;AAAA,IAAQK,qBAAR,aAAQA,qBAAR,C,CAEA;;;AACAC,OAAO,CAACC,cAAR;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,SACE;AACA,mBAAgB;AACd,aAAOF,qBAAqB,CAAC,IAAD,EAAO;AACjCG,QAAAA,iBAAiB,EAAE,IADc;AAEjCC,QAAAA,YAAY,EAAE,KAAKC;AAFc,OAAP,CAA5B;AAID,KAPH;AAAA,SAQE,aAAcC,MAAd,EAAsB;AACpB,UAAMC,cAAc,GAAGT,YAAY,CAAC,IAAD,CAAZ,GAAqB,KAAKU,IAA1B,GAAiC,IAAxD;AACA,UAAMC,QAAQ,GAAGb,aAAa,CAACU,MAAD,EAASC,cAAT,CAA9B;AAEA,UAAIG,aAAa,GAAG,IAApB;;AACA,UAAI,KAAKC,QAAL,KAAkBZ,SAAS,CAACa,YAA5B,IAA4C,KAAKC,SAAL,KAAmB,UAA/D,IAA6E,KAAKC,YAAL,KAAsBjB,OAAvG,EAAgH;AAC9Ga,QAAAA,aAAa,GAAG,KAAKK,iBAArB;AACD;;AAEDL,MAAAA,aAAa,CAACM,WAAd,CAA0BP,QAA1B;AACD;AAlBH;;AAAA;AAAA","sourcesContent":["\"use strict\";\n\nconst { parseFragment } = require(\"../../browser/parser\");\nconst { HTML_NS } = require(\"../helpers/namespaces.js\");\nconst { isShadowRoot } = require(\"../helpers/shadow-dom.js\");\nconst NODE_TYPE = require(\"../node-type.js\");\nconst { fragmentSerialization } = require(\"./serialization.js\");\n\n// https://w3c.github.io/DOM-Parsing/#the-innerhtml-mixin\nexports.implementation = class InnerHTMLImpl {\n  // https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml\n  get innerHTML() {\n    return fragmentSerialization(this, {\n      requireWellFormed: true,\n      globalObject: this._globalObject\n    });\n  }\n  set innerHTML(markup) {\n    const contextElement = isShadowRoot(this) ? this.host : this;\n    const fragment = parseFragment(markup, contextElement);\n\n    let contextObject = this;\n    if (this.nodeType === NODE_TYPE.ELEMENT_NODE && this.localName === \"template\" && this.namespaceURI === HTML_NS) {\n      contextObject = this._templateContents;\n    }\n\n    contextObject._replaceAll(fragment);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}