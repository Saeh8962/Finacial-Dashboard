{"ast":null,"code":"import _objectSpread from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx\";\nimport React, { Component, ChildComponent } from \"react\";\nimport { ListGroup } from \"react-bootstrap/esm\";\nimport { Button, DropdownMenu, Dropdown } from \"reactstrap/es\"; // import {Tooltip,OverlayTrigger} from \"react-bootstrap\"\n\nimport { withRouter } from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\nimport * as ReactDOM from \"react-dom\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'; // import { MyCommandCell } from \"./myCommandCell.tsx\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar WatchList = /*#__PURE__*/function (_React$Component) {\n  _inherits(WatchList, _React$Component);\n\n  var _super = _createSuper(WatchList);\n\n  function WatchList(props) {\n    var _this;\n\n    _classCallCheck(this, WatchList);\n\n    _this = _super.call(this, props);\n    _this.remove = _this.remove.bind(_assertThisInitialized(_this));\n    _this.getButton = _this.getButton.bind(_assertThisInitialized(_this));\n    _this.state = {\n      email: _this.props.email,\n      stocks: _this.props.stocks,\n      connectionError: false,\n      dropdownOpen: false,\n      value: \"Your Watchlist\"\n    };\n    return _this;\n  }\n\n  _createClass(WatchList, [{\n    key: \"getButton\",\n    value: function getButton() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"k-button k-grid-remove-command\",\n        onClick: function onClick() {\n          return _this2.remove;\n        },\n        children: \"Remove \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 1\n      }, this);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(symbol) {\n      console.log(\"button clicks\");\n    } // componentWillMount(){\n    //     this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n    //     this.getUserStocks();\n    // }\n    // componentWillUnmount(){\n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevProps.stocks !== this.props.stocks) {\n        console.log('stocks state has changed.'); //   this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n\n        this.setState({\n          stocks: this.props.stocks\n        });\n      }\n    } // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n    // saveNewStockTrade= (event) => {\n    //     let result = JSON.parse(event.data)\n    //     console.log(result)\n    //     let user_watchlist = this.state.stocks\n    //     console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n    //     if(result.type===\"trade\"){\n    //         user_watchlist.forEach(symbol => {\n    //             var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n    //             if(tradePrice.length !==0){\n    //                 symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n    //                 console.log(\"Found Updated price for \",symbol.Symbol)\n    //                 // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n    //             }\n    //         })\n    //     }\n    //     this.setState({stocks:user_watchlist});\n    // }\n    // componentDidMount(){\n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    //         </div></>\n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n    // }\n    // removeStock(htmlEvent,stock){\n    //     //unsubsribe from listening to thsi stock\n    //    console.log(\"Unsubscribing from: \",stock)\n    //     this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n    //     //first stop the htmlEvents default status\n    //     htmlEvent.preventDefault();\n    //     var user={\n    //         email:this.props.email,\n    //         stock_symbol: stock,\n    //     } \n    //     console.log(user)\n    //     var url = '/api/removeUserStock';\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n    //         if(res.status===500){\n    //         res.json()\n    //         .then((json)=>{\n    //             const {message,stackTrace}=json;\n    //           })\n    //           .catch((error)=>{\n    //             return Promise.reject(error);\n    //           });\n    //         }\n    //         else{\n    //           return res.json();\n    //         }\n    //       })\n    //       .then((result)=> {\n    //           console.log(\"1st remove stock rerender\");\n    //           this.setState({remove_status:result},()=>this.removeHelper())});\n    // }\n    // removeHelper(){\n    //     console.log(\"p/179\",this.state.remove_status);\n    //     //removed but still showing on watch list\n    //     if(this.state.remove_status.response===\"Stock not on watch list\"){\n    //         alert(\"Stock Queued For Deletion, Please Login In Again\");\n    //     }\n    //     //stock has been removed from watchlist\n    //     else if(this.state.remove_status.Response===\"Sucessfully removed stock\"){\n    //         console.log(\"2nd remove stock rerender\");\n    //         this.setState({Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n    // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n    // }\n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n    // }\n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n    //     }\n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n    // }\n    // handleChange(event) {\n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n      // // console.log(\"In render: \", this.state.dropdownDisplay);\n      // if (this.state == null){\n      //     this.props.history.push(\"/error\");\n      //     }\n      // var Message = \"Your WatchList\";\n      // if(this.state.stocks===\"No stocks added\"){\n      //     Message =\"Empty Watchlist\"; \n      // }\n      // var MessageArrowDir;\n      // if(this.state.dropdownOpen){\n      //   MessageArrowDir = \"\\u25BC\";\n      // }\n      // else{\n      //   MessageArrowDir = \"\\u25B2\";\n      // }\n      // var dropdownDisplay =\n      //     <> <div className = \"dropDiv\">\n      //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n      //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n      //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n      //     </div></>\n      // var dropdown;\n      // if(this.state.stocks!==\"No stocks added\"){\n      // dropdown = \n      // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n      //     {dropdownDisplay}\n      //     <DropdownMenu className = \"DDM\">\n      //       <div className = \"ArtistsDisplayWrapper\">\n      //         {this.state.stocks.map((stocks,index) =>\n      //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n      //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n      //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n      //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n      //     </div>\n      //         )}\n      //       </div>\n      //     </DropdownMenu>\n      // </Dropdown>\n      // }\n      // else{\n      //     dropdown = dropdownDisplay;\n      // }\n      // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n      var renderTooltip = function renderTooltip(props) {\n        return /*#__PURE__*/_jsxDEV(Tooltip, _objectSpread(_objectSpread({\n          id: \"button-tooltip\"\n        }, props), {}, {\n          children: \"Simple tooltip\"\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, _this3);\n      }; // this.props.history.push(\"/error\",this.state)\n\n\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        data: this.state.stocks,\n        style: {\n          height: 700\n        },\n        children: [/*#__PURE__*/_jsxDEV(GridColumn, {\n          title: \"Symbol\",\n          field: \"Symbol\",\n          locked: true,\n          width: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n          title: \"Current Price\",\n          field: \"currentPrice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n          cell: this.getButton,\n          width: \"200px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return WatchList;\n}(React.Component);\n\nexport { WatchList as default };","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx"],"names":["React","Component","ChildComponent","ListGroup","Button","DropdownMenu","Dropdown","withRouter","Grid","GridCellProps","GridColumn","ReactDOM","Tooltip","OverlayTrigger","WatchList","props","remove","bind","getButton","state","email","stocks","connectionError","dropdownOpen","value","symbol","console","log","prevProps","prevState","setState","renderTooltip","height"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,cAAxB,QAA6C,OAA7C;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,MAAR,EAAeC,YAAf,EAA4BC,QAA5B,QAA4C,eAA5C,C,CACA;;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAASC,IAAT,EAAeC,aAAf,EAA8BC,UAA9B,QAAgD,4BAAhD;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,OAAOC,cAAP,MAA2B,gCAA3B,C,CACA;;;;IAEqBC,S;;;;;AAEjB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AAEI,UAAKC,MAAL,GAAY,MAAKA,MAAL,CAAYC,IAAZ,+BAAZ;AACA,UAAKC,SAAL,GAAe,MAAKA,SAAL,CAAeD,IAAf,+BAAf;AACA,UAAKE,KAAL,GAAW;AACPC,MAAAA,KAAK,EAAG,MAAKL,KAAL,CAAWK,KADZ;AAEPC,MAAAA,MAAM,EAAC,MAAKN,KAAL,CAAWM,MAFX;AAGPC,MAAAA,eAAe,EAAE,KAHV;AAIPC,MAAAA,YAAY,EAAE,KAJP;AAKPC,MAAAA,KAAK,EAAC;AALC,KAAX;AALW;AAgBlB;;;;WACD,qBAAW;AAAA;;AACP,0BACR;AAAQ,QAAA,SAAS,EAAC,gCAAlB;AAAkD,QAAA,OAAO,EAAE;AAAA,iBAAK,MAAI,CAACR,MAAV;AAAA,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADQ;AAGH;;;WACD,gBAAOS,MAAP,EAAc;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,K,CACD;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;WACA,4BAAmBC,SAAnB,EAA8BC,SAA9B,EAAyC;AACrC,UAAID,SAAS,CAACP,MAAV,KAAqB,KAAKN,KAAL,CAAWM,MAApC,EAA4C;AAC1CK,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAD0C,CAE5C;;AACI,aAAKG,QAAL,CAAc;AAACT,UAAAA,MAAM,EAAC,KAAKN,KAAL,CAAWM;AAAnB,SAAd;AACH;AACF,K,CACH;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;;;;WAEA,kBAAQ;AAAA;;AAEJ;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA,UAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAAChB,KAAD;AAAA,4BAClB,QAAC,OAAD;AAAS,UAAA,EAAE,EAAC;AAAZ,WAAiCA,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADkB;AAAA,OAAtB,CA7DI,CAkEJ;;;AACA,0BAEI,QAAC,IAAD;AACA,QAAA,IAAI,EAAE,KAAKI,KAAL,CAAWE,MADjB;AAEA,QAAA,KAAK,EAAE;AAAEW,UAAAA,MAAM,EAAE;AAAV,SAFP;AAAA,gCAOR,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,QAAlB;AAA2B,UAAA,KAAK,EAAC,QAAjC;AAA0C,UAAA,MAAM,EAAE,IAAlD;AAAwD,UAAA,KAAK,EAAE;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAPQ,eAQR,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,eAAlB;AAAkC,UAAA,KAAK,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,gBARQ,eASR,QAAC,UAAD;AAAY,UAAA,IAAI,EAAE,KAAKd,SAAvB;AAAkC,UAAA,KAAK,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,gBATQ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAsBC;;;;EAlX8BlB,KAAK,CAACC,S;;SAAxBa,S","sourcesContent":["import React,{Component,ChildComponent} from \"react\";\nimport {ListGroup} from \"react-bootstrap/esm\";\nimport {Button,DropdownMenu,Dropdown,} from \"reactstrap/es\";\n// import {Tooltip,OverlayTrigger} from \"react-bootstrap\"\nimport {withRouter} from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\nimport * as ReactDOM from \"react-dom\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\n// import { MyCommandCell } from \"./myCommandCell.tsx\";\n\nexport default class WatchList extends React.Component {\n \n    constructor(props) {\n        super(props)\n        \n            this.remove=this.remove.bind(this);\n            this.getButton=this.getButton.bind(this);\n            this.state={\n                email : this.props.email,\n                stocks:this.props.stocks,\n                connectionError: false,\n                dropdownOpen: false,\n                value:\"Your Watchlist\",\n                \n            }\n            \n        \n        \n    }\n    getButton(){\n        return(\n<button className=\"k-button k-grid-remove-command\"onClick={() =>this.remove}>Remove </button>\n        )\n    }\n    remove(symbol){\n        console.log(\"button clicks\");\n    }\n    // componentWillMount(){\n    //     this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n    //     this.getUserStocks();\n        \n    // }\n    // componentWillUnmount(){\n        \n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n            \n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.stocks !== this.props.stocks) {\n          console.log('stocks state has changed.')\n        //   this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n            this.setState({stocks:this.props.stocks});\n        }\n      }\n    // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n    // saveNewStockTrade= (event) => {\n        \n    //     let result = JSON.parse(event.data)\n    //     console.log(result)\n    //     let user_watchlist = this.state.stocks\n    //     console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n    //     if(result.type===\"trade\"){\n    //         user_watchlist.forEach(symbol => {\n    //             var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n    //             if(tradePrice.length !==0){\n    //                 symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n    //                 console.log(\"Found Updated price for \",symbol.Symbol)\n    //                 // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n    //             }\n    //         })\n            \n    //     }\n    //     this.setState({stocks:user_watchlist});\n    // }\n     \n    // componentDidMount(){\n       \n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n            \n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    \n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    \n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n        \n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n    //         </div></>\n        \n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    \n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n                \n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n        \n\n    // }\n   \n    // removeStock(htmlEvent,stock){\n    //     //unsubsribe from listening to thsi stock\n    //    console.log(\"Unsubscribing from: \",stock)\n    //     this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n    //     //first stop the htmlEvents default status\n    //     htmlEvent.preventDefault();\n    //     var user={\n    //         email:this.props.email,\n    //         stock_symbol: stock,\n    \n    //     } \n    //     console.log(user)\n    //     var url = '/api/removeUserStock';\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n    //         if(res.status===500){\n    //         res.json()\n    //         .then((json)=>{\n    //             const {message,stackTrace}=json;\n    //           })\n    //           .catch((error)=>{\n    //             return Promise.reject(error);\n    //           });\n    //         }\n    //         else{\n    //           return res.json();\n    //         }\n    //       })\n    //       .then((result)=> {\n    //           console.log(\"1st remove stock rerender\");\n    //           this.setState({remove_status:result},()=>this.removeHelper())});\n    \n    // }\n    \n    // removeHelper(){\n    //     console.log(\"p/179\",this.state.remove_status);\n    //     //removed but still showing on watch list\n    //     if(this.state.remove_status.response===\"Stock not on watch list\"){\n    //         alert(\"Stock Queued For Deletion, Please Login In Again\");\n    //     }\n    //     //stock has been removed from watchlist\n    //     else if(this.state.remove_status.Response===\"Sucessfully removed stock\"){\n    //         console.log(\"2nd remove stock rerender\");\n    //         this.setState({Remove_Status:\"\"},()=>this.getUserStocks());\n           \n    //     }\n    // }\n    // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n           \n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n        \n    // }\n    \n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n        \n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n        \n        \n        \n    // }\n    \n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n        \n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n           \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n                \n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n            \n    //     }\n    \n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n        \n        \n    // }\n    // handleChange(event) {\n         \n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n    \n    render(){\n       \n        // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n        // // console.log(\"In render: \", this.state.dropdownDisplay);\n        // if (this.state == null){\n        //     this.props.history.push(\"/error\");\n        //     }\n        \n        \n        // var Message = \"Your WatchList\";\n        // if(this.state.stocks===\"No stocks added\"){\n        //     Message =\"Empty Watchlist\"; \n        // }\n        // var MessageArrowDir;\n        // if(this.state.dropdownOpen){\n        //   MessageArrowDir = \"\\u25BC\";\n        // }\n    \n        // else{\n        //   MessageArrowDir = \"\\u25B2\";\n        // }\n        \n        // var dropdownDisplay =\n        //     <> <div className = \"dropDiv\">\n        //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n        //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n        //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n        //     </div></>\n        // var dropdown;\n        // if(this.state.stocks!==\"No stocks added\"){\n    \n        // dropdown = \n    \n        // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n        //     {dropdownDisplay}\n    \n        //     <DropdownMenu className = \"DDM\">\n        //       <div className = \"ArtistsDisplayWrapper\">\n        //         {this.state.stocks.map((stocks,index) =>\n                \n        //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n        //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n        //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n        //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n        //     </div>\n        //         )}\n        //       </div>\n        //     </DropdownMenu>\n        // </Dropdown>\n        // }\n        // else{\n        //     dropdown = dropdownDisplay;\n    \n           \n      \n        // }\n       \n        // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n        const renderTooltip = (props) => (\n            <Tooltip id=\"button-tooltip\" {...props}>\n              Simple tooltip\n            </Tooltip>\n          );\n        // this.props.history.push(\"/error\",this.state)\n        return (\n           \n            <Grid\n            data={this.state.stocks}\n            style={{ height: 700 }}\n             >\n            \n  \n   \n    <GridColumn title=\"Symbol\" field=\"Symbol\" locked={true} width={100} />\n    <GridColumn title=\"Current Price\" field=\"currentPrice\" />\n    <GridColumn cell={this.getButton} width=\"200px\" />\n            {/* <GridColumn title=\"Name\" field=\"name\" />\n            <GridColumn title=\"Change\" field=\"day_change\" />\n            <GridColumn title=\"% Change\" field=\"change_pct\" />\n            <GridColumn title=\"Volume\" field=\"volume\" />\n            <GridColumn title=\"Market Cap\" field=\"market_cap\" /> */}\n          \n          </Grid>\n         \n          \n          );\n        }\n}\n"]},"metadata":{},"sourceType":"module"}