{"ast":null,"code":"var crypto = require(\"crypto\");\n\nvar BCRYPT_SALT_LEN = 16;\nvar GENSALT_DEFAULT_LOG2_ROUNDS = 10;\nvar BLOWFISH_NUM_ROUNDS = 16;\nvar MAX_EXECUTION_TIME = 100;\nvar P_orig = [0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b];\nvar S_orig = [0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915, 0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a, 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b, 0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28, 0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370, 0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e, 0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6];\nvar bf_crypt_ciphertext = [0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944, 0x6f756274];\nvar base64_code = ['.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nvar index_64 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1];\n\nfunction getByte(c) {\n  var ret = 0;\n\n  try {\n    var b = c.charCodeAt(0);\n  } catch (err) {\n    b = c;\n  }\n\n  if (b > 127) {\n    return -128 + b % 128;\n  } else {\n    return b;\n  }\n}\n\n;\n\nfunction encode_base64(d, len) {\n  var off = 0;\n  var rs = [];\n  var c1;\n  var c2;\n  if (len <= 0 || len > d.length) throw \"Invalid len\";\n\n  while (off < len) {\n    c1 = d[off++] & 0xff;\n    rs.push(base64_code[c1 >> 2 & 0x3f]);\n    c1 = (c1 & 0x03) << 4;\n\n    if (off >= len) {\n      rs.push(base64_code[c1 & 0x3f]);\n      break;\n    }\n\n    c2 = d[off++] & 0xff;\n    c1 |= c2 >> 4 & 0x0f;\n    rs.push(base64_code[c1 & 0x3f]);\n    c1 = (c2 & 0x0f) << 2;\n\n    if (off >= len) {\n      rs.push(base64_code[c1 & 0x3f]);\n      break;\n    }\n\n    c2 = d[off++] & 0xff;\n    c1 |= c2 >> 6 & 0x03;\n    rs.push(base64_code[c1 & 0x3f]);\n    rs.push(base64_code[c2 & 0x3f]);\n  }\n\n  return rs.join('');\n}\n\n;\n\nfunction char64(x) {\n  var code = x.charCodeAt(0);\n\n  if (code < 0 || code > index_64.length) {\n    return -1;\n  }\n\n  return index_64[code];\n}\n\n;\n\nfunction decode_base64(s, maxolen) {\n  var off = 0;\n  var slen = s.length;\n  var olen = 0;\n  var rs = [];\n  var c1, c2, c3, c4, o;\n  if (maxolen <= 0) throw \"Invalid maxolen\";\n\n  while (off < slen - 1 && olen < maxolen) {\n    c1 = char64(s.charAt(off++));\n    c2 = char64(s.charAt(off++));\n\n    if (c1 == -1 || c2 == -1) {\n      break;\n    }\n\n    o = getByte(c1 << 2);\n    o |= (c2 & 0x30) >> 4;\n    rs.push(String.fromCharCode(o));\n\n    if (++olen >= maxolen || off >= slen) {\n      break;\n    }\n\n    c3 = char64(s.charAt(off++));\n\n    if (c3 == -1) {\n      break;\n    }\n\n    o = getByte((c2 & 0x0f) << 4);\n    o |= (c3 & 0x3c) >> 2;\n    rs.push(String.fromCharCode(o));\n\n    if (++olen >= maxolen || off >= slen) {\n      break;\n    }\n\n    c4 = char64(s.charAt(off++));\n    o = getByte((c3 & 0x03) << 6);\n    o |= c4;\n    rs.push(String.fromCharCode(o));\n    ++olen;\n  }\n\n  var ret = [];\n\n  for (off = 0; off < olen; off++) {\n    ret.push(getByte(rs[off]));\n  }\n\n  return ret;\n}\n\n;\n\nfunction encipher(lr, off, P, S) {\n  var i;\n  var n;\n  var l = lr[off];\n  var r = lr[off + 1];\n  l ^= P[0];\n\n  for (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {\n    // Feistel substitution on left word\n    n = S[l >> 24 & 0xff];\n    n += S[0x100 | l >> 16 & 0xff];\n    n ^= S[0x200 | l >> 8 & 0xff];\n    n += S[0x300 | l & 0xff];\n    r ^= n ^ P[++i]; // Feistel substitution on right word\n\n    n = S[r >> 24 & 0xff];\n    n += S[0x100 | r >> 16 & 0xff];\n    n ^= S[0x200 | r >> 8 & 0xff];\n    n += S[0x300 | r & 0xff];\n    l ^= n ^ P[++i];\n  }\n\n  lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n  lr[off + 1] = l;\n  return lr;\n}\n\n;\n\nfunction streamtoword(data, offp) {\n  var i;\n  var word = 0;\n\n  for (i = 0; i < 4; i++) {\n    word = word << 8 | data[offp] & 0xff;\n    offp = (offp + 1) % data.length;\n  }\n\n  return {\n    key: word,\n    offp: offp\n  };\n}\n\n;\n\nfunction key(key, P, S) {\n  var i;\n  var offp = 0;\n  var lr = new Array(0x00000000, 0x00000000);\n  var plen = P.length;\n  var slen = S.length;\n\n  for (i = 0; i < plen; i++) {\n    var sw = streamtoword(key, offp);\n    offp = sw.offp;\n    P[i] = P[i] ^ sw.key;\n  }\n\n  for (i = 0; i < plen; i += 2) {\n    lr = encipher(lr, 0, P, S);\n    P[i] = lr[0];\n    P[i + 1] = lr[1];\n  }\n\n  for (i = 0; i < slen; i += 2) {\n    lr = encipher(lr, 0, P, S);\n    S[i] = lr[0];\n    S[i + 1] = lr[1];\n  }\n}\n\n;\n\nfunction ekskey(data, key, P, S) {\n  var i;\n  var offp = 0;\n  var lr = new Array(0x00000000, 0x00000000);\n  var plen = P.length;\n  var slen = S.length;\n  var sw;\n\n  for (i = 0; i < plen; i++) {\n    sw = streamtoword(key, offp);\n    offp = sw.offp;\n    P[i] = P[i] ^ sw.key;\n  }\n\n  offp = 0;\n\n  for (i = 0; i < plen; i += 2) {\n    sw = streamtoword(data, offp);\n    offp = sw.offp;\n    lr[0] ^= sw.key;\n    sw = streamtoword(data, offp);\n    offp = sw.offp;\n    lr[1] ^= sw.key;\n    lr = encipher(lr, 0, P, S);\n    P[i] = lr[0];\n    P[i + 1] = lr[1];\n  }\n\n  for (i = 0; i < slen; i += 2) {\n    sw = streamtoword(data, offp);\n    offp = sw.offp;\n    lr[0] ^= sw.key;\n    sw = streamtoword(data, offp);\n    offp = sw.offp;\n    lr[1] ^= sw.key;\n    lr = encipher(lr, 0, P, S);\n    S[i] = lr[0];\n    S[i + 1] = lr[1];\n  }\n}\n\n;\n\nfunction crypt_raw(password, salt, log_rounds, progress) {\n  var rounds;\n  var j;\n  var cdata = bf_crypt_ciphertext.slice();\n  var clen = cdata.length;\n  var one_percent;\n  if (log_rounds < 4 || log_rounds > 31) throw \"Bad number of rounds\";\n  if (salt.length != BCRYPT_SALT_LEN) throw \"Bad salt length\";\n  rounds = 1 << log_rounds;\n  one_percent = Math.floor(rounds / 100) + 1;\n  var P = P_orig.slice();\n  var S = S_orig.slice();\n  ekskey(salt, password, P, S);\n  var i = 0;\n\n  while (true) {\n    if (i < rounds) {\n      var start = new Date();\n\n      for (; i < rounds;) {\n        i = i + 1;\n        key(password, P, S);\n        key(salt, P, S);\n\n        if (i % one_percent == 0) {\n          progress();\n        }\n\n        if (new Date() - start > MAX_EXECUTION_TIME) {\n          break;\n        }\n      }\n    } else {\n      for (i = 0; i < 64; i++) {\n        for (j = 0; j < clen >> 1; j++) {\n          lr = encipher(cdata, j << 1, P, S);\n        }\n      }\n\n      var ret = [];\n\n      for (i = 0; i < clen; i++) {\n        ret.push(getByte(cdata[i] >> 24 & 0xff));\n        ret.push(getByte(cdata[i] >> 16 & 0xff));\n        ret.push(getByte(cdata[i] >> 8 & 0xff));\n        ret.push(getByte(cdata[i] & 0xff));\n      }\n\n      return ret;\n    }\n  }\n}\n\n;\n\nfunction hashpw(password, salt, progress) {\n  var real_salt;\n  var passwordb = [];\n  var saltb = [];\n  var hashed = [];\n  var minor = String.fromCharCode(0);\n  var rounds = 0;\n  var off = 0;\n\n  if (!progress) {\n    var progress = function progress() {};\n  }\n\n  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') throw \"Invalid salt version\";\n  if (salt.charAt(2) == '$') off = 3;else {\n    minor = salt.charAt(2);\n    if (minor != 'a' || salt.charAt(3) != '$') throw \"Invalid salt revision\";\n    off = 4;\n  } // Extract number of rounds\n\n  if (salt.charAt(off + 2) > '$') throw \"Missing salt rounds\";\n  var r1 = parseInt(salt.substring(off, off + 1)) * 10;\n  var r2 = parseInt(salt.substring(off + 1, off + 2));\n  rounds = r1 + r2;\n  real_salt = salt.substring(off + 3, off + 25);\n  password = password + (minor >= 'a' ? \"\\000\" : \"\");\n  var buf = new Buffer(password);\n\n  for (var r = 0; r < buf.length; r++) {\n    passwordb.push(buf[r]);\n  }\n\n  saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);\n  var hashed = crypt_raw(passwordb, saltb, rounds, progress);\n  var rs = [];\n  rs.push(\"$2\");\n  if (minor >= 'a') rs.push(minor);\n  rs.push(\"$\");\n  if (rounds < 10) rs.push(\"0\");\n  rs.push(rounds.toString());\n  rs.push(\"$\");\n  rs.push(encode_base64(saltb, saltb.length));\n  rs.push(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1));\n  return rs.join('');\n}\n\n;\n\nfunction gensalt(rounds) {\n  var iteration_count = rounds;\n\n  if (iteration_count < 4 || iteration_count > 31) {\n    iteration_count = GENSALT_DEFAULT_LOG2_ROUNDS;\n  }\n\n  var output = [];\n  output.push(\"$2a$\");\n  if (iteration_count < 10) output.push(\"0\");\n  output.push(iteration_count.toString());\n  output.push('$');\n  var rand_buf;\n\n  try {\n    rand_buf = crypto.randomBytes(BCRYPT_SALT_LEN);\n  } catch (ex) {\n    throw ex;\n  }\n\n  output.push(encode_base64(rand_buf, BCRYPT_SALT_LEN));\n  return output.join('');\n}\n\n;\n\nfunction genSaltSync(rounds) {\n  /*\r\n  \trounds - [OPTIONAL] - the number of rounds to process the data for. (default - 10)\r\n  \tseed_length - [OPTIONAL] - RAND_bytes wants a length. to make that a bit flexible, you can specify a seed_length. (default - 20)\r\n  */\n  if (!rounds) {\n    rounds = GENSALT_DEFAULT_LOG2_ROUNDS;\n  }\n\n  return gensalt(rounds);\n}\n\nfunction genSalt(rounds, callback) {\n  /*\r\n  \trounds - [OPTIONAL] - the number of rounds to process the data for. (default - 10)\r\n  \tseed_length - [OPTIONAL] - RAND_bytes wants a length. to make that a bit flexible, you can specify a seed_length. (default - 20)\r\n  \tcallback - [REQUIRED] - a callback to be fired once the salt has been generated. uses eio making it asynchronous.\r\n  \t\terror - First parameter to the callback detailing any errors.\r\n  \t\tsalt - Second parameter to the callback providing the generated salt.\r\n  */\n  if (!callback) {\n    throw \"No callback function was given.\";\n  }\n\n  process.nextTick(function () {\n    var result = null;\n    var error = null;\n\n    try {\n      result = genSaltSync(rounds);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error, result);\n  });\n}\n\nfunction hashSync(data, salt, progress) {\n  /*\r\n  \tdata - [REQUIRED] - the data to be encrypted.\r\n  \tsalt - [REQUIRED] - the salt to be used in encryption.\r\n  */\n  if (!salt) {\n    salt = genSaltSync();\n  }\n\n  return hashpw(data, salt, progress);\n}\n\nfunction hash(data, salt, progress, callback) {\n  /*\r\n  \tdata - [REQUIRED] - the data to be encrypted.\r\n  \tsalt - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated and used (see examples).\r\n  \tprogress - a callback to be called during the hash calculation to signify progress\r\n  \tcallback - [REQUIRED] - a callback to be fired once the data has been encrypted. uses eio making it asynchronous.\r\n  \t\terror - First parameter to the callback detailing any errors.\r\n  \t\tencrypted - Second parameter to the callback providing the encrypted form.\r\n  */\n  if (!callback) {\n    throw \"No callback function was given.\";\n  }\n\n  process.nextTick(function () {\n    var result = null;\n    var error = null;\n\n    try {\n      result = hashSync(data, salt, progress);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error, result);\n  });\n}\n\nfunction compareSync(data, encrypted) {\n  /*\r\n  \tdata - [REQUIRED] - data to compare.\r\n  \tencrypted - [REQUIRED] - data to be compared to.\r\n  */\n  if (typeof data != \"string\" || typeof encrypted != \"string\") {\n    throw \"Incorrect arguments\";\n  }\n\n  var encrypted_length = encrypted.length;\n\n  if (encrypted_length != 60) {\n    throw \"Not a valid BCrypt hash.\";\n  }\n\n  var same = true;\n  var hash_data = hashSync(data, encrypted.substr(0, encrypted_length - 31));\n  var hash_data_length = hash_data.length;\n  same = hash_data_length == encrypted_length;\n  var max_length = hash_data_length < encrypted_length ? hash_data_length : encrypted_length; // to prevent timing attacks, should check entire string\n  // don't exit after found to be false\n\n  for (var i = 0; i < max_length; ++i) {\n    if (hash_data_length >= i && encrypted_length >= i && hash_data[i] != encrypted[i]) {\n      same = false;\n    }\n  }\n\n  return same;\n}\n\nfunction compare(data, encrypted, callback) {\n  /*\r\n  \tdata - [REQUIRED] - data to compare.\r\n  \tencrypted - [REQUIRED] - data to be compared to.\r\n  \tcallback - [REQUIRED] - a callback to be fired once the data has been compared. uses eio making it asynchronous.\r\n  \t\terror - First parameter to the callback detailing any errors.\r\n  \t\tsame - Second parameter to the callback providing whether the data and encrypted forms match [true | false].\r\n  */\n  if (!callback) {\n    throw \"No callback function was given.\";\n  }\n\n  process.nextTick(function () {\n    var result = null;\n    var error = null;\n\n    try {\n      result = compareSync(data, encrypted);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error, result);\n  });\n}\n\nfunction getRounds(encrypted) {\n  //encrypted - [REQUIRED] - hash from which the number of rounds used should be extracted.\n  if (typeof encrypted != \"string\") {\n    throw \"Incorrect arguments\";\n  }\n\n  return Number(encrypted.split(\"$\")[2]);\n}\n\nexports.genSaltSync = genSaltSync;\nexports.genSalt = genSalt;\nexports.hashSync = hashSync;\nexports.hash = hash;\nexports.compareSync = compareSync;\nexports.compare = compare;\nexports.getRounds = getRounds;","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/bcrypt-nodejs/bCrypt.js"],"names":["crypto","require","BCRYPT_SALT_LEN","GENSALT_DEFAULT_LOG2_ROUNDS","BLOWFISH_NUM_ROUNDS","MAX_EXECUTION_TIME","P_orig","S_orig","bf_crypt_ciphertext","base64_code","index_64","getByte","c","ret","b","charCodeAt","err","encode_base64","d","len","off","rs","c1","c2","length","push","join","char64","x","code","decode_base64","s","maxolen","slen","olen","c3","c4","o","charAt","String","fromCharCode","encipher","lr","P","S","i","n","l","r","streamtoword","data","offp","word","key","Array","plen","sw","ekskey","crypt_raw","password","salt","log_rounds","progress","rounds","j","cdata","slice","clen","one_percent","Math","floor","start","Date","hashpw","real_salt","passwordb","saltb","hashed","minor","r1","parseInt","substring","r2","buf","Buffer","toString","gensalt","iteration_count","output","rand_buf","randomBytes","ex","genSaltSync","genSalt","callback","process","nextTick","result","error","hashSync","hash","compareSync","encrypted","encrypted_length","same","hash_data","substr","hash_data_length","max_length","compare","getRounds","Number","split","exports"],"mappings":"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","sourcesContent":["var crypto = require(\"crypto\");\r\n\r\nvar BCRYPT_SALT_LEN = 16;\r\n\r\nvar GENSALT_DEFAULT_LOG2_ROUNDS = 10;\r\nvar BLOWFISH_NUM_ROUNDS = 16;\r\n\r\nvar MAX_EXECUTION_TIME = 100;\r\nvar P_orig = [0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822,\r\n\t\t0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377,\r\n\t\t0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5,\r\n\t\t0xb5470917, 0x9216d5d9, 0x8979fb1b];\r\nvar S_orig = [0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed,\r\n\t\t0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,\r\n\t\t0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3,\r\n\t\t0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,\r\n\t\t0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023,\r\n\t\t0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\r\n\t\t0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda,\r\n\t\t0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,\r\n\t\t0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af,\r\n\t\t0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6,\r\n\t\t0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381,\r\n\t\t0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\r\n\t\t0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d,\r\n\t\t0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5,\r\n\t\t0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a,\r\n\t\t0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,\r\n\t\t0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c,\r\n\t\t0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\r\n\t\t0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3,\r\n\t\t0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,\r\n\t\t0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724,\r\n\t\t0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b,\r\n\t\t0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd,\r\n\t\t0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\r\n\t\t0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f,\r\n\t\t0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd,\r\n\t\t0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39,\r\n\t\t0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,\r\n\t\t0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df,\r\n\t\t0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\r\n\t\t0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e,\r\n\t\t0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,\r\n\t\t0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98,\r\n\t\t0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565,\r\n\t\t0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341,\r\n\t\t0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\r\n\t\t0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0,\r\n\t\t0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64,\r\n\t\t0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191,\r\n\t\t0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,\r\n\t\t0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0,\r\n\t\t0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\r\n\t\t0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5,\r\n\t\t0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,\r\n\t\t0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b,\r\n\t\t0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f,\r\n\t\t0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968,\r\n\t\t0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\r\n\t\t0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5,\r\n\t\t0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6,\r\n\t\t0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799,\r\n\t\t0x6e85076a, 0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,\r\n\t\t0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71,\r\n\t\t0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\r\n\t\t0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6,\r\n\t\t0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,\r\n\t\t0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f,\r\n\t\t0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286,\r\n\t\t0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec,\r\n\t\t0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\r\n\t\t0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9,\r\n\t\t0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,\r\n\t\t0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e,\r\n\t\t0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,\r\n\t\t0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290,\r\n\t\t0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\r\n\t\t0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6,\r\n\t\t0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,\r\n\t\t0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847,\r\n\t\t0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451,\r\n\t\t0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6,\r\n\t\t0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\r\n\t\t0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570,\r\n\t\t0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,\r\n\t\t0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978,\r\n\t\t0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,\r\n\t\t0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708,\r\n\t\t0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\r\n\t\t0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185,\r\n\t\t0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,\r\n\t\t0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830,\r\n\t\t0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239,\r\n\t\t0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab,\r\n\t\t0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\r\n\t\t0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19,\r\n\t\t0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,\r\n\t\t0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1,\r\n\t\t0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,\r\n\t\t0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef,\r\n\t\t0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\r\n\t\t0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15,\r\n\t\t0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,\r\n\t\t0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2,\r\n\t\t0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492,\r\n\t\t0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174,\r\n\t\t0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\r\n\t\t0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759,\r\n\t\t0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,\r\n\t\t0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc,\r\n\t\t0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,\r\n\t\t0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465,\r\n\t\t0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\r\n\t\t0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c,\r\n\t\t0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,\r\n\t\t0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e,\r\n\t\t0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,\r\n\t\t0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0,\r\n\t\t0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\r\n\t\t0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462,\r\n\t\t0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c,\r\n\t\t0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399,\r\n\t\t0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,\r\n\t\t0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74,\r\n\t\t0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\r\n\t\t0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7,\r\n\t\t0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,\r\n\t\t0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802,\r\n\t\t0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,\r\n\t\t0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4,\r\n\t\t0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\r\n\t\t0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2,\r\n\t\t0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1,\r\n\t\t0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c,\r\n\t\t0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,\r\n\t\t0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341,\r\n\t\t0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\r\n\t\t0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b,\r\n\t\t0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,\r\n\t\t0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88,\r\n\t\t0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,\r\n\t\t0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc,\r\n\t\t0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\r\n\t\t0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659,\r\n\t\t0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f,\r\n\t\t0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8,\r\n\t\t0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,\r\n\t\t0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be,\r\n\t\t0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\r\n\t\t0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255,\r\n\t\t0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,\r\n\t\t0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1,\r\n\t\t0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,\r\n\t\t0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025,\r\n\t\t0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\r\n\t\t0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01,\r\n\t\t0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641,\r\n\t\t0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa,\r\n\t\t0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,\r\n\t\t0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409,\r\n\t\t0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\r\n\t\t0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3,\r\n\t\t0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,\r\n\t\t0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234,\r\n\t\t0x92638212, 0x670efa8e, 0x406000e0, 0x3a39ce37, 0xd3faf5cf,\r\n\t\t0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740,\r\n\t\t0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\r\n\t\t0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f,\r\n\t\t0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d,\r\n\t\t0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8,\r\n\t\t0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,\r\n\t\t0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba,\r\n\t\t0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\r\n\t\t0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69,\r\n\t\t0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,\r\n\t\t0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a,\r\n\t\t0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b,\r\n\t\t0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd,\r\n\t\t0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\r\n\t\t0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4,\r\n\t\t0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2,\r\n\t\t0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb,\r\n\t\t0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,\r\n\t\t0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751,\r\n\t\t0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\r\n\t\t0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369,\r\n\t\t0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,\r\n\t\t0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd,\r\n\t\t0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45,\r\n\t\t0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae,\r\n\t\t0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\r\n\t\t0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08,\r\n\t\t0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d,\r\n\t\t0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b,\r\n\t\t0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,\r\n\t\t0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e,\r\n\t\t0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\r\n\t\t0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c,\r\n\t\t0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,\r\n\t\t0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361,\r\n\t\t0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c,\r\n\t\t0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be,\r\n\t\t0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\r\n\t\t0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d,\r\n\t\t0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891,\r\n\t\t0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5,\r\n\t\t0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,\r\n\t\t0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292,\r\n\t\t0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\r\n\t\t0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2,\r\n\t\t0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,\r\n\t\t0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c,\r\n\t\t0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8,\r\n\t\t0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4,\r\n\t\t0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\r\n\t\t0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6];\r\nvar bf_crypt_ciphertext = [0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253,\r\n\t\t0x63727944, 0x6f756274];\r\nvar base64_code = ['.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\r\n\t\t'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\r\n\t\t'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\r\n\t\t'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\r\n\t\t'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8',\r\n\t\t'9'];\r\nvar index_64 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1,\r\n\t\t54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\r\n\t\t21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30, 31,\r\n\t\t32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\r\n\t\t49, 50, 51, 52, 53, -1, -1, -1, -1, -1];\r\n\r\nfunction getByte(c) {\r\n\tvar ret = 0;\r\n\ttry {\r\n\t\tvar b = c.charCodeAt(0);\r\n\t} catch (err) {\r\n\t\tb = c;\r\n\t}\r\n\tif (b > 127) {\r\n\t\treturn -128 + (b % 128);\r\n\t} else {\r\n\t\treturn b;\r\n\t}\r\n};\r\n\r\nfunction encode_base64(d, len) {\r\n\tvar off = 0;\r\n\tvar rs = [];\r\n\tvar c1;\r\n\tvar c2;\r\n\tif (len <= 0 || len > d.length)\r\n\t\tthrow \"Invalid len\";\r\n\twhile (off < len) {\r\n\t\tc1 = d[off++] & 0xff;\r\n\t\trs.push(base64_code[(c1 >> 2) & 0x3f]);\r\n\t\tc1 = (c1 & 0x03) << 4;\r\n\t\tif (off >= len) {\r\n\t\t\trs.push(base64_code[c1 & 0x3f]);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tc2 = d[off++] & 0xff;\r\n\t\tc1 |= (c2 >> 4) & 0x0f;\r\n\t\trs.push(base64_code[c1 & 0x3f]);\r\n\t\tc1 = (c2 & 0x0f) << 2;\r\n\t\tif (off >= len) {\r\n\t\t\trs.push(base64_code[c1 & 0x3f]);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tc2 = d[off++] & 0xff;\r\n\t\tc1 |= (c2 >> 6) & 0x03;\r\n\t\trs.push(base64_code[c1 & 0x3f]);\r\n\t\trs.push(base64_code[c2 & 0x3f]);\r\n\t}\r\n\treturn rs.join('');\r\n};\r\n\r\nfunction char64(x) {\r\n\tvar code = x.charCodeAt(0);\r\n\tif (code < 0 || code > index_64.length) {\r\n\t\treturn -1;\r\n\t}\r\n\treturn index_64[code];\r\n};\r\n\r\nfunction decode_base64(s, maxolen) {\r\n\tvar off = 0;\r\n\tvar slen = s.length;\r\n\tvar olen = 0;\r\n\tvar rs = [];\r\n\tvar c1, c2, c3, c4, o;\r\n\tif (maxolen <= 0) throw \"Invalid maxolen\";\r\n\twhile (off < slen - 1 && olen < maxolen) {\r\n\t\tc1 = char64(s.charAt(off++));\r\n\t\tc2 = char64(s.charAt(off++));\r\n\t\tif (c1 == -1 || c2 == -1) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\to = getByte(c1 << 2);\r\n\t\to |= (c2 & 0x30) >> 4;\r\n\t\trs.push(String.fromCharCode(o));\r\n\t\tif (++olen >= maxolen || off >= slen) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tc3 = char64(s.charAt(off++));\r\n\t\tif (c3 == -1) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\to = getByte((c2 & 0x0f) << 4);\r\n\t\to |= (c3 & 0x3c) >> 2;\r\n\t\trs.push(String.fromCharCode(o));\r\n\t\tif (++olen >= maxolen || off >= slen) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tc4 = char64(s.charAt(off++));\r\n\t\to = getByte((c3 & 0x03) << 6);\r\n\t\to |= c4;\r\n\t\trs.push(String.fromCharCode(o));\r\n\t\t++olen;\r\n\t}\r\n\tvar ret = [];\r\n\tfor (off = 0; off < olen; off++) {\r\n\t\tret.push(getByte(rs[off]));\r\n\t}\r\n\treturn ret;\r\n};\r\n\r\nfunction encipher(lr, off, P, S) {\r\n\tvar i;\r\n\tvar n;\r\n\tvar l = lr[off];\r\n\tvar r = lr[off + 1];\r\n\r\n\tl ^= P[0];\r\n\tfor (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {\r\n\t\t// Feistel substitution on left word\r\n\t\tn = S[(l >> 24) & 0xff];\r\n\t\tn += S[0x100 | ((l >> 16) & 0xff)];\r\n\t\tn ^= S[0x200 | ((l >> 8) & 0xff)];\r\n\t\tn += S[0x300 | (l & 0xff)];\r\n\t\tr ^= n ^ P[++i];\r\n\r\n\t\t// Feistel substitution on right word\r\n\t\tn = S[(r >> 24) & 0xff];\r\n\t\tn += S[0x100 | ((r >> 16) & 0xff)];\r\n\t\tn ^= S[0x200 | ((r >> 8) & 0xff)];\r\n\t\tn += S[0x300 | (r & 0xff)];\r\n\t\tl ^= n ^ P[++i];\r\n\t}\r\n\tlr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\r\n\tlr[off + 1] = l;\r\n\treturn lr;\r\n};\r\n\r\nfunction streamtoword(data, offp) {\r\n\tvar i;\r\n\tvar word = 0;\r\n\tfor (i = 0; i < 4; i++) {\r\n\t\tword = (word << 8) | (data[offp] & 0xff);\r\n\t\toffp = (offp + 1) % data.length;\r\n\t}\r\n\treturn {key:word, offp:offp};\r\n};\r\n\r\nfunction key(key, P, S) {\r\n\tvar i;\r\n\tvar offp = 0;\r\n\tvar lr = new Array(0x00000000, 0x00000000);\r\n\tvar plen = P.length;\r\n\tvar slen = S.length;\r\n\r\n\tfor (i = 0; i < plen; i++) {\r\n\t\tvar sw = streamtoword(key, offp);\r\n\t\toffp = sw.offp;\r\n\t\tP[i] = P[i] ^ sw.key;\r\n\t}\r\n\tfor (i = 0; i < plen; i += 2) {\r\n\t\tlr = encipher(lr, 0, P, S);\r\n\t\tP[i] = lr[0];\r\n\t\tP[i + 1] = lr[1];\r\n\t}\r\n\r\n\tfor (i = 0; i < slen; i += 2) {\r\n\t\tlr = encipher(lr, 0, P, S);\r\n\t\tS[i] = lr[0];\r\n\t\tS[i + 1] = lr[1];\r\n\t}\r\n};\r\n\r\nfunction ekskey(data, key, P, S) {\r\n\tvar i;\r\n\tvar offp = 0;\r\n\tvar lr = new Array(0x00000000, 0x00000000);\r\n\tvar plen = P.length;\r\n\tvar slen = S.length;\r\n\tvar sw;\r\n\r\n\tfor (i = 0; i < plen; i++) {\r\n\t\tsw = streamtoword(key, offp);\r\n\t\toffp = sw.offp;\r\n\t\tP[i] = P[i] ^ sw.key;\r\n\t}\r\n\toffp = 0;\r\n\tfor (i = 0; i < plen; i += 2) {\r\n\t\tsw = streamtoword(data, offp);\r\n\t\toffp = sw.offp;\r\n\t\tlr[0] ^= sw.key;\r\n\r\n\t\tsw = streamtoword(data, offp);\r\n\t\toffp = sw.offp;\r\n\t\tlr[1] ^= sw.key;\r\n\r\n\t\tlr = encipher(lr, 0, P, S);\r\n\t\tP[i] = lr[0];\r\n\t\tP[i + 1] = lr[1];\r\n\t}\r\n\tfor (i = 0; i < slen; i += 2) {\r\n\t\tsw = streamtoword(data, offp);\r\n\t\toffp = sw.offp;\r\n\t\tlr[0] ^= sw.key;\r\n\r\n\t\tsw = streamtoword(data, offp);\r\n\t\toffp = sw.offp;\r\n\t\tlr[1] ^= sw.key;\r\n\r\n\t\tlr = encipher(lr, 0, P, S);\r\n\t\tS[i] = lr[0];\r\n\t\tS[i + 1] = lr[1];\r\n\t}\r\n};\r\n\r\nfunction crypt_raw(password, salt, log_rounds, progress) {\r\n\tvar rounds;\r\n\tvar j;\r\n\tvar cdata = bf_crypt_ciphertext.slice();\r\n\tvar clen = cdata.length;\r\n\tvar one_percent;\r\n\r\n\tif (log_rounds < 4 || log_rounds > 31)\r\n\t\tthrow \"Bad number of rounds\";\r\n\tif (salt.length != BCRYPT_SALT_LEN)\r\n\t\tthrow \"Bad salt length\";\r\n\r\n\trounds = 1 << log_rounds;\r\n\tone_percent = Math.floor(rounds / 100) + 1;\r\n\r\n\tvar P = P_orig.slice();\r\n\tvar S = S_orig.slice();\r\n\r\n\tekskey(salt, password, P, S);\r\n\r\n\tvar i = 0;\r\n\r\n\twhile(true) {\r\n\t\tif(i < rounds){\r\n\t\t\tvar start = new Date();\r\n\t\t\tfor (; i < rounds;) {\r\n\t\t\t\ti = i + 1;\r\n\t\t\t\tkey(password, P, S);\r\n\t\t\t\tkey(salt, P, S);\r\n\t\t                if(i % one_percent == 0){\r\n\t\t\t        \tprogress();\r\n                \t\t}\r\n\t\t                if((new Date() - start) > MAX_EXECUTION_TIME){\r\n                    \t\t\tbreak;\r\n\t\t                }\r\n            \t\t}\r\n        \t} else {\r\n \t        \tfor (i = 0; i < 64; i++) {\r\n                \t\tfor (j = 0; j < (clen >> 1); j++) {\r\n                    \t\t\tlr = encipher(cdata, j << 1, P, S);\r\n                \t\t}\r\n            \t\t}\r\n\t\t\tvar ret = [];\r\n\t\t        for (i = 0; i < clen; i++) {\r\n                \t\tret.push(getByte((cdata[i] >> 24) & 0xff));\r\n                \t\tret.push(getByte((cdata[i] >> 16) & 0xff));\r\n                \t\tret.push(getByte((cdata[i] >> 8) & 0xff));\r\n                \t\tret.push(getByte(cdata[i] & 0xff));\r\n            \t\t}\r\n            \t\treturn(ret);\r\n        \t}\r\n\t}\r\n};\r\n\r\nfunction hashpw(password, salt, progress) {\r\n\tvar real_salt;\r\n\tvar passwordb = [];\r\n\tvar saltb = [];\r\n\tvar hashed = [];\r\n\tvar minor = String.fromCharCode(0);\r\n\tvar rounds = 0;\r\n\tvar off = 0;\r\n\r\n\tif (!progress){\r\n\t        var progress = function() {};\r\n\t}\r\n\r\n\tif (salt.charAt(0) != '$' || salt.charAt(1) != '2')\r\n\t\tthrow \"Invalid salt version\";\r\n\tif (salt.charAt(2) == '$')\r\n\t\toff = 3;\r\n\telse {\r\n\t\tminor = salt.charAt(2);\r\n\t\tif (minor != 'a' || salt.charAt(3) != '$')\r\n\t\t\tthrow \"Invalid salt revision\";\r\n\t\toff = 4;\r\n\t}\r\n\r\n\t// Extract number of rounds\r\n\tif (salt.charAt(off + 2) > '$')\r\n\t\tthrow \"Missing salt rounds\";\r\n\tvar r1 = parseInt(salt.substring(off, off + 1)) * 10;\r\n\tvar r2 = parseInt(salt.substring(off + 1, off + 2));\r\n\trounds = r1 + r2;\r\n\treal_salt = salt.substring(off + 3, off + 25);\r\n\tpassword = password + (minor >= 'a' ? \"\\000\" : \"\");\r\n\r\n\tvar buf = new Buffer(password);\r\n\tfor (var r = 0; r < buf.length; r++) {\r\n\t\tpasswordb.push(buf[r]);\r\n\t}\r\n\tsaltb = decode_base64(real_salt, BCRYPT_SALT_LEN);\r\n\tvar hashed = crypt_raw(passwordb, saltb, rounds, progress);\r\n\r\n\tvar rs = [];\r\n\trs.push(\"$2\");\r\n\tif (minor >= 'a')\r\n\t\trs.push(minor);\r\n\trs.push(\"$\");\r\n\tif (rounds < 10)\r\n\t\trs.push(\"0\");\r\n\trs.push(rounds.toString());\r\n\trs.push(\"$\");\r\n\trs.push(encode_base64(saltb, saltb.length));\r\n\trs.push(encode_base64(hashed, bf_crypt_ciphertext.length * 4 - 1));\r\n\r\n\treturn(rs.join(''));\r\n};\r\n\r\nfunction gensalt(rounds) {\r\n\tvar iteration_count = rounds;\r\n\tif (iteration_count < 4 || iteration_count > 31) {\r\n\t\titeration_count = GENSALT_DEFAULT_LOG2_ROUNDS;\r\n\t}\r\n\tvar output = [];\r\n\toutput.push(\"$2a$\");\r\n\tif (iteration_count < 10)\r\n\t\toutput.push(\"0\");\r\n\toutput.push(iteration_count.toString());\r\n\toutput.push('$');\r\n\r\n\tvar rand_buf;\r\n\ttry {\r\n\t\trand_buf = crypto.randomBytes(BCRYPT_SALT_LEN);\r\n\t} catch (ex) {\r\n\t\tthrow ex;\r\n\t}\r\n\r\n\toutput.push(encode_base64(rand_buf, BCRYPT_SALT_LEN));\r\n\treturn output.join('');\r\n};\r\n\r\nfunction genSaltSync(rounds) {\r\n\t/*\r\n\t\trounds - [OPTIONAL] - the number of rounds to process the data for. (default - 10)\r\n\t\tseed_length - [OPTIONAL] - RAND_bytes wants a length. to make that a bit flexible, you can specify a seed_length. (default - 20)\r\n\t*/\r\n\tif(!rounds) {\r\n\t\trounds = GENSALT_DEFAULT_LOG2_ROUNDS;\r\n\t}\r\n\treturn gensalt(rounds);\r\n}\r\n\r\nfunction genSalt(rounds, callback) {\r\n\t/*\r\n\t\trounds - [OPTIONAL] - the number of rounds to process the data for. (default - 10)\r\n\t\tseed_length - [OPTIONAL] - RAND_bytes wants a length. to make that a bit flexible, you can specify a seed_length. (default - 20)\r\n\t\tcallback - [REQUIRED] - a callback to be fired once the salt has been generated. uses eio making it asynchronous.\r\n\t\t\terror - First parameter to the callback detailing any errors.\r\n\t\t\tsalt - Second parameter to the callback providing the generated salt.\r\n\t*/\r\n\tif(!callback) {\r\n\t\tthrow \"No callback function was given.\"\r\n\t}\r\n\tprocess.nextTick(function() {\r\n\t\tvar result = null;\r\n\t\tvar error = null;\r\n\t\ttry {\r\n\t\t\tresult = genSaltSync(rounds)\r\n\t\t} catch(err) {\r\n\t\t\terror = err;\r\n\t\t}\r\n\t\tcallback(error, result);\r\n\t});\r\n}\r\n\r\nfunction hashSync(data, salt, progress) {\r\n\t/*\r\n\t\tdata - [REQUIRED] - the data to be encrypted.\r\n\t\tsalt - [REQUIRED] - the salt to be used in encryption.\r\n\t*/\r\n\tif(!salt) {\r\n\t\tsalt = genSaltSync();\r\n\t}\r\n\treturn hashpw(data, salt, progress);\r\n}\r\n\r\nfunction hash(data, salt, progress, callback) {\r\n\t/*\r\n\t\tdata - [REQUIRED] - the data to be encrypted.\r\n\t\tsalt - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated and used (see examples).\r\n\t\tprogress - a callback to be called during the hash calculation to signify progress\r\n\t\tcallback - [REQUIRED] - a callback to be fired once the data has been encrypted. uses eio making it asynchronous.\r\n\t\t\terror - First parameter to the callback detailing any errors.\r\n\t\t\tencrypted - Second parameter to the callback providing the encrypted form.\r\n\t*/\r\n\tif(!callback) {\r\n\t\tthrow \"No callback function was given.\"\r\n\t}\r\n\tprocess.nextTick(function() {\r\n\t\tvar result = null;\r\n\t\tvar error = null;\r\n\t\ttry {\r\n\t\t\tresult = hashSync(data, salt, progress)\r\n\t\t} catch(err) {\r\n\t\t\terror = err;\r\n\t\t}\r\n\t\tcallback(error, result);\r\n\t});\r\n}\r\n\r\nfunction compareSync(data, encrypted) {\r\n\t/*\r\n\t\tdata - [REQUIRED] - data to compare.\r\n\t\tencrypted - [REQUIRED] - data to be compared to.\r\n\t*/\r\n\r\n\tif(typeof data != \"string\" ||  typeof encrypted != \"string\") {\r\n\t\tthrow \"Incorrect arguments\";\r\n\t}\r\n\r\n\tvar encrypted_length = encrypted.length;\r\n\r\n\tif(encrypted_length != 60) {\r\n\t\tthrow \"Not a valid BCrypt hash.\";\r\n\t}\r\n\r\n\tvar same = true;\r\n\tvar hash_data = hashSync(data, encrypted.substr(0, encrypted_length-31));\r\n\tvar hash_data_length = hash_data.length;\r\n\r\n\tsame = hash_data_length == encrypted_length;\r\n\r\n\tvar max_length = (hash_data_length < encrypted_length) ? hash_data_length : encrypted_length;\r\n\r\n\t// to prevent timing attacks, should check entire string\r\n\t// don't exit after found to be false\r\n\tfor (var i = 0; i < max_length; ++i) {\r\n\t\tif (hash_data_length >= i && encrypted_length >= i && hash_data[i] != encrypted[i]) {\r\n\t\t\tsame = false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn same;\r\n}\r\n\r\nfunction compare(data, encrypted, callback) {\r\n\t/*\r\n\t\tdata - [REQUIRED] - data to compare.\r\n\t\tencrypted - [REQUIRED] - data to be compared to.\r\n\t\tcallback - [REQUIRED] - a callback to be fired once the data has been compared. uses eio making it asynchronous.\r\n\t\t\terror - First parameter to the callback detailing any errors.\r\n\t\t\tsame - Second parameter to the callback providing whether the data and encrypted forms match [true | false].\r\n\t*/\r\n\tif(!callback) {\r\n\t\tthrow \"No callback function was given.\"\r\n\t}\r\n\tprocess.nextTick(function() {\r\n\t\tvar result = null;\r\n\t\tvar error = null;\r\n\t\ttry {\r\n\t\t\tresult = compareSync(data, encrypted)\r\n\t\t} catch(err) {\r\n\t\t\terror = err;\r\n\t\t}\r\n\t\tcallback(error, result);\r\n\t});\r\n}\r\n\r\nfunction getRounds(encrypted) {\r\n\t//encrypted - [REQUIRED] - hash from which the number of rounds used should be extracted.\r\n\tif(typeof encrypted != \"string\") {\r\n\t\tthrow \"Incorrect arguments\";\r\n\t}\r\n\treturn Number(encrypted.split(\"$\")[2]);\r\n}\r\n\r\nexports.genSaltSync = genSaltSync;\r\nexports.genSalt = genSalt;\r\nexports.hashSync = hashSync;\r\nexports.hash = hash;\r\nexports.compareSync = compareSync;\r\nexports.compare = compare;\r\nexports.getRounds = getRounds;\r\n"]},"metadata":{},"sourceType":"script"}