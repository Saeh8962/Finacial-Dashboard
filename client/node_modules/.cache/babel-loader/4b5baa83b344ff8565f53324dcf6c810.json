{"ast":null,"code":"\"use strict\";\n\nvar util = require(\"util\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar ErrorEvent = require(\"../generated/ErrorEvent\");\n\nvar _require = require(\"../helpers/events\"),\n    createAnEvent = _require.createAnEvent;\n\nvar errorReportingMode = Symbol(\"error reporting mode\"); // https://html.spec.whatwg.org/multipage/webappapis.html#report-the-error\n// Omits script parameter and any check for muted errors.\n// Takes target as an EventTarget impl.\n// Takes error object, message, and location as params, unlike the spec.\n// Returns whether the event was handled or not.\n\nfunction reportAnError(line, col, target, errorObject, message, location) {\n  if (target[errorReportingMode]) {\n    return false;\n  }\n\n  target[errorReportingMode] = true;\n\n  if (typeof message !== \"string\") {\n    message = \"uncaught exception: \" + util.inspect(errorObject);\n  }\n\n  var event = createAnEvent(\"error\", target._globalObject, ErrorEvent, {\n    cancelable: true,\n    message: message,\n    filename: location,\n    lineno: line,\n    colno: col,\n    error: errorObject\n  });\n\n  try {\n    target._dispatch(event);\n  } finally {\n    target[errorReportingMode] = false;\n    return event.defaultPrevented;\n  }\n}\n\nmodule.exports = function reportException(window, error, filenameHint) {\n  // This function will give good results on real Error objects with stacks; poor ones otherwise\n  var stack = error && error.stack;\n  var lines = stack && stack.split(\"\\n\"); // Find the first line that matches; important for multi-line messages\n\n  var pieces;\n\n  if (lines) {\n    for (var i = 1; i < lines.length && !pieces; ++i) {\n      pieces = lines[i].match(/at (?:(.+)\\s+)?\\(?(?:(.+?):(\\d+):(\\d+)|([^)]+))\\)?/);\n    }\n  }\n\n  var fileName = pieces && pieces[2] || filenameHint || window._document.URL;\n  var lineNumber = pieces && parseInt(pieces[3]) || 0;\n  var columnNumber = pieces && parseInt(pieces[4]) || 0;\n  var windowImpl = idlUtils.implForWrapper(window);\n  var handled = reportAnError(lineNumber, columnNumber, windowImpl, error, error && error.message, fileName);\n\n  if (!handled) {\n    var errorString = shouldBeDisplayedAsError(error) ? \"[\".concat(error.name, \": \").concat(error.message, \"]\") : util.inspect(error);\n    var jsdomError = new Error(\"Uncaught \".concat(errorString));\n    jsdomError.detail = error;\n    jsdomError.type = \"unhandled exception\";\n\n    window._virtualConsole.emit(\"jsdomError\", jsdomError);\n  }\n};\n\nfunction shouldBeDisplayedAsError(x) {\n  return x && x.name && x.message !== undefined && x.stack;\n}","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js"],"names":["util","require","idlUtils","ErrorEvent","createAnEvent","errorReportingMode","Symbol","reportAnError","line","col","target","errorObject","message","location","inspect","event","_globalObject","cancelable","filename","lineno","colno","error","_dispatch","defaultPrevented","module","exports","reportException","window","filenameHint","stack","lines","split","pieces","i","length","match","fileName","_document","URL","lineNumber","parseInt","columnNumber","windowImpl","implForWrapper","handled","errorString","shouldBeDisplayedAsError","name","jsdomError","Error","detail","type","_virtualConsole","emit","x","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\nconst util = require(\"util\");\nconst idlUtils = require(\"../generated/utils\");\nconst ErrorEvent = require(\"../generated/ErrorEvent\");\nconst { createAnEvent } = require(\"../helpers/events\");\n\nconst errorReportingMode = Symbol(\"error reporting mode\");\n\n// https://html.spec.whatwg.org/multipage/webappapis.html#report-the-error\n// Omits script parameter and any check for muted errors.\n// Takes target as an EventTarget impl.\n// Takes error object, message, and location as params, unlike the spec.\n// Returns whether the event was handled or not.\nfunction reportAnError(line, col, target, errorObject, message, location) {\n  if (target[errorReportingMode]) {\n    return false;\n  }\n\n  target[errorReportingMode] = true;\n\n  if (typeof message !== \"string\") {\n    message = \"uncaught exception: \" + util.inspect(errorObject);\n  }\n\n  const event = createAnEvent(\"error\", target._globalObject, ErrorEvent, {\n    cancelable: true,\n    message,\n    filename: location,\n    lineno: line,\n    colno: col,\n    error: errorObject\n  });\n\n  try {\n    target._dispatch(event);\n  } finally {\n    target[errorReportingMode] = false;\n    return event.defaultPrevented;\n  }\n}\n\nmodule.exports = function reportException(window, error, filenameHint) {\n  // This function will give good results on real Error objects with stacks; poor ones otherwise\n\n  const stack = error && error.stack;\n  const lines = stack && stack.split(\"\\n\");\n\n  // Find the first line that matches; important for multi-line messages\n  let pieces;\n  if (lines) {\n    for (let i = 1; i < lines.length && !pieces; ++i) {\n      pieces = lines[i].match(/at (?:(.+)\\s+)?\\(?(?:(.+?):(\\d+):(\\d+)|([^)]+))\\)?/);\n    }\n  }\n\n  const fileName = (pieces && pieces[2]) || filenameHint || window._document.URL;\n  const lineNumber = (pieces && parseInt(pieces[3])) || 0;\n  const columnNumber = (pieces && parseInt(pieces[4])) || 0;\n\n  const windowImpl = idlUtils.implForWrapper(window);\n\n  const handled = reportAnError(lineNumber, columnNumber, windowImpl, error, error && error.message, fileName);\n\n  if (!handled) {\n    const errorString = shouldBeDisplayedAsError(error) ? `[${error.name}: ${error.message}]` : util.inspect(error);\n    const jsdomError = new Error(`Uncaught ${errorString}`);\n    jsdomError.detail = error;\n    jsdomError.type = \"unhandled exception\";\n\n    window._virtualConsole.emit(\"jsdomError\", jsdomError);\n  }\n};\n\nfunction shouldBeDisplayedAsError(x) {\n  return x && x.name && x.message !== undefined && x.stack;\n}\n"]},"metadata":{},"sourceType":"script"}