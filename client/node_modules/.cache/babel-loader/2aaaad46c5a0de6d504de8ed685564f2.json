{"ast":null,"code":"import _objectSpread from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _assertThisInitialized from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx\";\nimport React, { Component, ChildComponent } from \"react\";\nimport { ListGroup } from \"react-bootstrap/esm\";\nimport { Button, DropdownMenu, Dropdown } from \"reactstrap/es\"; // import {Tooltip,OverlayTrigger} from \"react-bootstrap\"\n\nimport { withRouter } from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\nimport * as ReactDOM from \"react-dom\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { MyCommandCell } from \"./mycommand.jsx\";\nimport \"hammerjs\";\nimport { getEodData } from \"../services/dataService\";\nimport { EOD } from \"../data/models\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar request = require('request');\n\nvar viewChartOver = /*#__PURE__*/function (_React$Component) {\n  _inherits(viewChartOver, _React$Component);\n\n  var _super = _createSuper(viewChartOver);\n\n  function viewChartOver() {\n    _classCallCheck(this, viewChartOver);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(viewChartOver, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        title: \"View chart\",\n        children: \"view the char\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return viewChartOver;\n}(React.Component);\n\nexport default withRouter( /*#__PURE__*/function (_React$Component2) {\n  _inherits(WatchList, _React$Component2);\n\n  var _super2 = _createSuper(WatchList);\n\n  function WatchList(_props) {\n    var _this;\n\n    _classCallCheck(this, WatchList);\n\n    _this = _super2.call(this, _props); // this.getEodData=this.getEodData.bind(this)\n\n    _this.CommandCell = function (props) {\n      return /*#__PURE__*/_jsxDEV(MyCommandCell, _objectSpread(_objectSpread({}, props), {}, {\n        remove: _this.removeStock\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.removeStock = _this.removeStock.bind(_assertThisInitialized(_this));\n    _this.renderStockChart = _this.renderStockChart.bind(_assertThisInitialized(_this));\n    _this.removeHelper = _this.removeHelper.bind(_assertThisInitialized(_this)); // this.getButton=this.getButton.bind(this);\n\n    _this.state = {\n      email: _this.props.email,\n      stocks: _this.props.stocks,\n      connectionError: false,\n      dropdownOpen: false,\n      value: \"Your Watchlist\",\n      stockHasBeenRemoved: false,\n      chartStock: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(WatchList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (prevState.stockHasBeenRemoved !== this.state.stockHasBeenRemoved) {\n        console.log('User has removed a stock.');\n\n        if (this.props.history.push !== undefined) {\n          this.setState({\n            stockHasBeenRemoved: false\n          }, function () {\n            return _this2.props.history.push(\"/profile\", [[{\n              email: _this2.state.email,\n              removeStocks: true\n            }, _this2.state.stocks]]);\n          });\n        } else {\n          this.setState({\n            stocks: this.state.stocks\n          });\n        }\n      }\n\n      if (this.props.stocks.length != prevProps.stocks.length) {\n        console.log('Update stocks');\n        this.setState({\n          stocks: this.props.stocks\n        });\n      }\n\n      if (prevState.chartStock !== this.state.chartStock && this.state.chartStock !== \"\") {\n        var stock_chart = this.state.chartStock;\n        console.log(\"render chart for \", stock_chart);\n        this.setState({\n          chartStock: \"\"\n        }, function () {\n          return _this2.props.history.push(\"/profile\", [[{\n            email: _this2.state.email,\n            chartStock: stock_chart\n          }, _this2.state.stocks]]);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this3 = this;\n\n      // var data = getEodData(\"AAPL\");\n      // console.log(data);\n      this.setState({\n        eodData: getEodData(\"AAPL\")\n      }, function () {\n        return console.log(_this3.state.eodData);\n      });\n    } // getEodData(symbol){\n    //   var fullUrl= \"http://api.marketstack.com/v1/eod/latest?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=\"+symbol;\n    //   request(fullUrl, { json: true }, (err, res, body) => {\n    //     if (err) { return console.log(err); }\n    //     console.log(.json())\n    //     return JSON.parse(body.data);\n    //   })\n    // }\n    //     getButton(){\n    //         return(\n    // <button className=\"k-button k-grid-remove-command\"onClick={(e) =>this.remove(e)}>Remove </button>\n    //         )\n    //     }\n    // remove(e,stocks){\n    //     console.log(stocks);\n    // }\n    // componentWillMount(){\n    //     this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n    //     this.getUserStocks();\n    // }\n    // componentWillUnmount(){\n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.stocks !== this.props.stocks) {\n    //       console.log('stocks state has changed.')\n    //     //   this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n    //         this.setState({stocks:this.props.stocks});\n    //     }\n    //   }\n    // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n    // saveNewStockTrade= (event) => {\n    //     let result = JSON.parse(event.data)\n    //     console.log(result)\n    //     let user_watchlist = this.state.stocks\n    //     console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n    //     if(result.type===\"trade\"){\n    //         user_watchlist.forEach(symbol => {\n    //             var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n    //             if(tradePrice.length !==0){\n    //                 symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n    //                 console.log(\"Found Updated price for \",symbol.Symbol)\n    //                 // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n    //             }\n    //         })\n    //     }\n    //     this.setState({stocks:user_watchlist});\n    // }\n    // componentDidMount(){\n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    //         </div></>\n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n    // }\n\n  }, {\n    key: \"removeStock\",\n    value: function removeStock(htmlEvent, stock) {\n      var _this4 = this;\n\n      //unsubsribe from listening to thsi stock\n      console.log(\"Unsubscribing from: \", stock.Symbol); // this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n      //first stop the htmlEvents default status\n\n      htmlEvent.preventDefault();\n      var user = {\n        email: this.props.email,\n        stock_symbol: stock.Symbol\n      };\n      console.log(user);\n      var url = '/api/removeUserStock';\n      var req = new Request(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n      });\n      fetch(req).then(function (res) {\n        console.log(res);\n\n        if (res.status === 500) {\n          res.json().then(function (json) {\n            var message = json.message,\n                stackTrace = json.stackTrace;\n          }).catch(function (error) {\n            return Promise.reject(error);\n          });\n        } else {\n          return res.json();\n        }\n      }).then(function (result) {\n        console.log(\"1st remove stock rerender\");\n\n        _this4.setState({\n          remove_status: result\n        }, function () {\n          return _this4.removeHelper();\n        });\n      });\n    }\n  }, {\n    key: \"removeHelper\",\n    value: function removeHelper() {\n      console.log(\"p/179\", this.state.remove_status); //removed but still showing on watch list\n\n      if (this.state.remove_status.response === \"Stock not on watch list\") {\n        alert(\"Stock Queued For Deletion, Please Login In Again\");\n      } //stock has been removed from watchlist\n      else if (this.state.remove_status.Response === \"Sucessfully removed stock\") {\n          console.log(\"2nd remove stock rerender\");\n          this.setState({\n            stockHasBeenRemoved: true\n          });\n        }\n    } // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n    // }\n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n    // }\n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n    //     }\n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n    // }\n    // handleChange(event) {\n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n\n  }, {\n    key: \"renderStockChart\",\n    value: function renderStockChart(event) {\n      console.log(event.dataItem.Symbol);\n      this.setState({\n        chartStock: event.dataItem.Symbol\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n      // // console.log(\"In render: \", this.state.dropdownDisplay);\n      // if (this.state == null){\n      //     this.props.history.push(\"/error\");\n      //     }\n      // var Message = \"Your WatchList\";\n      // if(this.state.stocks===\"No stocks added\"){\n      //     Message =\"Empty Watchlist\"; \n      // }\n      // var MessageArrowDir;\n      // if(this.state.dropdownOpen){\n      //   MessageArrowDir = \"\\u25BC\";\n      // }\n      // else{\n      //   MessageArrowDir = \"\\u25B2\";\n      // }\n      // var dropdownDisplay =\n      //     <> <div className = \"dropDiv\">\n      //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n      //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n      //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n      //     </div></>\n      // var dropdown;\n      // if(this.state.stocks!==\"No stocks added\"){\n      // dropdown = \n      // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n      //     {dropdownDisplay}\n      //     <DropdownMenu className = \"DDM\">\n      //       <div className = \"ArtistsDisplayWrapper\">\n      //         {this.state.stocks.map((stocks,index) =>\n      //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n      //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n      //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n      //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n      //     </div>\n      //         )}\n      //       </div>\n      //     </DropdownMenu>\n      // </Dropdown>\n      // }\n      // else{\n      //     dropdown = dropdownDisplay;\n      // }\n      // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n      // this.props.history.push(\"/error\",this.state)\n      // onClick={this.props.onClick}\n      var useData;\n      if (this.props.stocks !== \"No stocks added\") useData = this.props.stocks;else {\n        useData = [{\n          Symbol: \"Add stocks\",\n          currenPrice: \"Add stocks\"\n        }];\n      }\n      console.log(useData);\n      return /*#__PURE__*/_jsxDEV(Tooltip, {\n        openDelay: 100,\n        position: \"right\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          data: useData // style={{ height: 700 }}\n          ,\n          onRowClick: this.renderStockChart,\n          title: \"WatchList\",\n          children: [/*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Name\",\n            field: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Symbol\",\n            field: \"Symbol\",\n            style: {\n              width: 100\n            },\n            locked: false,\n            width: 100\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Current Price\",\n            field: \"currentPrice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Change\",\n            field: \"day_change\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"% Change\",\n            field: \"change_pct\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Volume\",\n            field: \"volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Market Cap\",\n            field: \"market_cap\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"View Options\",\n            id: \"Symbol\",\n            cell: this.CommandCell,\n            width: \"200px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Tracker\",\n            id: \"Symbol\",\n            cell: this.CommandCell,\n            width: \"200px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Remove From WatchList\",\n            id: \"Symbol\",\n            cell: this.CommandCell,\n            width: \"200px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 11\n      }, this);\n    }\n  }]);\n\n  return WatchList;\n}(React.Component));","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx"],"names":["React","Component","ChildComponent","ListGroup","Button","DropdownMenu","Dropdown","withRouter","Grid","GridCellProps","GridColumn","ReactDOM","Tooltip","OverlayTrigger","MyCommandCell","getEodData","EOD","request","require","viewChartOver","props","CommandCell","removeStock","bind","renderStockChart","removeHelper","state","email","stocks","connectionError","dropdownOpen","value","stockHasBeenRemoved","chartStock","prevProps","prevState","console","log","history","push","undefined","setState","removeStocks","length","stock_chart","eodData","htmlEvent","stock","Symbol","preventDefault","user","stock_symbol","url","req","Request","method","headers","body","JSON","stringify","fetch","then","res","status","json","message","stackTrace","catch","error","Promise","reject","result","remove_status","response","alert","Response","event","dataItem","useData","currenPrice","width"],"mappings":"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","sourcesContent":["import React,{Component,ChildComponent} from \"react\";\nimport {ListGroup} from \"react-bootstrap/esm\";\nimport {Button,DropdownMenu,Dropdown,} from \"reactstrap/es\";\n// import {Tooltip,OverlayTrigger} from \"react-bootstrap\"\nimport {withRouter} from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\nimport * as ReactDOM from \"react-dom\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { MyCommandCell } from \"./mycommand.jsx\";\nimport \"hammerjs\";import { getEodData } from \"../services/dataService\";\nimport { EOD } from \"../data/models\";\nconst request = require('request');\n\nclass viewChartOver extends React.Component {\n  render() {\n    return (\n      <td title={\"View chart\"}>\n        {\"view the char\"}\n      </td>\n    );\n  }\n}\nexport default withRouter( class WatchList extends React.Component {\n \n    constructor(props) {\n        super(props)\n            // this.getEodData=this.getEodData.bind(this)\n            this.removeStock=this.removeStock.bind(this);\n            this.renderStockChart=this.renderStockChart.bind(this);\n            this.removeHelper=this.removeHelper.bind(this);\n            // this.getButton=this.getButton.bind(this);\n            this.state={\n                email : this.props.email,\n                stocks:this.props.stocks,\n                connectionError: false,\n                dropdownOpen: false,\n                value:\"Your Watchlist\",\n                stockHasBeenRemoved:false,\n                chartStock:\"\"\n                \n            }\n            \n        \n        \n    }\n    CommandCell = (props) => (\n        <MyCommandCell\n          {...props}\n          \n          remove={this.removeStock}\n          \n        />\n      );\n      componentDidUpdate(prevProps, prevState) {\n        if (prevState.stockHasBeenRemoved !== this.state.stockHasBeenRemoved) {\n          console.log('User has removed a stock.')\n          if(this.props.history.push!== undefined) {\n            this.setState({stockHasBeenRemoved:false},()=>this.props.history.push(\"/profile\",[[{email:this.state.email,removeStocks:true},this.state.stocks]]));\n          }\n          else{\n              this.setState({stocks:this.state.stocks})\n          }\n        }\n          if (this.props.stocks.length != prevProps.stocks.length) {\n            console.log('Update stocks')\n            this.setState({stocks:this.props.stocks})\n         \n        }\n        if(prevState.chartStock!==this.state.chartStock && this.state.chartStock!==\"\"){\n          var stock_chart= this.state.chartStock;\n          console.log(\"render chart for \", stock_chart);\n          \n          this.setState({chartStock:\"\"},()=>this.props.history.push(\"/profile\",[[{email:this.state.email,chartStock:stock_chart},this.state.stocks]]))\n        }\n      }\n      \n      componentWillMount(){\n        // var data = getEodData(\"AAPL\");\n        // console.log(data);\n        this.setState({eodData:getEodData(\"AAPL\")},()=>console.log(this.state.eodData))\n        \n      }\n      // getEodData(symbol){\n        \n      //   var fullUrl= \"http://api.marketstack.com/v1/eod/latest?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=\"+symbol;\n      \n      //   request(fullUrl, { json: true }, (err, res, body) => {\n      //     if (err) { return console.log(err); }\n      //     console.log(.json())\n      //     return JSON.parse(body.data);\n         \n          \n      //   })\n\n      // }\n//     getButton(){\n//         return(\n// <button className=\"k-button k-grid-remove-command\"onClick={(e) =>this.remove(e)}>Remove </button>\n//         )\n//     }\n    // remove(e,stocks){\n    //     console.log(stocks);\n    // }\n    // componentWillMount(){\n    //     this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n    //     this.getUserStocks();\n        \n    // }\n    // componentWillUnmount(){\n        \n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n            \n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.stocks !== this.props.stocks) {\n    //       console.log('stocks state has changed.')\n    //     //   this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n    //         this.setState({stocks:this.props.stocks});\n    //     }\n    //   }\n    // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n    // saveNewStockTrade= (event) => {\n        \n    //     let result = JSON.parse(event.data)\n    //     console.log(result)\n    //     let user_watchlist = this.state.stocks\n    //     console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n    //     if(result.type===\"trade\"){\n    //         user_watchlist.forEach(symbol => {\n    //             var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n    //             if(tradePrice.length !==0){\n    //                 symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n    //                 console.log(\"Found Updated price for \",symbol.Symbol)\n    //                 // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n    //             }\n    //         })\n            \n    //     }\n    //     this.setState({stocks:user_watchlist});\n    // }\n     \n    // componentDidMount(){\n       \n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n            \n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    \n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    \n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n        \n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n    //         </div></>\n        \n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    \n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n                \n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n        \n\n    // }\n   \n    removeStock(htmlEvent,stock){\n        //unsubsribe from listening to thsi stock\n       console.log(\"Unsubscribing from: \",stock.Symbol)\n        // this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n        //first stop the htmlEvents default status\n        htmlEvent.preventDefault();\n        var user={\n            email:this.props.email,\n            stock_symbol: stock.Symbol,\n    \n        } \n        console.log(user)\n        var url = '/api/removeUserStock';\n        const req = new Request(url,{\n            method:\"POST\",\n            headers:{\"Content-Type\":\"application/json\"},\n            body:JSON.stringify(user),\n        });\n        fetch(req)\n        .then((res)=>{\n            console.log(res)\n            if(res.status===500){\n            res.json()\n            .then((json)=>{\n                const {message,stackTrace}=json;\n              })\n              .catch((error)=>{\n                return Promise.reject(error);\n              });\n            }\n            else{\n                \n              return res.json();\n            }\n          })\n          .then((result)=> {\n              \n              console.log(\"1st remove stock rerender\");\n              this.setState({remove_status:result},()=>this.removeHelper())});\n    \n    }\n    \n    removeHelper(){\n        console.log(\"p/179\",this.state.remove_status);\n        //removed but still showing on watch list\n        if(this.state.remove_status.response===\"Stock not on watch list\"){\n            alert(\"Stock Queued For Deletion, Please Login In Again\");\n        }\n        //stock has been removed from watchlist\n        else if(this.state.remove_status.Response===\"Sucessfully removed stock\"){\n            console.log(\"2nd remove stock rerender\");\n            this.setState({stockHasBeenRemoved:true});\n           \n        }\n    }\n    // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n           \n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n        \n    // }\n    \n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n        \n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n        \n        \n        \n    // }\n    \n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n        \n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n           \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n                \n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n            \n    //     }\n    \n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n        \n        \n    // }\n    // handleChange(event) {\n         \n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n\n    renderStockChart(event){\n      console.log(event.dataItem.Symbol)\n      this.setState({chartStock:event.dataItem.Symbol})\n    }\n    render(){\n        \n    \n        // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n        // // console.log(\"In render: \", this.state.dropdownDisplay);\n        // if (this.state == null){\n        //     this.props.history.push(\"/error\");\n        //     }\n        \n        \n        // var Message = \"Your WatchList\";\n        // if(this.state.stocks===\"No stocks added\"){\n        //     Message =\"Empty Watchlist\"; \n        // }\n        // var MessageArrowDir;\n        // if(this.state.dropdownOpen){\n        //   MessageArrowDir = \"\\u25BC\";\n        // }\n    \n        // else{\n        //   MessageArrowDir = \"\\u25B2\";\n        // }\n        \n        // var dropdownDisplay =\n        //     <> <div className = \"dropDiv\">\n        //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n        //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n        //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n        //     </div></>\n        // var dropdown;\n        // if(this.state.stocks!==\"No stocks added\"){\n    \n        // dropdown = \n    \n        // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n        //     {dropdownDisplay}\n    \n        //     <DropdownMenu className = \"DDM\">\n        //       <div className = \"ArtistsDisplayWrapper\">\n        //         {this.state.stocks.map((stocks,index) =>\n                \n        //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n        //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n        //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n        //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n        //     </div>\n        //         )}\n        //       </div>\n        //     </DropdownMenu>\n        // </Dropdown>\n        // }\n        // else{\n        //     dropdown = dropdownDisplay;\n    \n           \n      \n        // }\n       \n        // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n        \n        // this.props.history.push(\"/error\",this.state)\n        // onClick={this.props.onClick}\n        var useData;\n\n        if(this.props.stocks !==\"No stocks added\")useData=this.props.stocks\n        else{\n          useData=[{\n            Symbol:\"Add stocks\",\n            currenPrice:\"Add stocks\"\n          },]\n        }\n        console.log(useData)\n        return (\n          \n          \n          <Tooltip openDelay={100} position=\"right\" >\n            <Grid\n            data={useData}\n            // style={{ height: 700 }}\n            onRowClick= {this.renderStockChart}\n            title=\"WatchList\"\n             >\n               \n            \n  \n    <GridColumn title=\"Name\" field=\"name\" />\n    <GridColumn title=\"Symbol\" field=\"Symbol\"style={{ width: 100 }} locked={false} width={100} />\n    <GridColumn title=\"Current Price\" field=\"currentPrice\" />\n    \n    {/* <GridColumn title=\"View Chart\" id=\"Symbol\" cell={tooltiprender} width=\"200px\" /> */}\n    \n    <GridColumn title=\"Change\" field=\"day_change\" />\n    <GridColumn title=\"% Change\" field=\"change_pct\" />\n    <GridColumn title=\"Volume\" field=\"volume\" />\n    <GridColumn title=\"Market Cap\" field=\"market_cap\" /> \n    <GridColumn title=\"View Options\" id=\"Symbol\" cell={this.CommandCell} width=\"200px\" />\n    <GridColumn title=\"Tracker\" id=\"Symbol\" cell={this.CommandCell} width=\"200px\" />\n    <GridColumn title=\"Remove From WatchList\" id=\"Symbol\" cell={this.CommandCell} width=\"200px\" />\n\n    \n\n          </Grid>\n          </Tooltip>\n         \n          \n          );\n        }\n})\n"]},"metadata":{},"sourceType":"module"}