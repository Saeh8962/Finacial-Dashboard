{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar usm = require(\"./url-state-machine\");\n\nvar urlencoded = require(\"./urlencoded\");\n\nvar URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = /*#__PURE__*/function () {\n  function URLImpl(globalObject, constructorArgs) {\n    _classCallCheck(this, URLImpl);\n\n    var url = constructorArgs[0];\n    var base = constructorArgs[1];\n    var parsedBase = null;\n\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n\n      if (parsedBase === null) {\n        throw new TypeError(\"Invalid base URL: \".concat(base));\n      }\n    }\n\n    var parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n\n    if (parsedURL === null) {\n      throw new TypeError(\"Invalid URL: \".concat(url));\n    }\n\n    var query = parsedURL.query !== null ? parsedURL.query : \"\";\n    this._url = parsedURL; // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n\n    this._query = URLSearchParams.createImpl(globalObject, [query], {\n      doNotStripQMark: true\n    });\n    this._query._url = this;\n  }\n\n  _createClass(URLImpl, [{\n    key: \"href\",\n    get: function get() {\n      return usm.serializeURL(this._url);\n    },\n    set: function set(v) {\n      var parsedURL = usm.basicURLParse(v);\n\n      if (parsedURL === null) {\n        throw new TypeError(\"Invalid URL: \".concat(v));\n      }\n\n      this._url = parsedURL;\n\n      this._query._list.splice(0);\n\n      var query = parsedURL.query;\n\n      if (query !== null) {\n        this._query._list = urlencoded.parseUrlencodedString(query);\n      }\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      return usm.serializeURLOrigin(this._url);\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      return \"\".concat(this._url.scheme, \":\");\n    },\n    set: function set(v) {\n      usm.basicURLParse(\"\".concat(v, \":\"), {\n        url: this._url,\n        stateOverride: \"scheme start\"\n      });\n    }\n  }, {\n    key: \"username\",\n    get: function get() {\n      return this._url.username;\n    },\n    set: function set(v) {\n      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n        return;\n      }\n\n      usm.setTheUsername(this._url, v);\n    }\n  }, {\n    key: \"password\",\n    get: function get() {\n      return this._url.password;\n    },\n    set: function set(v) {\n      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n        return;\n      }\n\n      usm.setThePassword(this._url, v);\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      var url = this._url;\n\n      if (url.host === null) {\n        return \"\";\n      }\n\n      if (url.port === null) {\n        return usm.serializeHost(url.host);\n      }\n\n      return \"\".concat(usm.serializeHost(url.host), \":\").concat(usm.serializeInteger(url.port));\n    },\n    set: function set(v) {\n      if (this._url.cannotBeABaseURL) {\n        return;\n      }\n\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"host\"\n      });\n    }\n  }, {\n    key: \"hostname\",\n    get: function get() {\n      if (this._url.host === null) {\n        return \"\";\n      }\n\n      return usm.serializeHost(this._url.host);\n    },\n    set: function set(v) {\n      if (this._url.cannotBeABaseURL) {\n        return;\n      }\n\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"hostname\"\n      });\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      if (this._url.port === null) {\n        return \"\";\n      }\n\n      return usm.serializeInteger(this._url.port);\n    },\n    set: function set(v) {\n      if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n        return;\n      }\n\n      if (v === \"\") {\n        this._url.port = null;\n      } else {\n        usm.basicURLParse(v, {\n          url: this._url,\n          stateOverride: \"port\"\n        });\n      }\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      if (this._url.cannotBeABaseURL) {\n        return this._url.path[0];\n      }\n\n      if (this._url.path.length === 0) {\n        return \"\";\n      }\n\n      return \"/\".concat(this._url.path.join(\"/\"));\n    },\n    set: function set(v) {\n      if (this._url.cannotBeABaseURL) {\n        return;\n      }\n\n      this._url.path = [];\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"path start\"\n      });\n    }\n  }, {\n    key: \"search\",\n    get: function get() {\n      if (this._url.query === null || this._url.query === \"\") {\n        return \"\";\n      }\n\n      return \"?\".concat(this._url.query);\n    },\n    set: function set(v) {\n      var url = this._url;\n\n      if (v === \"\") {\n        url.query = null;\n        this._query._list = [];\n        return;\n      }\n\n      var input = v[0] === \"?\" ? v.substring(1) : v;\n      url.query = \"\";\n      usm.basicURLParse(input, {\n        url: url,\n        stateOverride: \"query\"\n      });\n      this._query._list = urlencoded.parseUrlencodedString(input);\n    }\n  }, {\n    key: \"searchParams\",\n    get: function get() {\n      return this._query;\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      if (this._url.fragment === null || this._url.fragment === \"\") {\n        return \"\";\n      }\n\n      return \"#\".concat(this._url.fragment);\n    },\n    set: function set(v) {\n      if (v === \"\") {\n        this._url.fragment = null;\n        return;\n      }\n\n      var input = v[0] === \"#\" ? v.substring(1) : v;\n      this._url.fragment = \"\";\n      usm.basicURLParse(input, {\n        url: this._url,\n        stateOverride: \"fragment\"\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.href;\n    }\n  }]);\n\n  return URLImpl;\n}();","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/whatwg-url/dist/URL-impl.js"],"names":["usm","require","urlencoded","URLSearchParams","exports","implementation","globalObject","constructorArgs","url","base","parsedBase","undefined","basicURLParse","TypeError","parsedURL","baseURL","query","_url","_query","createImpl","doNotStripQMark","serializeURL","v","_list","splice","parseUrlencodedString","serializeURLOrigin","scheme","stateOverride","username","cannotHaveAUsernamePasswordPort","setTheUsername","password","setThePassword","host","port","serializeHost","serializeInteger","cannotBeABaseURL","path","length","join","input","substring","fragment","href"],"mappings":"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","sourcesContent":["\"use strict\";\nconst usm = require(\"./url-state-machine\");\nconst urlencoded = require(\"./urlencoded\");\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  constructor(globalObject, constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl(globalObject, [query], { doNotStripQMark: true });\n    this._query._url = this;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n    const { query } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencodedString(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return `${this._url.scheme}:`;\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(`${v}:`, { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return `/${this._url.path.join(\"/\")}`;\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return `?${this._url.query}`;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n    this._query._list = urlencoded.parseUrlencodedString(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return `#${this._url.fragment}`;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}