{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar notImplemented = require(\"../../browser/not-implemented\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../../utils\"),\n    Canvas = _require.Canvas;\n\nvar HTMLCanvasElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLCanvasElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLCanvasElementImpl);\n\n  function HTMLCanvasElementImpl() {\n    _classCallCheck(this, HTMLCanvasElementImpl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HTMLCanvasElementImpl, [{\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      if (this._canvas && (name === \"width\" || name === \"height\")) {\n        this._canvas[name] = parseInt(value);\n      }\n\n      _get(_getPrototypeOf(HTMLCanvasElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n    }\n  }, {\n    key: \"_getCanvas\",\n    value: function _getCanvas() {\n      if (Canvas && !this._canvas) {\n        this._canvas = Canvas.createCanvas(this.width, this.height);\n      }\n\n      return this._canvas;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(contextId) {\n      var canvas = this._getCanvas();\n\n      if (canvas) {\n        if (!this._context) {\n          this._context = canvas.getContext(contextId) || null;\n\n          if (this._context) {\n            // Override the native canvas reference with our wrapper. This is the\n            // reason why we need to locally cache _context, since each call to\n            // canvas.getContext(contextId) would replace this reference again.\n            // Perhaps in the longer term, a better solution would be to create a\n            // full wrapper for the Context object as well.\n            this._context.canvas = idlUtils.wrapperForImpl(this);\n            wrapNodeCanvasMethod(this._context, \"createPattern\");\n            wrapNodeCanvasMethod(this._context, \"drawImage\");\n          }\n        }\n\n        return this._context;\n      }\n\n      notImplemented(\"HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)\", this._ownerDocument._defaultView);\n      return null;\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL() {\n      var canvas = this._getCanvas();\n\n      if (canvas) {\n        return canvas.toDataURL.apply(canvas, arguments);\n      }\n\n      notImplemented(\"HTMLCanvasElement.prototype.toDataURL (without installing the canvas npm package)\", this._ownerDocument._defaultView);\n      return null;\n    }\n  }, {\n    key: \"toBlob\",\n    value: function toBlob(callback, type, qualityArgument) {\n      var window = this._ownerDocument._defaultView;\n\n      var canvas = this._getCanvas();\n\n      if (canvas) {\n        var options = {};\n\n        switch (type) {\n          case \"image/jpg\":\n          case \"image/jpeg\":\n            type = \"image/jpeg\";\n            options.quality = qualityArgument;\n            break;\n\n          default:\n            type = \"image/png\";\n        }\n\n        canvas.toBuffer(function (err, buff) {\n          if (err) {\n            throw err;\n          }\n\n          callback(new window.Blob([buff], {\n            type: type\n          }));\n        }, type, options);\n      } else {\n        notImplemented(\"HTMLCanvasElement.prototype.toBlob (without installing the canvas npm package)\", window);\n      }\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      var parsed = parseInt(this.getAttributeNS(null, \"width\"));\n      return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 300 : parsed;\n    },\n    set: function set(v) {\n      v = v > 2147483647 ? 300 : v;\n      this.setAttributeNS(null, \"width\", String(v));\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      var parsed = parseInt(this.getAttributeNS(null, \"height\"));\n      return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 150 : parsed;\n    },\n    set: function set(v) {\n      v = v > 2147483647 ? 150 : v;\n      this.setAttributeNS(null, \"height\", String(v));\n    }\n  }]);\n\n  return HTMLCanvasElementImpl;\n}(HTMLElementImpl); // We need to wrap the methods that receive an image or canvas object\n// (luckily, always as the first argument), so that these objects can be\n// unwrapped an the expected types passed.\n\n\nfunction wrapNodeCanvasMethod(ctx, name) {\n  var prev = ctx[name];\n\n  ctx[name] = function (image) {\n    var impl = idlUtils.implForWrapper(image);\n\n    if (impl) {\n      if (impl instanceof HTMLCanvasElementImpl && !impl._canvas) {\n        impl._getCanvas();\n      }\n\n      image = impl._image || impl._canvas;\n    }\n\n    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    }\n\n    return prev.call.apply(prev, [ctx, image].concat(rest));\n  };\n}\n\nmodule.exports = {\n  implementation: HTMLCanvasElementImpl\n};","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLCanvasElement-impl.js"],"names":["HTMLElementImpl","require","implementation","notImplemented","idlUtils","Canvas","HTMLCanvasElementImpl","name","value","oldValue","_canvas","parseInt","createCanvas","width","height","contextId","canvas","_getCanvas","_context","getContext","wrapperForImpl","wrapNodeCanvasMethod","_ownerDocument","_defaultView","toDataURL","callback","type","qualityArgument","window","options","quality","toBuffer","err","buff","Blob","parsed","getAttributeNS","isNaN","v","setAttributeNS","String","ctx","prev","image","impl","implForWrapper","_image","rest","call","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst notImplemented = require(\"../../browser/not-implemented\");\nconst idlUtils = require(\"../generated/utils\");\nconst { Canvas } = require(\"../../utils\");\n\nclass HTMLCanvasElementImpl extends HTMLElementImpl {\n  _attrModified(name, value, oldValue) {\n    if (this._canvas && (name === \"width\" || name === \"height\")) {\n      this._canvas[name] = parseInt(value);\n    }\n\n    super._attrModified(name, value, oldValue);\n  }\n\n  _getCanvas() {\n    if (Canvas && !this._canvas) {\n      this._canvas = Canvas.createCanvas(this.width, this.height);\n    }\n    return this._canvas;\n  }\n\n  getContext(contextId) {\n    const canvas = this._getCanvas();\n    if (canvas) {\n      if (!this._context) {\n        this._context = canvas.getContext(contextId) || null;\n        if (this._context) {\n          // Override the native canvas reference with our wrapper. This is the\n          // reason why we need to locally cache _context, since each call to\n          // canvas.getContext(contextId) would replace this reference again.\n          // Perhaps in the longer term, a better solution would be to create a\n          // full wrapper for the Context object as well.\n          this._context.canvas = idlUtils.wrapperForImpl(this);\n          wrapNodeCanvasMethod(this._context, \"createPattern\");\n          wrapNodeCanvasMethod(this._context, \"drawImage\");\n        }\n      }\n      return this._context;\n    }\n\n    notImplemented(\n      \"HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)\",\n      this._ownerDocument._defaultView\n    );\n    return null;\n  }\n\n  toDataURL(...args) {\n    const canvas = this._getCanvas();\n    if (canvas) {\n      return canvas.toDataURL(...args);\n    }\n\n    notImplemented(\n      \"HTMLCanvasElement.prototype.toDataURL (without installing the canvas npm package)\",\n      this._ownerDocument._defaultView\n    );\n    return null;\n  }\n\n  toBlob(callback, type, qualityArgument) {\n    const window = this._ownerDocument._defaultView;\n    const canvas = this._getCanvas();\n    if (canvas) {\n      const options = {};\n      switch (type) {\n        case \"image/jpg\":\n        case \"image/jpeg\":\n          type = \"image/jpeg\";\n          options.quality = qualityArgument;\n          break;\n        default:\n          type = \"image/png\";\n      }\n      canvas.toBuffer((err, buff) => {\n        if (err) {\n          throw err;\n        }\n        callback(new window.Blob([buff], { type }));\n      }, type, options);\n    } else {\n      notImplemented(\n        \"HTMLCanvasElement.prototype.toBlob (without installing the canvas npm package)\",\n        window\n      );\n    }\n  }\n\n  get width() {\n    const parsed = parseInt(this.getAttributeNS(null, \"width\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 300 : parsed;\n  }\n\n  set width(v) {\n    v = v > 2147483647 ? 300 : v;\n    this.setAttributeNS(null, \"width\", String(v));\n  }\n\n  get height() {\n    const parsed = parseInt(this.getAttributeNS(null, \"height\"));\n    return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 150 : parsed;\n  }\n\n  set height(v) {\n    v = v > 2147483647 ? 150 : v;\n    this.setAttributeNS(null, \"height\", String(v));\n  }\n}\n\n// We need to wrap the methods that receive an image or canvas object\n// (luckily, always as the first argument), so that these objects can be\n// unwrapped an the expected types passed.\nfunction wrapNodeCanvasMethod(ctx, name) {\n  const prev = ctx[name];\n  ctx[name] = function (image, ...rest) {\n    const impl = idlUtils.implForWrapper(image);\n    if (impl) {\n      if (impl instanceof HTMLCanvasElementImpl && !impl._canvas) {\n        impl._getCanvas();\n      }\n      image = impl._image || impl._canvas;\n    }\n    return prev.call(ctx, image, ...rest);\n  };\n}\n\nmodule.exports = {\n  implementation: HTMLCanvasElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}