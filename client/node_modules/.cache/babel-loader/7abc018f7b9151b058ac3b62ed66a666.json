{"ast":null,"code":"import _objectSpread from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _assertThisInitialized from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx\";\nimport React, { Component, ChildComponent } from \"react\";\nimport { ListGroup } from \"react-bootstrap/esm\";\nimport { Button, DropdownMenu, Dropdown } from \"reactstrap/es\"; // import {Tooltip,OverlayTrigger} from \"react-bootstrap\"\n\nimport { withRouter } from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\nimport * as ReactDOM from \"react-dom\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { MyCommandCell } from \"./mycommand.jsx\";\nimport \"hammerjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar request = require('request');\n\nvar viewChartOver = /*#__PURE__*/function (_React$Component) {\n  _inherits(viewChartOver, _React$Component);\n\n  var _super = _createSuper(viewChartOver);\n\n  function viewChartOver() {\n    _classCallCheck(this, viewChartOver);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(viewChartOver, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        title: \"View chart\",\n        children: \"view the char\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return viewChartOver;\n}(React.Component);\n\nexport default withRouter( /*#__PURE__*/function (_React$Component2) {\n  _inherits(WatchList, _React$Component2);\n\n  var _super2 = _createSuper(WatchList);\n\n  function WatchList(_props) {\n    var _this;\n\n    _classCallCheck(this, WatchList);\n\n    _this = _super2.call(this, _props);\n\n    _this.CommandCell = function (props) {\n      return /*#__PURE__*/_jsxDEV(MyCommandCell, _objectSpread(_objectSpread({}, props), {}, {\n        remove: _this.removeStock\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.saveNewStockTrade = function (event) {\n      var result = JSON.parse(event.data);\n      console.log(result);\n      var user_watchlist = _this.state.stocks;\n      console.log(\"InsidesaveNewStockTrade: \", user_watchlist);\n\n      if (result.type === \"trade\") {\n        user_watchlist.forEach(function (symbol) {\n          var tradePrice = result.data.filter(function (i, n) {\n            return i.s === symbol.Symbol;\n          });\n\n          if (tradePrice.length !== 0) {\n            symbol.currentPrice = tradePrice[tradePrice.length - 1].p;\n            console.log(\"Found Updated price for \", symbol.Symbol); // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n          }\n        });\n      }\n\n      _this.setState({\n        stocks: user_watchlist\n      });\n    };\n\n    _this.getEodData = _this.getEodData.bind(_assertThisInitialized(_this));\n    _this.removeStock = _this.removeStock.bind(_assertThisInitialized(_this));\n    _this.renderStockChart = _this.renderStockChart.bind(_assertThisInitialized(_this));\n    _this.removeHelper = _this.removeHelper.bind(_assertThisInitialized(_this)); // this.getButton=this.getButton.bind(this);\n\n    _this.state = {\n      email: _this.props.email,\n      stocks: _this.props.stocks,\n      connectionError: false,\n      dropdownOpen: false,\n      value: \"Your Watchlist\",\n      stockHasBeenRemoved: false,\n      chartStock: \"\",\n      eodData: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(WatchList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (prevState.stockHasBeenRemoved !== this.state.stockHasBeenRemoved) {\n        console.log('User has removed a stock.');\n\n        if (this.props.history.push !== undefined) {\n          this.setState({\n            stockHasBeenRemoved: false\n          }, function () {\n            return _this2.props.history.push(\"/profile\", [[{\n              email: _this2.state.email,\n              removeStocks: true\n            }, _this2.state.stocks]]);\n          });\n        } else {\n          this.setState({\n            stocks: this.state.stocks\n          });\n        }\n      }\n\n      if (this.props.stocks.length != prevProps.stocks.length) {\n        console.log('Update stocks');\n        this.setState({\n          stocks: this.props.stocks\n        });\n      }\n\n      if (prevState.chartStock !== this.state.chartStock && this.state.chartStock !== \"\") {\n        var stock_chart = this.state.chartStock;\n        console.log(\"render chart for \", stock_chart);\n        this.setState({\n          chartStock: \"\"\n        }, function () {\n          return _this2.props.history.push(\"/profile\", [[{\n            email: _this2.state.email,\n            chartStock: stock_chart\n          }, _this2.state.stocks]]);\n        });\n      }\n    } // componentDidMount(){\n    //   // var data = getEodData(\"AAPL\");\n    //   // console.log(data);\n    //   // this.setState({eodData:data})\n    // }\n\n  }, {\n    key: \"getEodData\",\n    value: function getEodData(symbols) {\n      var watchlists = symbols;\n      var getsymbols = \"\";\n      var x = 0;\n      symbols.forEach(function (symbol) {\n        getsymbols = getsymbols + symbol.Symbol;\n\n        if (x !== symbols.length - 1) {\n          getsymbols = getsymbols + \",\";\n        }\n\n        x = x + 1;\n      });\n      var fullUrl = \"http://api.marketstack.com/v1/eod/latest?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=\" + getsymbols;\n      request(fullUrl, {\n        json: true\n      }, function (err, res, body) {\n        if (err) {\n          return console.log(err);\n        }\n\n        var eod = body.data;\n        var newList = watchlists.map(function (element, index) {\n          element.eodClose = eod[index].close;\n        }); // this.setState({stocks:newList});\n\n        console.log(newList);\n      });\n    } //     getButton(){\n    //         return(\n    // <button className=\"k-button k-grid-remove-command\"onClick={(e) =>this.remove(e)}>Remove </button>\n    //         )\n    //     }\n    // remove(e,stocks){\n    //     console.log(stocks);\n    // }\n\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      // this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n      this.getEodData(this.state.stocks);\n    } // componentWillUnmount(){\n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.stocks !== this.props.stocks) {\n    //       console.log('stocks state has changed.')\n    //     //   this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n    //         this.setState({stocks:this.props.stocks});\n    //     }\n    //   }\n    // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n\n  }, {\n    key: \"removeStock\",\n    value: // componentDidMount(){\n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    //         </div></>\n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n    // }\n    function removeStock(htmlEvent, stock) {\n      var _this3 = this;\n\n      //unsubsribe from listening to thsi stock\n      console.log(\"Unsubscribing from: \", stock.Symbol); // this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n      //first stop the htmlEvents default status\n\n      htmlEvent.preventDefault();\n      var user = {\n        email: this.props.email,\n        stock_symbol: stock.Symbol\n      };\n      console.log(user);\n      var url = '/api/removeUserStock';\n      var req = new Request(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n      });\n      fetch(req).then(function (res) {\n        console.log(res);\n\n        if (res.status === 500) {\n          res.json().then(function (json) {\n            var message = json.message,\n                stackTrace = json.stackTrace;\n          }).catch(function (error) {\n            return Promise.reject(error);\n          });\n        } else {\n          return res.json();\n        }\n      }).then(function (result) {\n        console.log(\"1st remove stock rerender\");\n\n        _this3.setState({\n          remove_status: result\n        }, function () {\n          return _this3.removeHelper();\n        });\n      });\n    }\n  }, {\n    key: \"removeHelper\",\n    value: function removeHelper() {\n      console.log(\"p/179\", this.state.remove_status); //removed but still showing on watch list\n\n      if (this.state.remove_status.response === \"Stock not on watch list\") {\n        alert(\"Stock Queued For Deletion, Please Login In Again\");\n      } //stock has been removed from watchlist\n      else if (this.state.remove_status.Response === \"Sucessfully removed stock\") {\n          console.log(\"2nd remove stock rerender\");\n          this.setState({\n            stockHasBeenRemoved: true\n          });\n        }\n    } // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n    // }\n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n    // }\n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n    //     }\n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n    // }\n    // handleChange(event) {\n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n\n  }, {\n    key: \"renderStockChart\",\n    value: function renderStockChart(event) {\n      console.log(event.dataItem.Symbol);\n      this.setState({\n        chartStock: event.dataItem.Symbol\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.stokcs); // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n      // // console.log(\"In render: \", this.state.dropdownDisplay);\n      // if (this.state == null){\n      //     this.props.history.push(\"/error\");\n      //     }\n      // var Message = \"Your WatchList\";\n      // if(this.state.stocks===\"No stocks added\"){\n      //     Message =\"Empty Watchlist\"; \n      // }\n      // var MessageArrowDir;\n      // if(this.state.dropdownOpen){\n      //   MessageArrowDir = \"\\u25BC\";\n      // }\n      // else{\n      //   MessageArrowDir = \"\\u25B2\";\n      // }\n      // var dropdownDisplay =\n      //     <> <div className = \"dropDiv\">\n      //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n      //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n      //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n      //     </div></>\n      // var dropdown;\n      // if(this.state.stocks!==\"No stocks added\"){\n      // dropdown = \n      // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n      //     {dropdownDisplay}\n      //     <DropdownMenu className = \"DDM\">\n      //       <div className = \"ArtistsDisplayWrapper\">\n      //         {this.state.stocks.map((stocks,index) =>\n      //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n      //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n      //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n      //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n      //     </div>\n      //         )}\n      //       </div>\n      //     </DropdownMenu>\n      // </Dropdown>\n      // }\n      // else{\n      //     dropdown = dropdownDisplay;\n      // }\n      // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n      // this.props.history.push(\"/error\",this.state)\n      // onClick={this.props.onClick}\n\n      var useData;\n      if (this.props.stocks !== \"No stocks added\") useData = this.props.stocks;else {\n        useData = [{\n          Symbol: \"Add stocks\",\n          currenPrice: \"Add stocks\"\n        }];\n      }\n      console.log(this.state.eodData);\n      return /*#__PURE__*/_jsxDEV(Tooltip, {\n        openDelay: 100,\n        position: \"right\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          data: useData // style={{ height: 700 }}\n          ,\n          onRowClick: this.renderStockChart,\n          title: \"WatchList\",\n          children: [/*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Name\",\n            field: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Symbol\",\n            field: \"Symbol\",\n            style: {\n              width: 100\n            },\n            locked: false,\n            width: 100\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Current Price\",\n            field: \"currentPrice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Last Close\",\n            field: \"currentPrice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Change\",\n            field: \"day_change\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"% Change\",\n            field: \"change_pct\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"View Options\",\n            id: \"Symbol\",\n            cell: this.CommandCell,\n            width: \"200px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Tracker\",\n            id: \"Symbol\",\n            cell: this.CommandCell,\n            width: \"200px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n            title: \"Remove From WatchList\",\n            id: \"Symbol\",\n            cell: this.CommandCell,\n            width: \"200px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this);\n    }\n  }]);\n\n  return WatchList;\n}(React.Component));","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx"],"names":["React","Component","ChildComponent","ListGroup","Button","DropdownMenu","Dropdown","withRouter","Grid","GridCellProps","GridColumn","ReactDOM","Tooltip","OverlayTrigger","MyCommandCell","request","require","viewChartOver","props","CommandCell","removeStock","saveNewStockTrade","event","result","JSON","parse","data","console","log","user_watchlist","state","stocks","type","forEach","symbol","tradePrice","filter","i","n","s","Symbol","length","currentPrice","p","setState","getEodData","bind","renderStockChart","removeHelper","email","connectionError","dropdownOpen","value","stockHasBeenRemoved","chartStock","eodData","prevProps","prevState","history","push","undefined","removeStocks","stock_chart","symbols","watchlists","getsymbols","x","fullUrl","json","err","res","body","eod","newList","map","element","index","eodClose","close","htmlEvent","stock","preventDefault","user","stock_symbol","url","req","Request","method","headers","stringify","fetch","then","status","message","stackTrace","catch","error","Promise","reject","remove_status","response","alert","Response","dataItem","stokcs","useData","currenPrice","width"],"mappings":"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","sourcesContent":["import React,{Component,ChildComponent} from \"react\";\nimport {ListGroup} from \"react-bootstrap/esm\";\nimport {Button,DropdownMenu,Dropdown,} from \"reactstrap/es\";\n// import {Tooltip,OverlayTrigger} from \"react-bootstrap\"\nimport {withRouter} from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\nimport * as ReactDOM from \"react-dom\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { MyCommandCell } from \"./mycommand.jsx\";\nimport \"hammerjs\";\nconst request = require('request');\n\nclass viewChartOver extends React.Component {\n  render() {\n    return (\n      <td title={\"View chart\"}>\n        {\"view the char\"}\n      </td>\n    );\n  }\n}\nexport default withRouter( class WatchList extends React.Component {\n \n    constructor(props) {\n        super(props)\n            this.getEodData=this.getEodData.bind(this)\n            this.removeStock=this.removeStock.bind(this);\n            this.renderStockChart=this.renderStockChart.bind(this);\n            this.removeHelper=this.removeHelper.bind(this);\n            // this.getButton=this.getButton.bind(this);\n            this.state={\n                email : this.props.email,\n                stocks:this.props.stocks,\n                connectionError: false,\n                dropdownOpen: false,\n                value:\"Your Watchlist\",\n                stockHasBeenRemoved:false,\n                chartStock:\"\",\n                eodData:\"\"\n                \n            }\n            \n        \n        \n    }\n    CommandCell = (props) => (\n        <MyCommandCell\n          {...props}\n          \n          remove={this.removeStock}\n          \n        />\n      );\n      componentDidUpdate(prevProps, prevState) {\n        if (prevState.stockHasBeenRemoved !== this.state.stockHasBeenRemoved) {\n          console.log('User has removed a stock.')\n          if(this.props.history.push!== undefined) {\n            this.setState({stockHasBeenRemoved:false},()=>this.props.history.push(\"/profile\",[[{email:this.state.email,removeStocks:true},this.state.stocks]]));\n          }\n          else{\n              this.setState({stocks:this.state.stocks})\n          }\n        }\n          if (this.props.stocks.length != prevProps.stocks.length) {\n            console.log('Update stocks')\n            this.setState({stocks:this.props.stocks})\n         \n        }\n        if(prevState.chartStock!==this.state.chartStock && this.state.chartStock!==\"\"){\n          var stock_chart= this.state.chartStock;\n          console.log(\"render chart for \", stock_chart);\n          \n          this.setState({chartStock:\"\"},()=>this.props.history.push(\"/profile\",[[{email:this.state.email,chartStock:stock_chart},this.state.stocks]]))\n        }\n      }\n      \n      // componentDidMount(){\n      //   // var data = getEodData(\"AAPL\");\n      //   // console.log(data);\n        \n      //   // this.setState({eodData:data})\n        \n      // }\n      getEodData(symbols){\n        var watchlists = symbols;\n        var getsymbols =\"\";\n        var x= 0;\n        symbols.forEach(symbol=>{\n          getsymbols= getsymbols+symbol.Symbol\n          if(x !== symbols.length-1){\n            getsymbols = getsymbols+\",\";\n          }\n          x=x+1;\n        })\n         var fullUrl= \"http://api.marketstack.com/v1/eod/latest?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=\"+getsymbols;\n        request(fullUrl, { json: true }, (err, res, body) => {\n          if (err) { return console.log(err); }\n          var eod=body.data;\n           var newList = watchlists.map((element, index) =>{\n            element.eodClose= eod[index].close;\n          })\n          // this.setState({stocks:newList});\n          console.log(newList)\n          \n          \n         \n          \n        })\n\n      }\n//     getButton(){\n//         return(\n// <button className=\"k-button k-grid-remove-command\"onClick={(e) =>this.remove(e)}>Remove </button>\n//         )\n//     }\n    // remove(e,stocks){\n    //     console.log(stocks);\n    // }\n    componentWillMount(){\n        \n        // this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n        \n        this.getEodData(this.state.stocks);\n        \n    }\n    // componentWillUnmount(){\n        \n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n            \n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.stocks !== this.props.stocks) {\n    //       console.log('stocks state has changed.')\n    //     //   this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n    //         this.setState({stocks:this.props.stocks});\n    //     }\n    //   }\n    // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n    saveNewStockTrade= (event) => {\n        \n        let result = JSON.parse(event.data)\n        console.log(result)\n        let user_watchlist = this.state.stocks\n        console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n        if(result.type===\"trade\"){\n            user_watchlist.forEach(symbol => {\n                var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n                if(tradePrice.length !==0){\n                    symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n                    console.log(\"Found Updated price for \",symbol.Symbol)\n                    // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n                }\n            })\n            \n        }\n        this.setState({stocks:user_watchlist});\n    }\n     \n    // componentDidMount(){\n       \n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n            \n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    \n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    \n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n        \n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n    //         </div></>\n        \n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    \n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n                \n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n        \n\n    // }\n   \n    removeStock(htmlEvent,stock){\n        //unsubsribe from listening to thsi stock\n       console.log(\"Unsubscribing from: \",stock.Symbol)\n        // this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n        //first stop the htmlEvents default status\n        htmlEvent.preventDefault();\n        var user={\n            email:this.props.email,\n            stock_symbol: stock.Symbol,\n    \n        } \n        console.log(user)\n        var url = '/api/removeUserStock';\n        const req = new Request(url,{\n            method:\"POST\",\n            headers:{\"Content-Type\":\"application/json\"},\n            body:JSON.stringify(user),\n        });\n        fetch(req)\n        .then((res)=>{\n            console.log(res)\n            if(res.status===500){\n            res.json()\n            .then((json)=>{\n                const {message,stackTrace}=json;\n              })\n              .catch((error)=>{\n                return Promise.reject(error);\n              });\n            }\n            else{\n                \n              return res.json();\n            }\n          })\n          .then((result)=> {\n              \n              console.log(\"1st remove stock rerender\");\n              this.setState({remove_status:result},()=>this.removeHelper())});\n    \n    }\n    \n    removeHelper(){\n        console.log(\"p/179\",this.state.remove_status);\n        //removed but still showing on watch list\n        if(this.state.remove_status.response===\"Stock not on watch list\"){\n            alert(\"Stock Queued For Deletion, Please Login In Again\");\n        }\n        //stock has been removed from watchlist\n        else if(this.state.remove_status.Response===\"Sucessfully removed stock\"){\n            console.log(\"2nd remove stock rerender\");\n            this.setState({stockHasBeenRemoved:true});\n           \n        }\n    }\n    // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n           \n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n        \n    // }\n    \n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n        \n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n        \n        \n        \n    // }\n    \n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n        \n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n           \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n                \n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n            \n    //     }\n    \n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n        \n        \n    // }\n    // handleChange(event) {\n         \n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n\n    renderStockChart(event){\n      console.log(event.dataItem.Symbol)\n      this.setState({chartStock:event.dataItem.Symbol})\n    }\n    render(){\n      console.log(this.state.stokcs);\n    \n        // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n        // // console.log(\"In render: \", this.state.dropdownDisplay);\n        // if (this.state == null){\n        //     this.props.history.push(\"/error\");\n        //     }\n        \n        \n        // var Message = \"Your WatchList\";\n        // if(this.state.stocks===\"No stocks added\"){\n        //     Message =\"Empty Watchlist\"; \n        // }\n        // var MessageArrowDir;\n        // if(this.state.dropdownOpen){\n        //   MessageArrowDir = \"\\u25BC\";\n        // }\n    \n        // else{\n        //   MessageArrowDir = \"\\u25B2\";\n        // }\n        \n        // var dropdownDisplay =\n        //     <> <div className = \"dropDiv\">\n        //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n        //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n        //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n        //     </div></>\n        // var dropdown;\n        // if(this.state.stocks!==\"No stocks added\"){\n    \n        // dropdown = \n    \n        // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n        //     {dropdownDisplay}\n    \n        //     <DropdownMenu className = \"DDM\">\n        //       <div className = \"ArtistsDisplayWrapper\">\n        //         {this.state.stocks.map((stocks,index) =>\n                \n        //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n        //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n        //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n        //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n        //     </div>\n        //         )}\n        //       </div>\n        //     </DropdownMenu>\n        // </Dropdown>\n        // }\n        // else{\n        //     dropdown = dropdownDisplay;\n    \n           \n      \n        // }\n       \n        // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n        \n        // this.props.history.push(\"/error\",this.state)\n        // onClick={this.props.onClick}\n        var useData;\n\n        if(this.props.stocks !==\"No stocks added\")useData=this.props.stocks\n        else{\n          useData=[{\n            Symbol:\"Add stocks\",\n            currenPrice:\"Add stocks\"\n          },]\n        }\n        console.log(this.state.eodData)\n        return (\n          \n          \n          <Tooltip openDelay={100} position=\"right\" >\n            <Grid\n            data={useData}\n            // style={{ height: 700 }}\n            onRowClick= {this.renderStockChart}\n            title=\"WatchList\"\n             >\n               \n            \n  \n    <GridColumn title=\"Name\" field=\"name\" />\n    <GridColumn title=\"Symbol\" field=\"Symbol\"style={{ width: 100 }} locked={false} width={100} />\n    <GridColumn title=\"Current Price\" field=\"currentPrice\" />\n    <GridColumn title=\"Last Close\" field=\"currentPrice\" />\n    \n    {/* <GridColumn title=\"View Chart\" id=\"Symbol\" cell={tooltiprender} width=\"200px\" /> */}\n    \n    <GridColumn title=\"Change\" field=\"day_change\" />\n    <GridColumn title=\"% Change\" field=\"change_pct\" />\n    \n    \n    <GridColumn title=\"View Options\" id=\"Symbol\" cell={this.CommandCell} width=\"200px\" />\n    <GridColumn title=\"Tracker\" id=\"Symbol\" cell={this.CommandCell} width=\"200px\" />\n    <GridColumn title=\"Remove From WatchList\" id=\"Symbol\" cell={this.CommandCell} width=\"200px\" />\n\n    \n\n          </Grid>\n          </Tooltip>\n         \n          \n          );\n        }\n})\n"]},"metadata":{},"sourceType":"module"}