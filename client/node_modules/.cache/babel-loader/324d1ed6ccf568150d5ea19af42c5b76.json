{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require = require(\"../helpers/strings\"),\n    stripAndCollapseASCIIWhitespace = _require.stripAndCollapseASCIIWhitespace;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/namespaces\"),\n    HTML_NS = _require3.HTML_NS,\n    SVG_NS = _require3.SVG_NS;\n\nvar _require4 = require(\"../helpers/traversal\"),\n    closest = _require4.closest;\n\nvar _require5 = require(\"../helpers/form-controls\"),\n    formOwner = _require5.formOwner;\n\nvar HTMLOptionElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLOptionElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLOptionElementImpl);\n\n  function HTMLOptionElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLOptionElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData); // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n\n    _this._selectedness = false;\n    _this._dirtyness = false;\n    return _this;\n  }\n\n  _createClass(HTMLOptionElementImpl, [{\n    key: \"_removeOtherSelectedness\",\n    value: function _removeOtherSelectedness() {\n      // Remove the selectedness flag from all other options in this select\n      var select = this._selectNode;\n\n      if (select && !select.hasAttributeNS(null, \"multiple\")) {\n        var _iterator = _createForOfIteratorHelper(select.options),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var option = _step.value;\n\n            if (option !== this) {\n              option._selectedness = false;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"_askForAReset\",\n    value: function _askForAReset() {\n      var select = this._selectNode;\n\n      if (select) {\n        select._askedForAReset();\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      if (!this._dirtyness && name === \"selected\") {\n        this._selectedness = this.hasAttributeNS(null, \"selected\");\n\n        if (this._selectedness) {\n          this._removeOtherSelectedness();\n        }\n\n        this._askForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLOptionElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n    }\n  }, {\n    key: \"_selectNode\",\n    get: function get() {\n      var select = domSymbolTree.parent(this);\n\n      if (!select) {\n        return null;\n      }\n\n      if (select.nodeName.toUpperCase() !== \"SELECT\") {\n        select = domSymbolTree.parent(select);\n\n        if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n          return null;\n        }\n      }\n\n      return select;\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return formOwner(this);\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return stripAndCollapseASCIIWhitespace(childTextContentExcludingDescendantsOfScript(this));\n    },\n    set: function set(value) {\n      this.textContent = value;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n\n  }, {\n    key: \"_getValue\",\n    value: function _getValue() {\n      if (this.hasAttributeNS(null, \"value\")) {\n        return this.getAttributeNS(null, \"value\");\n      }\n\n      return this.text;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._getValue();\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"value\", value);\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      var select = closest(this, \"select\");\n\n      if (select === null) {\n        return 0;\n      }\n\n      return select.options.indexOf(this);\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selectedness;\n    },\n    set: function set(s) {\n      this._dirtyness = true;\n      this._selectedness = Boolean(s);\n\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n\n      this._askForAReset();\n\n      this._modified();\n    }\n  }, {\n    key: \"label\",\n    get: function get() {\n      if (this.hasAttributeNS(null, \"label\")) {\n        return this.getAttributeNS(null, \"label\");\n      }\n\n      return this.text;\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"label\", value);\n    }\n  }]);\n\n  return HTMLOptionElementImpl;\n}(HTMLElementImpl);\n\nfunction childTextContentExcludingDescendantsOfScript(root) {\n  var text = \"\";\n\n  var _iterator2 = _createForOfIteratorHelper(domSymbolTree.childrenIterator(root)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var child = _step2.value;\n\n      if (child._localName === \"script\" && (child._namespaceURI === HTML_NS || child._namespaceURI === SVG_NS)) {\n        continue;\n      }\n\n      if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n        text += child.nodeValue;\n      } else {\n        text += childTextContentExcludingDescendantsOfScript(child);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return text;\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement-impl.js"],"names":["HTMLElementImpl","require","implementation","NODE_TYPE","stripAndCollapseASCIIWhitespace","domSymbolTree","HTML_NS","SVG_NS","closest","formOwner","HTMLOptionElementImpl","globalObject","args","privateData","_selectedness","_dirtyness","select","_selectNode","hasAttributeNS","options","option","_askedForAReset","name","value","oldValue","_removeOtherSelectedness","_askForAReset","parent","nodeName","toUpperCase","childTextContentExcludingDescendantsOfScript","textContent","getAttributeNS","text","_getValue","setAttributeNS","indexOf","s","Boolean","_modified","root","childrenIterator","child","_localName","_namespaceURI","nodeType","TEXT_NODE","CDATA_SECTION_NODE","nodeValue","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst { stripAndCollapseASCIIWhitespace } = require(\"../helpers/strings\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { HTML_NS, SVG_NS } = require(\"../helpers/namespaces\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { formOwner } = require(\"../helpers/form-controls\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttributeNS(null, \"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttributeNS(null, \"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified(name, value, oldValue);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get text() {\n    return stripAndCollapseASCIIWhitespace(childTextContentExcludingDescendantsOfScript(this));\n  }\n  set text(value) {\n    this.textContent = value;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n  _getValue() {\n    if (this.hasAttributeNS(null, \"value\")) {\n      return this.getAttributeNS(null, \"value\");\n    }\n\n    return this.text;\n  }\n\n  get value() {\n    return this._getValue();\n  }\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n    this._modified();\n  }\n\n  get label() {\n    if (this.hasAttributeNS(null, \"label\")) {\n      return this.getAttributeNS(null, \"label\");\n    }\n\n    return this.text;\n  }\n  set label(value) {\n    this.setAttributeNS(null, \"label\", value);\n  }\n}\n\nfunction childTextContentExcludingDescendantsOfScript(root) {\n  let text = \"\";\n  for (const child of domSymbolTree.childrenIterator(root)) {\n    if (child._localName === \"script\" && (child._namespaceURI === HTML_NS || child._namespaceURI === SVG_NS)) {\n      continue;\n    }\n\n    if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n      text += child.nodeValue;\n    } else {\n      text += childTextContentExcludingDescendantsOfScript(child);\n    }\n  }\n  return text;\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}