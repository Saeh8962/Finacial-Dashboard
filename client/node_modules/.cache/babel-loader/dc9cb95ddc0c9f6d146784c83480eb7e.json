{"ast":null,"code":"\"use strict\"; // An iterable WeakSet implementation inspired by the iterable WeakMap example code in the WeakRefs specification:\n// https://github.com/tc39/proposal-weakrefs#iterable-weakmaps\n\nvar _regeneratorRuntime = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function IterableWeakSet() {\n    _classCallCheck(this, IterableWeakSet);\n\n    this._refSet = new Set();\n    this._refMap = new WeakMap();\n    this._finalizationRegistry = new FinalizationRegistry(function (_ref) {\n      var ref = _ref.ref,\n          set = _ref.set;\n      return set.delete(ref);\n    });\n  }\n\n  _createClass(IterableWeakSet, [{\n    key: \"add\",\n    value: function add(value) {\n      if (!this._refMap.has(value)) {\n        var ref = new WeakRef(value);\n\n        this._refMap.set(value, ref);\n\n        this._refSet.add(ref);\n\n        this._finalizationRegistry.register(value, {\n          ref: ref,\n          set: this._refSet\n        }, ref);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      var ref = this._refMap.get(value);\n\n      if (!ref) {\n        return false;\n      }\n\n      this._refMap.delete(value);\n\n      this._refSet.delete(ref);\n\n      this._finalizationRegistry.unregister(ref);\n\n      return true;\n    }\n  }, {\n    key: \"has\",\n    value: function has(value) {\n      return this._refMap.has(value);\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator, _step, ref, value;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(this._refSet);\n              _context.prev = 1;\n\n              _iterator.s();\n\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 12;\n                break;\n              }\n\n              ref = _step.value;\n              value = ref.deref();\n\n              if (!(value === undefined)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"continue\", 10);\n\n            case 8:\n              _context.next = 10;\n              return value;\n\n            case 10:\n              _context.next = 3;\n              break;\n\n            case 12:\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator.e(_context.t0);\n\n            case 17:\n              _context.prev = 17;\n\n              _iterator.f();\n\n              return _context.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 14, 17, 20]]);\n    })\n  }]);\n\n  return IterableWeakSet;\n}();","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/jsdom/lib/jsdom/living/helpers/iterable-weak-set.js"],"names":["module","exports","_refSet","Set","_refMap","WeakMap","_finalizationRegistry","FinalizationRegistry","ref","set","delete","value","has","WeakRef","add","register","get","unregister","Symbol","iterator","deref","undefined"],"mappings":"AAAA,a,CAEA;AACA;;;;;;;;;;AACAA,MAAM,CAACC,OAAP;AACE,6BAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,SAAKC,OAAL,GAAe,IAAIC,OAAJ,EAAf;AACA,SAAKC,qBAAL,GAA6B,IAAIC,oBAAJ,CAAyB;AAAA,UAAGC,GAAH,QAAGA,GAAH;AAAA,UAAQC,GAAR,QAAQA,GAAR;AAAA,aAAkBA,GAAG,CAACC,MAAJ,CAAWF,GAAX,CAAlB;AAAA,KAAzB,CAA7B;AACD;;AALH;AAAA;AAAA,WAOE,aAAIG,KAAJ,EAAW;AACT,UAAI,CAAC,KAAKP,OAAL,CAAaQ,GAAb,CAAiBD,KAAjB,CAAL,EAA8B;AAC5B,YAAMH,GAAG,GAAG,IAAIK,OAAJ,CAAYF,KAAZ,CAAZ;;AACA,aAAKP,OAAL,CAAaK,GAAb,CAAiBE,KAAjB,EAAwBH,GAAxB;;AACA,aAAKN,OAAL,CAAaY,GAAb,CAAiBN,GAAjB;;AACA,aAAKF,qBAAL,CAA2BS,QAA3B,CAAoCJ,KAApC,EAA2C;AAAEH,UAAAA,GAAG,EAAHA,GAAF;AAAOC,UAAAA,GAAG,EAAE,KAAKP;AAAjB,SAA3C,EAAuEM,GAAvE;AACD;;AAED,aAAO,IAAP;AACD;AAhBH;AAAA;AAAA,WAkBE,iBAAOG,KAAP,EAAc;AACZ,UAAMH,GAAG,GAAG,KAAKJ,OAAL,CAAaY,GAAb,CAAiBL,KAAjB,CAAZ;;AACA,UAAI,CAACH,GAAL,EAAU;AACR,eAAO,KAAP;AACD;;AAED,WAAKJ,OAAL,CAAaM,MAAb,CAAoBC,KAApB;;AACA,WAAKT,OAAL,CAAaQ,MAAb,CAAoBF,GAApB;;AACA,WAAKF,qBAAL,CAA2BW,UAA3B,CAAsCT,GAAtC;;AACA,aAAO,IAAP;AACD;AA5BH;AAAA;AAAA,WA8BE,aAAIG,KAAJ,EAAW;AACT,aAAO,KAAKP,OAAL,CAAaQ,GAAb,CAAiBD,KAAjB,CAAP;AACD;AAhCH;AAAA,SAkCKO,MAAM,CAACC,QAlCZ;AAAA,iDAkCE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qDACoB,KAAKjB,OADzB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACaM,cAAAA,GADb;AAEUG,cAAAA,KAFV,GAEkBH,GAAG,CAACY,KAAJ,EAFlB;;AAAA,oBAGQT,KAAK,KAAKU,SAHlB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAMI,qBAAMV,KAAN;;AANJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlCF;AAAA;;AAAA;AAAA","sourcesContent":["\"use strict\";\n\n// An iterable WeakSet implementation inspired by the iterable WeakMap example code in the WeakRefs specification:\n// https://github.com/tc39/proposal-weakrefs#iterable-weakmaps\nmodule.exports = class IterableWeakSet {\n  constructor() {\n    this._refSet = new Set();\n    this._refMap = new WeakMap();\n    this._finalizationRegistry = new FinalizationRegistry(({ ref, set }) => set.delete(ref));\n  }\n\n  add(value) {\n    if (!this._refMap.has(value)) {\n      const ref = new WeakRef(value);\n      this._refMap.set(value, ref);\n      this._refSet.add(ref);\n      this._finalizationRegistry.register(value, { ref, set: this._refSet }, ref);\n    }\n\n    return this;\n  }\n\n  delete(value) {\n    const ref = this._refMap.get(value);\n    if (!ref) {\n      return false;\n    }\n\n    this._refMap.delete(value);\n    this._refSet.delete(ref);\n    this._finalizationRegistry.unregister(ref);\n    return true;\n  }\n\n  has(value) {\n    return this._refMap.has(value);\n  }\n\n  * [Symbol.iterator]() {\n    for (const ref of this._refSet) {\n      const value = ref.deref();\n      if (value === undefined) {\n        continue;\n      }\n      yield value;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}