{"ast":null,"code":"import _toConsumableArray from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/samehrlich/Desktop/final-app/client/src/panels/PerformancePanel.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Chart, ChartSeries, ChartSeriesItem, ChartCategoryAxis, ChartCategoryAxisItem, ChartValueAxisItem, ChartValueAxis, ChartTitle, ChartTooltip, ChartSeriesItemTooltip } from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { getHistory } from \"../services/dataService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar url = \"http://api.marketstack.com/v1/eod?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=AAP&date_from=2020-07-10&date_to=2021-07-02&limit=500\";\n\nvar request = require('request');\n\nvar categories = ['Jan`21', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul']; //const categories=['Jun','Jul','Aug','Sept','Oct','Nov','Dec','Jan`21','Feb','Mar','Apr','May','Jun','Jul']\n\nvar history_date = new Date();\n\nfunction clean_data(data) {\n  var Ndata = Object.entries(data[\"Time Series (Daily)\"]);\n  var Dates = Object.keys(Ndata).map(function (key) {\n    return key;\n  }); // console.log(Dates,Ndata);\n\n  return Ndata;\n}\n\nfunction convertHistoryDate(date) {\n  var value = date;\n  var newDates = {\n    date: value.slice(0, 10),\n    month: value.slice(5, 7),\n    day: value.slice(8, 10),\n    year: value.slice(0, 4)\n  };\n  var result = newDates.year + newDates.month + newDates.day;\n  return result;\n} // const defaultTooltipRender = ({ data }) => (`Default Content ${data}`);\n// const nestedTooltipRender = ({ data }) => (\n// <span>\n//   <p>Series 1 value: {data}</p>\n//   <p>Series 1 value: {data}</p>\n// </span>\n// );\n\n\nfunction getHistoryData(symbol, from, to, callback) {\n  var url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=\" + symbol + \"&compact=full&apikey=2TXPYH4TGZ32RG8D\"; // request.get({\n  //     url: url,\n  //     json: true,\n  //     headers: {'User-Agent': 'request'}\n  //   }, (err:any, res:any, data:any) => {\n  //     if (err) {\n  //       console.log('Error:', err);\n  //     } else if (res.statusCode !== 200) {\n  //       console.log('Status:', res.statusCode);\n  //     } else {\n  //       // data is successfully parsed as a JSON object:\n  //       callback(data);\n  //     }\n  // });\n  // var fullUrl= \"http://api.marketstack.com/v1/eod?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=\"+symbol+\"&date_from=\"+from+\"&date_to=\"+to+\"&limit=500\";\n\n  request(url, {\n    json: true\n  }, function (err, res, body) {\n    if (err) {\n      return console.log(err);\n    }\n\n    return getHistory(clean_data(body)).then(function (results) {\n      console.log(results);\n      callback(results);\n    });\n  });\n} // function getDate(){\n//   var dateOBJ =\n//   var currentDate;\n//   var test =  new Date().toISOString().split('T')[0];\n//   if(month<10){\n//     var Newmonth = \"0\"+month\n//     console.log(Newmonth)\n//     month = parseInt(Newmonth)\n//     if(day <10){\n//       var NewDay = \"0\"+day\n//       day = parseInt(NewDay)\n//       currentDate ={\n//         curMonth:month,\n//         curDay:day,\n//         curYear:year\n//       }\n//       return currentDate\n//     }\n//   }\n//   else if(day <10){\n//     var NewDay = \"0\"+day\n//     day = parseInt(NewDay)\n//     currentDate ={\n//       curMonth:month.toString,\n//       curDay:day.toString,\n//       curYear:year.toString\n//     }\n//     return currentDate\n//   }\n//   currentDate ={\n//     curMonth:month,\n//     curDay:day,\n//     curYear:year\n//   }\n//   return currentDate;\n// }\n// getMinMax(data){ \n//   console.log()\n// }\n\n\nexport default function PerformancePanel(props) {\n  _s();\n\n  var DateOBJ = new Date();\n  var year = DateOBJ.getUTCFullYear();\n  var currentDate = DateOBJ.toISOString().split('T')[0];\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      history = _React$useState2[0],\n      setHistory = _React$useState2[1];\n\n  if (props.symbol === \"\" || props.symbol === undefined) {\n    props = {\n      symbol: \"TSLA\",\n      to: currentDate,\n      from: year + \"-01-01\"\n    };\n  } else {\n    console.log(\"chart property \", props);\n    props = {\n      symbol: props.symbol,\n      to: currentDate,\n      from: year + \"-01-01\"\n    };\n  }\n\n  React.useEffect(function () {\n    console.log(\"in useEffect \", props);\n    getHistoryData(props.symbol, props.from, props.to, setHistory);\n  }, [props.symbol]);\n\n  if (history) {\n    console.log(history);\n    var history_OpenData = history.map(function (data) {\n      return {\n        data: data.open,\n        date: convertHistoryDate(data.date)\n      };\n    });\n    var data = history_OpenData.map(function (data) {\n      return data.data;\n    });\n    var dates = history_OpenData.map(function (value) {\n      var newDate = value.date.slice(0, 4) + \"-\" + value.date.slice(4, 6) + \"-\" + value.date.slice(6, 8);\n      return new Date(newDate);\n    });\n    var title = \"YTD \" + props.symbol + \" Stock Price\"; // var min,max= getMinMax(history_OpenData);\n    // console.log(history_OpenData);\n\n    return /*#__PURE__*/_jsxDEV(Chart, {\n      children: [/*#__PURE__*/_jsxDEV(ChartTooltip, {\n        shared: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChartTitle, {\n        text: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChartValueAxis, {\n        children: /*#__PURE__*/_jsxDEV(ChartValueAxisItem, {\n          title: {\n            text: \"Stock Price\"\n          },\n          min: Math.floor(Math.min.apply(Math, _toConsumableArray(data))),\n          max: Math.ceil(Math.max.apply(Math, _toConsumableArray(data))) + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChartCategoryAxis, {\n        children: /*#__PURE__*/_jsxDEV(ChartCategoryAxisItem, {\n          title: {\n            text: \"Day/Month\"\n          },\n          maxDivisions: 14,\n          categories: dates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChartSeries, {\n        children: /*#__PURE__*/_jsxDEV(ChartSeriesItem, {\n          type: \"line\",\n          data: data,\n          markers: {\n            visible: false\n          },\n          style: 'normal',\n          children: /*#__PURE__*/_jsxDEV(ChartSeriesItemTooltip, {\n            background: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }, this);\n  } else {\n    console.log(history);\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Performance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(PerformancePanel, \"m2zlKD6z2d5JHwcHk/9BlD37tsE=\");\n\n_c = PerformancePanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"PerformancePanel\");","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/src/panels/PerformancePanel.tsx"],"names":["React","Chart","ChartSeries","ChartSeriesItem","ChartCategoryAxis","ChartCategoryAxisItem","ChartValueAxisItem","ChartValueAxis","ChartTitle","ChartTooltip","ChartSeriesItemTooltip","getHistory","url","request","require","categories","history_date","Date","clean_data","data","Ndata","Object","entries","Dates","keys","map","key","convertHistoryDate","date","value","newDates","slice","month","day","year","result","getHistoryData","symbol","from","to","callback","json","err","res","body","console","log","then","results","PerformancePanel","props","DateOBJ","getUTCFullYear","currentDate","toISOString","split","useState","history","setHistory","undefined","useEffect","history_OpenData","open","dates","newDate","title","text","Math","floor","min","ceil","max","visible"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Chart,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartCategoryAxis,\n  ChartCategoryAxisItem,\n  ChartValueAxisItem,\n  ChartValueAxis,\n  ChartTitle,\n  ChartSeriesLabels,\n  ChartTooltip,\n  ChartLegend,\n  ChartSeriesItemTooltip,\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { getHistory } from \"../services/dataService\";\nimport { History } from \"../data/models\";\nconst url =\"http://api.marketstack.com/v1/eod?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=AAP&date_from=2020-07-10&date_to=2021-07-02&limit=500\";\nconst request = require('request');\nconst categories=['Jan`21','Feb','Mar','Apr','May','Jun','Jul']\n//const categories=['Jun','Jul','Aug','Sept','Oct','Nov','Dec','Jan`21','Feb','Mar','Apr','May','Jun','Jul']\n\nconst history_date = new Date();\nfunction clean_data(data:any):History[]{\n  var Ndata = Object.entries(data[\"Time Series (Daily)\"]);\n  var Dates = Object.keys(Ndata).map(key =>key);\n  // console.log(Dates,Ndata);\n  return Ndata;\n}\nfunction convertHistoryDate(date:string):string{\n  var value = date \n    var newDates ={\n      date:value.slice(0,10),\n      month: value.slice(5,7),\n      day: value.slice(8,10),\n      year: value.slice(0,4)\n    }\n    var result= newDates.year+newDates.month+newDates.day;\n    return result \n   \n  \n}\n// const defaultTooltipRender = ({ data }) => (`Default Content ${data}`);\n// const nestedTooltipRender = ({ data }) => (\n// <span>\n//   <p>Series 1 value: {data}</p>\n  \n//   <p>Series 1 value: {data}</p>\n// </span>\n// );\nfunction getHistoryData(symbol:string,from:string,to:string,callback: (arg0: History[]) => void){\n  var url =\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=\"+symbol+\"&compact=full&apikey=2TXPYH4TGZ32RG8D\";\n    \n\n    // request.get({\n    //     url: url,\n    //     json: true,\n    //     headers: {'User-Agent': 'request'}\n    //   }, (err:any, res:any, data:any) => {\n    //     if (err) {\n    //       console.log('Error:', err);\n    //     } else if (res.statusCode !== 200) {\n    //       console.log('Status:', res.statusCode);\n    //     } else {\n    //       // data is successfully parsed as a JSON object:\n    //       callback(data);\n    //     }\n    // });\n  // var fullUrl= \"http://api.marketstack.com/v1/eod?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=\"+symbol+\"&date_from=\"+from+\"&date_to=\"+to+\"&limit=500\";\n\n  request(url, { json: true }, (err: any, res: any, body: any) => {\n    if (err) { return console.log(err); }\n\n    return getHistory(clean_data(body)).then((results: History[]) => {\n      \n      console.log(results)\n      callback(results);\n    });\n    \n  })\n}\n// function getDate(){\n//   var dateOBJ =\n \n//   var currentDate;\n//   var test =  new Date().toISOString().split('T')[0];\n  \n//   if(month<10){\n    \n//     var Newmonth = \"0\"+month\n//     console.log(Newmonth)\n//     month = parseInt(Newmonth)\n//     if(day <10){\n//       var NewDay = \"0\"+day\n//       day = parseInt(NewDay)\n//       currentDate ={\n//         curMonth:month,\n//         curDay:day,\n//         curYear:year\n//       }\n//       return currentDate\n//     }\n    \n//   }\n//   else if(day <10){\n//     var NewDay = \"0\"+day\n//     day = parseInt(NewDay)\n//     currentDate ={\n//       curMonth:month.toString,\n//       curDay:day.toString,\n//       curYear:year.toString\n//     }\n//     return currentDate\n//   }\n  \n//   currentDate ={\n//     curMonth:month,\n//     curDay:day,\n//     curYear:year\n//   }\n  \n//   return currentDate;\n// }\n// getMinMax(data){ \n//   console.log()\n// }\nexport default function PerformancePanel(props:any) {\n  \n  var DateOBJ= new Date();\n  var year = DateOBJ.getUTCFullYear()\n  var currentDate = DateOBJ.toISOString().split('T')[0]\n  const [history, setHistory] = React.useState<History[]>();\n  \n  if(props.symbol===\"\"||props.symbol===undefined) {\n    \n    props = {\n      symbol:\"TSLA\",\n      to: currentDate,\n      from: year+\"-01-01\",\n    }\n    \n  }\n  \n  else{ \n    console.log(\"chart property \", props)\n    props = {\n      symbol:props.symbol,\n      to:currentDate,\n      from:year+\"-01-01\",\n    }\n  }\n  \n  \n  React.useEffect(() => {\n    console.log(\"in useEffect \", props)\n    getHistoryData(props.symbol,props.from,props.to,setHistory);\n  }, [props.symbol]);\n \nif(history){\n  console.log(history)\n  var history_OpenData = history.map(data=>({data:data.open,date:convertHistoryDate(data.date)}))\n  var data = history_OpenData.map(data => data.data);\n  var dates = history_OpenData.map(value =>{\n    var newDate = value.date.slice(0,4)+\"-\"+value.date.slice(4,6)+\"-\"+value.date.slice(6,8)\n    return new Date(newDate);\n  })\n  var title= \"YTD \"+props.symbol+\" Stock Price\";\n  // var min,max= getMinMax(history_OpenData);\n// console.log(history_OpenData);\n\n\n  return (\n    \n          <Chart>\n            <ChartTooltip shared={true}/>\n            <ChartTitle text={title} />\n            {/* <ChartTitle text=\"Line Chart\" /> */}\n            {/* <ChartLegend position=\"top\" orientation=\"horizontal\" display=\"false\" /> */}\n            <ChartValueAxis>\n              <ChartValueAxisItem\n                title={{\n                  text: \"Stock Price\",\n                }}\n                min={Math.floor(Math.min(...data))}\n                max={Math.ceil(Math.max(...data))+1}\n              />\n            </ChartValueAxis>\n            <ChartCategoryAxis>\n              <ChartCategoryAxisItem \n                title={{\n                  text: \"Day/Month\",\n                }}\n                maxDivisions={14}\n                categories={dates}/>\n            </ChartCategoryAxis>\n            <ChartSeries>\n              <ChartSeriesItem type=\"line\" data={data} markers={{ visible: false }} style={'normal'}>\n              <ChartSeriesItemTooltip background=\"blue\"/>\n              </ChartSeriesItem>\n              {/* <ChartSeriesLabels content={'june'} /> */}\n            </ChartSeries>\n          </Chart>\n        \n  );\n  }\n  else{ \n    console.log(history);\n    return <h2>Performance</h2>\n  }\n}"]},"metadata":{},"sourceType":"module"}