{"ast":null,"code":"import _slicedToArray from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/samehrlich/Desktop/final-app/client/src/panels/PerformancePanel.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Chart, ChartSeries, ChartSeriesItem, ChartCategoryAxis, ChartCategoryAxisItem, ChartValueAxisItem, ChartValueAxis, ChartTitle, ChartSeriesLabels } from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { getHistory } from \"../services/dataService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar url = \"http://api.marketstack.com/v1/eod?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=AAP&date_from=2020-07-10&date_to=2021-07-02&limit=500\";\n\nvar request = require('request');\n\nvar categories = ['Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec', 'Jan`21', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'];\nvar history_date = new Date();\n\nfunction convertHistoryDate(date) {\n  var newDates = {\n    month: date.slice(5, 7),\n    day: date.slice(8, 10),\n    year: date.slice(0, 4)\n  };\n  return newDates;\n}\n\nexport default function PerformancePanel() {\n  _s();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      history = _React$useState2[0],\n      setHistory = _React$useState2[1];\n\n  React.useEffect(function () {\n    request(url, {\n      json: true\n    }, function (err, res, body) {\n      if (err) {\n        return console.log(err);\n      }\n\n      return getHistory(body.data).then(function (results) {\n        setHistory(results);\n      });\n    });\n  }, []);\n\n  if (history) {\n    var dates = history.map(function (data) {\n      return data.date.slice(0, 10);\n    });\n    var history_data = history.map(function (data) {\n      return {\n        data: data.open,\n        date: convertHistoryDate(data.date)\n      };\n    });\n    console.log(history_date.getMonth(history_data[100].date));\n    return /*#__PURE__*/_jsxDEV(Chart, {\n      children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n        text: \"Stock Price 1 Year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChartTitle, {\n        text: \"Line Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChartValueAxis, {\n        children: /*#__PURE__*/_jsxDEV(ChartValueAxisItem, {\n          title: {\n            text: \"Stock Price\"\n          },\n          min: 100,\n          max: 250\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChartCategoryAxis, {\n        children: /*#__PURE__*/_jsxDEV(ChartCategoryAxisItem, {\n          title: {\n            text: \"Month\"\n          },\n          maxDivisions: 12,\n          categories: categories\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChartSeries, {\n        children: [/*#__PURE__*/_jsxDEV(ChartSeriesItem, {\n          type: \"line\",\n          data: history_data,\n          markers: {\n            visible: false\n          },\n          style: 'normal'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ChartSeriesLabels, {\n          content: 'june'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Performance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(PerformancePanel, \"m2zlKD6z2d5JHwcHk/9BlD37tsE=\");\n\n_c = PerformancePanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"PerformancePanel\");","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/src/panels/PerformancePanel.tsx"],"names":["React","Chart","ChartSeries","ChartSeriesItem","ChartCategoryAxis","ChartCategoryAxisItem","ChartValueAxisItem","ChartValueAxis","ChartTitle","ChartSeriesLabels","getHistory","url","request","require","categories","history_date","Date","convertHistoryDate","date","newDates","month","slice","day","year","PerformancePanel","useState","history","setHistory","useEffect","json","err","res","body","console","log","data","then","results","dates","map","history_data","open","getMonth","text","visible"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Chart,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartCategoryAxis,\n  ChartCategoryAxisItem,\n  ChartValueAxisItem,\n  ChartValueAxis,\n  ChartTitle,\n  ChartSeriesLabels,\n  ChartTooltip,\n  ChartLegend,\n} from \"@progress/kendo-react-charts\";\nimport \"hammerjs\";\nimport { getHistory } from \"../services/dataService\";\nimport { History } from \"../data/models\";\nconst url =\"http://api.marketstack.com/v1/eod?access_key=5dd6fd84e5ba4e974843da4e6e23db23&symbols=AAP&date_from=2020-07-10&date_to=2021-07-02&limit=500\";\nconst request = require('request');\nconst categories=['Jun','Jul','Aug','Sept','Oct','Nov','Dec','Jan`21','Feb','Mar','Apr','May','Jun','Jul']\nconst history_date = new Date();\n   \nfunction convertHistoryDate(date:string){\n  \n    var newDates ={\n      month: date.slice(5,7),\n      day: date.slice(8,10),\n      year: date.slice(0,4)\n    }\n   \n  return newDates;\n}\nexport default function PerformancePanel() {\n  const [history, setHistory] = React.useState<History[]>();\n  React.useEffect(() => {\n    request(url, { json: true }, (err: any, res: any, body: any) => {\n      if (err) { return console.log(err); }\n      return getHistory(body.data).then((results: History[]) => {\n        setHistory(results);\n      });\n      \n    })\n        \n    \n  }, []);\nif(history){\n  var dates = history.map(data => data.date.slice(0,10));\n  var history_data = history.map(data=>({data:data.open,date:convertHistoryDate(data.date)}))\n  \n  console.log(history_date.getMonth(history_data[100].date) )\n\n\n\n  return (\n    \n          <Chart>\n            <ChartTitle text=\"Stock Price 1 Year\" />\n            <ChartTitle text=\"Line Chart\" />\n            {/* <ChartLegend position=\"top\" orientation=\"horizontal\" display=\"false\" /> */}\n            <ChartValueAxis>\n              <ChartValueAxisItem\n                title={{\n                  text: \"Stock Price\",\n                }}\n                min={100}\n                max={250}\n              />\n            </ChartValueAxis>\n            <ChartCategoryAxis>\n              <ChartCategoryAxisItem \n                title={{\n                  text: \"Month\",\n                }}\n                maxDivisions={12}\n                categories={categories}/>\n            </ChartCategoryAxis>\n            <ChartSeries>\n              <ChartSeriesItem type=\"line\" data={history_data} markers={{ visible: false }} style={'normal'}/>\n              <ChartSeriesLabels content={'june'} />\n            </ChartSeries>\n          </Chart>\n        \n  );\n  }\n  else{ \n    return <h2>Performance</h2>\n  }\n}"]},"metadata":{},"sourceType":"module"}