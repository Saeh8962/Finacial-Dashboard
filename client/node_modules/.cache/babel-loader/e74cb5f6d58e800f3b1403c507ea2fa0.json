{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"./\"),\n    DataStream = _require.DataStream;\n/**\n * Simple scramjet stream that by default contains numbers or other containing with `valueOf` method. The streams\n * provides simple methods like `sum`, `average`. It derives from DataStream so it's still fully supporting all `map`,\n * `reduce` etc.\n *\n * @memberof module:scramjet.\n * @extends DataStream\n */\n\n\nvar NumberStream = /*#__PURE__*/function (_DataStream) {\n  \"use strict\";\n\n  _inherits(NumberStream, _DataStream);\n\n  var _super = _createSuper(NumberStream);\n\n  /**\n   * @callback ValueOfCallback\n   * @memberof module:scramjet~\n   * @param {*} chunk stream object\n   * @returns {Promise<number>|number} value of the object\n   */\n\n  /**\n   * NumberStream options\n   *\n   * @typedef {object} NumberStreamOptions\n   * @memberof module:scramjet~\n   * @prop {ValueOfCallback} [valueOf=x => +x] value of the data item function.\n   * @extends DataStreamOptions\n   */\n\n  /**\n   * Creates an instance of NumberStream.\n   * @param {NumberStreamOptions} options\n   * @memberof module:scramjet\n   */\n  function NumberStream(options) {\n    _classCallCheck(this, NumberStream);\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return _super.call.apply(_super, [this, options].concat(args));\n  }\n\n  _createClass(NumberStream, [{\n    key: \"_valueOf\",\n    get: function get() {\n      return this._options.valueOf || function (x) {\n        return +x;\n      };\n    }\n    /**\n     * Calculates the sum of all items in the stream.\n     *\n     * @return {Promise<number>|any}\n     */\n\n  }, {\n    key: \"sum\",\n    value: function () {\n      var _sum = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _valueOf;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _valueOf = this._valueOf;\n                return _context2.abrupt(\"return\", this.reduce( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(a, x) {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.t0 = a;\n                            _context.next = 3;\n                            return _valueOf(x);\n\n                          case 3:\n                            _context.t1 = _context.sent;\n                            return _context.abrupt(\"return\", _context.t0 + _context.t1);\n\n                          case 5:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x, _x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }(), 0));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sum() {\n        return _sum.apply(this, arguments);\n      }\n\n      return sum;\n    }()\n    /**\n     * Calculates the sum of all items in the stream.\n     *\n     * @return {Promise<number>|any}\n     */\n\n  }, {\n    key: \"avg\",\n    value: function () {\n      var _avg = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var cnt, _valueOf;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                cnt = 0;\n                _valueOf = this._valueOf;\n                return _context4.abrupt(\"return\", this.reduce( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(a, x) {\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.t0 = cnt * a;\n                            _context3.next = 3;\n                            return _valueOf(x);\n\n                          case 3:\n                            _context3.t1 = _context3.sent;\n                            _context3.t2 = _context3.t0 + _context3.t1;\n                            _context3.t3 = ++cnt;\n                            return _context3.abrupt(\"return\", _context3.t2 / _context3.t3);\n\n                          case 7:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x3, _x4) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }(), 0));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function avg() {\n        return _avg.apply(this, arguments);\n      }\n\n      return avg;\n    }()\n  }]);\n\n  return NumberStream;\n}(DataStream);\n\nmodule.exports = NumberStream;","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/node_modules/scramjet/lib/number-stream.js"],"names":["require","DataStream","NumberStream","options","args","_options","valueOf","x","_valueOf","reduce","a","cnt","module","exports"],"mappings":";;;;;;;;;;;;AAAA,eAAqBA,OAAO,CAAC,IAAD,CAA5B;AAAA,IAAOC,UAAP,YAAOA,UAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMC,Y;;;;;;;AAEF;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACI,wBAAYC,OAAZ,EAA8B;AAAA;;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAAA,4CACpBD,OADoB,SACRC,IADQ;AAE7B;;;;SAED,eAAe;AACX,aAAO,KAAKC,QAAL,CAAcC,OAAd,IAA0B,UAACC,CAAD;AAAA,eAAO,CAACA,CAAR;AAAA,OAAjC;AACH;AAED;AACJ;AACA;AACA;AACA;;;;;0EACI;AAAA;;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,QADV,GACqB,KAAKA,QAD1B;AAAA,kDAEW,KAAKC,MAAL;AAAA,sFAAY,iBAAOC,CAAP,EAAUH,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAgBG,CAAhB;AAAA;AAAA,mCAA0BF,QAAQ,CAACD,CAAD,CAAlC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAZ;;AAAA;AAAA;AAAA;AAAA,qBAAmD,CAAnD,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAKA;AACJ;AACA;AACA;AACA;;;;;0EACI;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQI,gBAAAA,GADR,GACc,CADd;AAEUH,gBAAAA,QAFV,GAEqB,KAAKA,QAF1B;AAAA,kDAGW,KAAKC,MAAL;AAAA,uFAAY,kBAAOC,CAAP,EAAUH,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAiBI,GAAG,GAAGD,CAAvB;AAAA;AAAA,mCAAiCF,QAAQ,CAACD,CAAD,CAAzC;;AAAA;AAAA;AAAA;AAAA,2CAAgD,EAAEI,GAAlD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAZ;;AAAA;AAAA;AAAA;AAAA,qBAAmE,CAAnE,CAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EA9CuBV,U;;AAsD3BW,MAAM,CAACC,OAAP,GAAiBX,YAAjB","sourcesContent":["const {DataStream} = require(\"./\");\n\n/**\n * Simple scramjet stream that by default contains numbers or other containing with `valueOf` method. The streams\n * provides simple methods like `sum`, `average`. It derives from DataStream so it's still fully supporting all `map`,\n * `reduce` etc.\n *\n * @memberof module:scramjet.\n * @extends DataStream\n */\nclass NumberStream extends DataStream {\n\n    /**\n     * @callback ValueOfCallback\n     * @memberof module:scramjet~\n     * @param {*} chunk stream object\n     * @returns {Promise<number>|number} value of the object\n     */\n\n    /**\n     * NumberStream options\n     *\n     * @typedef {object} NumberStreamOptions\n     * @memberof module:scramjet~\n     * @prop {ValueOfCallback} [valueOf=x => +x] value of the data item function.\n     * @extends DataStreamOptions\n     */\n\n    /**\n     * Creates an instance of NumberStream.\n     * @param {NumberStreamOptions} options\n     * @memberof module:scramjet\n     */\n    constructor(options, ...args) {\n        super(options, ...args);\n    }\n\n    get _valueOf() {\n        return this._options.valueOf || ((x) => +x);\n    }\n\n    /**\n     * Calculates the sum of all items in the stream.\n     *\n     * @return {Promise<number>|any}\n     */\n    async sum() {\n        const _valueOf = this._valueOf;\n        return this.reduce(async (a, x) => a + await _valueOf(x), 0);\n    }\n\n    /**\n     * Calculates the sum of all items in the stream.\n     *\n     * @return {Promise<number>|any}\n     */\n    async avg() {\n        let cnt = 0;\n        const _valueOf = this._valueOf;\n        return this.reduce(async (a, x) => (cnt * a + await _valueOf(x)) / ++cnt, 0);\n    }\n\n}\n\nmodule.exports = NumberStream;\n"]},"metadata":{},"sourceType":"script"}