{"ast":null,"code":"import _slicedToArray from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/samehrlich/Desktop/final-app/client/src/panels/UserAlert.tsx\",\n    _s = $RefreshSig$();\n\nimport { PanelBarItem } from \"@progress/kendo-react-layout\";\nimport React from \"react\";\nimport { MultiColumnComboBox } from \"@progress/kendo-react-dropdowns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar columns = [{\n  field: \"Identifier\",\n  header: \"ID\",\n  width: \"100px\"\n}, {\n  field: \"movement\",\n  header: \"Tracking\",\n  width: \"300px\"\n}, {\n  field: \"valuechange\",\n  header: \"Change\",\n  width: \"300px\"\n}];\n\nfunction getAlertData(email, callback) {\n  var user = {\n    email: email,\n    request: \"getData\"\n  };\n  var url = \"/api/UserAlerts\";\n  var req = new Request(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  });\n  fetch(req).then(function (res) {\n    //Catch server error\n    //no error\n    return res.json();\n  }).catch(function (error) {\n    console.log(error);\n    return Promise.reject(error);\n  }).then(function (query_result) {\n    console.log(query_result);\n    callback(query_result);\n  });\n}\n\nexport default function Useralerts(props) {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      AlertData = _React$useState2[0],\n      setAlertData = _React$useState2[1];\n\n  React.useEffect(function () {\n    getAlertData(props.email, setAlertData);\n  }, []);\n\n  if (AlertData) {\n    //get the unique symbols, then get Alert type\n    var Stock_Alerts = AlertData.uniqueSymbols.map(function (symbol) {\n      console.log(symbol); //alert data for the unique stock\n\n      var uniqueAlertData = {\n        Symbol: symbol,\n        alerts: AlertData.alerts.filter(function (i, n) {\n          return i.symbol === JSON.parse(symbol).symbol;\n        })\n      };\n      return uniqueAlertData;\n    });\n    var rendItem = Stock_Alerts.map(function (Alert) {\n      return /*#__PURE__*/_jsxDEV(PanelBarItem, {\n        expanded: false,\n        title: Alert.Symbol,\n        children: /*#__PURE__*/_jsxDEV(MultiColumnComboBox, {\n          data: Alert.alerts,\n          columns: columns,\n          textField: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 18\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 20\n      }, _this);\n    }); // Object.values(Stock_Alerts).map((element: any) =>{\n    //     console.log(element);\n    // })\n    //************Too DOO handle the uniqueAlertData to display it has a panel with the stock symbol and then a bulti combo box as the drop down  */\n  }\n\n  return (// <panelBar>\n    // </panelBar>\n    {\n      rendItem: rendItem\n    }\n  );\n}\n\n_s(Useralerts, \"8D2xwMyr/wlq2ciF5g7u4Bme1y8=\");\n\n_c = Useralerts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Useralerts\");","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/src/panels/UserAlert.tsx"],"names":["PanelBarItem","React","MultiColumnComboBox","columns","field","header","width","getAlertData","email","callback","user","request","url","req","Request","method","headers","body","JSON","stringify","fetch","then","res","json","catch","error","console","log","Promise","reject","query_result","Useralerts","props","useState","AlertData","setAlertData","useEffect","Stock_Alerts","uniqueSymbols","map","symbol","uniqueAlertData","Symbol","alerts","filter","i","n","parse","rendItem","Alert"],"mappings":"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","sourcesContent":["\nimport { PanelBarItem } from \"@progress/kendo-react-layout\";\nimport React from \"react\";\nimport { MultiColumnComboBox } from \"@progress/kendo-react-dropdowns\";\nimport { Alerts } from \"../data/models\";\nconst columns = [\n    {\n      field: \"Identifier\",\n      header: \"ID\",\n      width: \"100px\",\n    },\n    {\n      field: \"movement\",\n      header: \"Tracking\",\n      width: \"300px\",\n    },\n    {\n      field: \"valuechange\",\n      header: \"Change\",\n      width: \"300px\",\n    },\n  ];\nfunction getAlertData(email:string,callback:(arg0: Alerts) => void){\n    var user = {\n        email:email,\n        request:\"getData\"\n    }\n    var url=\"/api/UserAlerts\";\n            const req = new Request(url,{\n                method:\"POST\",\n                headers:{\"Content-Type\":\"application/json\"},\n                body:JSON.stringify(user),\n            });\n            \n            fetch(req)\n            .then((res)=>{\n                //Catch server error\n                    //no error\n                    \n                return res.json();\n            }).catch((error)=>{\n                console.log(error);\n                return Promise.reject(error);\n            })\n            .then(query_result=>{\n                console.log(query_result);\n                callback(query_result)\n            }) \n    \n}\nexport default function Useralerts(props:any) {\n\n    const [AlertData, setAlertData] = React.useState<(Alerts)>();\n    React.useEffect(() => {\n      getAlertData(props.email,setAlertData)\n    }, []);\n    if(AlertData){ \n        //get the unique symbols, then get Alert type\n       \n        var Stock_Alerts = AlertData.uniqueSymbols.map(symbol => {\n            console.log(symbol)\n            //alert data for the unique stock\n            var uniqueAlertData={Symbol:symbol,alerts:AlertData.alerts.filter((i,n)=>i.symbol===(JSON.parse(symbol).symbol))};\n            \n            return uniqueAlertData;\n        })\n        \n        var rendItem = Stock_Alerts.map(Alert=>{\n            return(<PanelBarItem expanded={false} title={Alert.Symbol} >\n                 <MultiColumnComboBox\n                    data={Alert.alerts}\n                    columns={columns}\n                    textField={\"name\"}\n                    />   \n            </PanelBarItem>)\n        })\n        // Object.values(Stock_Alerts).map((element: any) =>{\n        //     console.log(element);\n        // })\n        \n        //************Too DOO handle the uniqueAlertData to display it has a panel with the stock symbol and then a bulti combo box as the drop down  */\n    }\n    \n    return (\n        // <panelBar>\n            \n        // </panelBar>\n    {rendItem}\n    )\n}"]},"metadata":{},"sourceType":"module"}