{"ast":null,"code":"import _objectSpread from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx\";\nimport React, { Component, ChildComponent } from \"react\";\nimport { ListGroup } from \"react-bootstrap/esm\";\nimport { Button, DropdownMenu, Dropdown } from \"reactstrap/es\"; // import {Tooltip,OverlayTrigger} from \"react-bootstrap\"\n\nimport { withRouter } from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\nimport * as ReactDOM from \"react-dom\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { MyCommandCell } from \"./mycommand.jsx\";\nimport \"hammerjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default withRouter( /*#__PURE__*/function (_React$Component) {\n  _inherits(WatchList, _React$Component);\n\n  var _super = _createSuper(WatchList);\n\n  function WatchList(_props) {\n    var _this;\n\n    _classCallCheck(this, WatchList);\n\n    _this = _super.call(this, _props);\n\n    _this.CommandCell = function (props) {\n      return /*#__PURE__*/_jsxDEV(MyCommandCell, _objectSpread(_objectSpread({}, props), {}, {\n        remove: _this.removeStock\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, _assertThisInitialized(_this));\n    };\n\n    _this.removeStock = _this.removeStock.bind(_assertThisInitialized(_this)); // this.getButton=this.getButton.bind(this);\n\n    _this.state = {\n      email: _this.props.email,\n      stocks: _this.props.stocks,\n      connectionError: false,\n      dropdownOpen: false,\n      value: \"Your Watchlist\",\n      stockHasBeenRemoved: false\n    };\n    return _this;\n  }\n\n  _createClass(WatchList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (prevState.stockHasBeenRemoved !== this.state.stockHasBeenRemoved) {\n        console.log('User has removed a stock.');\n\n        if (this.props.history.push !== undefined) {\n          this.setState({\n            stockHasBeenRemoved: false\n          }, function () {\n            return _this2.props.history.push(\"/profile\", [[{\n              email: _this2.state.email,\n              removeStocks: true\n            }, _this2.state.stocks]]);\n          });\n        } else {\n          this.setState({\n            stocks: this.state.stocks\n          });\n        }\n      }\n\n      if (this.props.stocks.length != prevProps.stocks.length) {\n        console.log('Update stocks');\n        this.setState({\n          stocks: this.props.stocks\n        });\n      }\n    } //     getButton(){\n    //         return(\n    // <button className=\"k-button k-grid-remove-command\"onClick={(e) =>this.remove(e)}>Remove </button>\n    //         )\n    //     }\n    // remove(e,stocks){\n    //     console.log(stocks);\n    // }\n    // componentWillMount(){\n    //     this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n    //     this.getUserStocks();\n    // }\n    // componentWillUnmount(){\n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.stocks !== this.props.stocks) {\n    //       console.log('stocks state has changed.')\n    //     //   this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n    //         this.setState({stocks:this.props.stocks});\n    //     }\n    //   }\n    // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n    // saveNewStockTrade= (event) => {\n    //     let result = JSON.parse(event.data)\n    //     console.log(result)\n    //     let user_watchlist = this.state.stocks\n    //     console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n    //     if(result.type===\"trade\"){\n    //         user_watchlist.forEach(symbol => {\n    //             var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n    //             if(tradePrice.length !==0){\n    //                 symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n    //                 console.log(\"Found Updated price for \",symbol.Symbol)\n    //                 // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n    //             }\n    //         })\n    //     }\n    //     this.setState({stocks:user_watchlist});\n    // }\n    // componentDidMount(){\n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    //         </div></>\n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n    // }\n\n  }, {\n    key: \"removeStock\",\n    value: function removeStock(htmlEvent, stock) {\n      var _this3 = this;\n\n      //unsubsribe from listening to thsi stock\n      console.log(\"Unsubscribing from: \", stock.Symbol); // this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n      //first stop the htmlEvents default status\n\n      htmlEvent.preventDefault();\n      var user = {\n        email: this.props.email,\n        stock_symbol: stock.Symbol\n      };\n      console.log(user);\n      var url = '/api/removeUserStock';\n      var req = new Request(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(user)\n      });\n      fetch(req).then(function (res) {\n        console.log(res);\n\n        if (res.status === 500) {\n          res.json().then(function (json) {\n            var message = json.message,\n                stackTrace = json.stackTrace;\n          }).catch(function (error) {\n            return Promise.reject(error);\n          });\n        } else {\n          return res.json();\n        }\n      }).then(function (result) {\n        console.log(\"1st remove stock rerender\");\n\n        _this3.setState({\n          remove_status: result\n        }, function () {\n          return _this3.removeHelper();\n        });\n      });\n    }\n  }, {\n    key: \"removeHelper\",\n    value: function removeHelper() {\n      console.log(\"p/179\", this.state.remove_status); //removed but still showing on watch list\n\n      if (this.state.remove_status.response === \"Stock not on watch list\") {\n        alert(\"Stock Queued For Deletion, Please Login In Again\");\n      } //stock has been removed from watchlist\n      else if (this.state.remove_status.Response === \"Sucessfully removed stock\") {\n          console.log(\"2nd remove stock rerender\");\n          this.setState({\n            stockHasBeenRemoved: true\n          });\n        }\n    } // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n    // }\n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n    // }\n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n    //     }\n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n    // }\n    // handleChange(event) {\n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.stocks, this.state.stocks); // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n      // // console.log(\"In render: \", this.state.dropdownDisplay);\n      // if (this.state == null){\n      //     this.props.history.push(\"/error\");\n      //     }\n      // var Message = \"Your WatchList\";\n      // if(this.state.stocks===\"No stocks added\"){\n      //     Message =\"Empty Watchlist\"; \n      // }\n      // var MessageArrowDir;\n      // if(this.state.dropdownOpen){\n      //   MessageArrowDir = \"\\u25BC\";\n      // }\n      // else{\n      //   MessageArrowDir = \"\\u25B2\";\n      // }\n      // var dropdownDisplay =\n      //     <> <div className = \"dropDiv\">\n      //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n      //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n      //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n      //     </div></>\n      // var dropdown;\n      // if(this.state.stocks!==\"No stocks added\"){\n      // dropdown = \n      // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n      //     {dropdownDisplay}\n      //     <DropdownMenu className = \"DDM\">\n      //       <div className = \"ArtistsDisplayWrapper\">\n      //         {this.state.stocks.map((stocks,index) =>\n      //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n      //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n      //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n      //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n      //     </div>\n      //         )}\n      //       </div>\n      //     </DropdownMenu>\n      // </Dropdown>\n      // }\n      // else{\n      //     dropdown = dropdownDisplay;\n      // }\n      // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n      // this.props.history.push(\"/error\",this.state)\n\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        data: this.props.stocks,\n        style: {\n          height: 700\n        },\n        children: [/*#__PURE__*/_jsxDEV(GridColumn, {\n          title: \"Symbol\",\n          field: \"Symbol\",\n          style: {\n            width: 100\n          },\n          locked: true,\n          width: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n          title: \"Current Price\",\n          field: \"currentPrice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n          title: \"View Chart\",\n          id: \"Symbol\",\n          cell: \"hi\",\n          width: \"200px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n          title: \"Remove From WatchList\",\n          id: \"Symbol\",\n          cell: this.CommandCell,\n          width: \"200px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return WatchList;\n}(React.Component));","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx"],"names":["React","Component","ChildComponent","ListGroup","Button","DropdownMenu","Dropdown","withRouter","Grid","GridCellProps","GridColumn","ReactDOM","Tooltip","OverlayTrigger","MyCommandCell","props","CommandCell","removeStock","bind","state","email","stocks","connectionError","dropdownOpen","value","stockHasBeenRemoved","prevProps","prevState","console","log","history","push","undefined","setState","removeStocks","length","htmlEvent","stock","Symbol","preventDefault","user","stock_symbol","url","req","Request","method","headers","body","JSON","stringify","fetch","then","res","status","json","message","stackTrace","catch","error","Promise","reject","result","remove_status","removeHelper","response","alert","Response","height","width"],"mappings":"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","sourcesContent":["import React,{Component,ChildComponent} from \"react\";\nimport {ListGroup} from \"react-bootstrap/esm\";\nimport {Button,DropdownMenu,Dropdown,} from \"reactstrap/es\";\n// import {Tooltip,OverlayTrigger} from \"react-bootstrap\"\nimport {withRouter} from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\nimport * as ReactDOM from \"react-dom\";\nimport { Tooltip } from \"@progress/kendo-react-tooltip\";\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { MyCommandCell } from \"./mycommand.jsx\";\nimport \"hammerjs\";\nexport default withRouter( class WatchList extends React.Component {\n \n    constructor(props) {\n        super(props)\n        \n            this.removeStock=this.removeStock.bind(this);\n            // this.getButton=this.getButton.bind(this);\n            this.state={\n                email : this.props.email,\n                stocks:this.props.stocks,\n                connectionError: false,\n                dropdownOpen: false,\n                value:\"Your Watchlist\",\n                stockHasBeenRemoved:false\n                \n            }\n            \n        \n        \n    }\n    CommandCell = (props) => (\n        <MyCommandCell\n          {...props}\n          \n          remove={this.removeStock}\n          \n        />\n      );\n      componentDidUpdate(prevProps, prevState) {\n        if (prevState.stockHasBeenRemoved !== this.state.stockHasBeenRemoved) {\n          console.log('User has removed a stock.')\n          if(this.props.history.push!== undefined) {\n            this.setState({stockHasBeenRemoved:false},()=>this.props.history.push(\"/profile\",[[{email:this.state.email,removeStocks:true},this.state.stocks]]));\n          }\n          else{\n              this.setState({stocks:this.state.stocks})\n          }\n        }\n          if (this.props.stocks.length != prevProps.stocks.length) {\n            console.log('Update stocks')\n            this.setState({stocks:this.props.stocks})\n         \n        }\n      }\n//     getButton(){\n//         return(\n// <button className=\"k-button k-grid-remove-command\"onClick={(e) =>this.remove(e)}>Remove </button>\n//         )\n//     }\n    // remove(e,stocks){\n    //     console.log(stocks);\n    // }\n    // componentWillMount(){\n    //     this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n    //     this.getUserStocks();\n        \n    // }\n    // componentWillUnmount(){\n        \n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n            \n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevProps.stocks !== this.props.stocks) {\n    //       console.log('stocks state has changed.')\n    //     //   this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n    //         this.setState({stocks:this.props.stocks});\n    //     }\n    //   }\n    // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n    // saveNewStockTrade= (event) => {\n        \n    //     let result = JSON.parse(event.data)\n    //     console.log(result)\n    //     let user_watchlist = this.state.stocks\n    //     console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n    //     if(result.type===\"trade\"){\n    //         user_watchlist.forEach(symbol => {\n    //             var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n    //             if(tradePrice.length !==0){\n    //                 symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n    //                 console.log(\"Found Updated price for \",symbol.Symbol)\n    //                 // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n    //             }\n    //         })\n            \n    //     }\n    //     this.setState({stocks:user_watchlist});\n    // }\n     \n    // componentDidMount(){\n       \n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n            \n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    \n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    \n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n        \n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n    //         </div></>\n        \n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    \n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n                \n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n        \n\n    // }\n   \n    removeStock(htmlEvent,stock){\n        //unsubsribe from listening to thsi stock\n       console.log(\"Unsubscribing from: \",stock.Symbol)\n        // this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n        //first stop the htmlEvents default status\n        htmlEvent.preventDefault();\n        var user={\n            email:this.props.email,\n            stock_symbol: stock.Symbol,\n    \n        } \n        console.log(user)\n        var url = '/api/removeUserStock';\n        const req = new Request(url,{\n            method:\"POST\",\n            headers:{\"Content-Type\":\"application/json\"},\n            body:JSON.stringify(user),\n        });\n        fetch(req)\n        .then((res)=>{\n            console.log(res)\n            if(res.status===500){\n            res.json()\n            .then((json)=>{\n                const {message,stackTrace}=json;\n              })\n              .catch((error)=>{\n                return Promise.reject(error);\n              });\n            }\n            else{\n                \n              return res.json();\n            }\n          })\n          .then((result)=> {\n              \n              console.log(\"1st remove stock rerender\");\n              this.setState({remove_status:result},()=>this.removeHelper())});\n    \n    }\n    \n    removeHelper(){\n        console.log(\"p/179\",this.state.remove_status);\n        //removed but still showing on watch list\n        if(this.state.remove_status.response===\"Stock not on watch list\"){\n            alert(\"Stock Queued For Deletion, Please Login In Again\");\n        }\n        //stock has been removed from watchlist\n        else if(this.state.remove_status.Response===\"Sucessfully removed stock\"){\n            console.log(\"2nd remove stock rerender\");\n            this.setState({stockHasBeenRemoved:true});\n           \n        }\n    }\n    // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n           \n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n        \n    // }\n    \n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n        \n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n        \n        \n        \n    // }\n    \n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n        \n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n           \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n                \n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n            \n    //     }\n    \n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n        \n        \n    // }\n    // handleChange(event) {\n         \n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n    \n    render(){\n        console.log(this.props.stocks,this.state.stocks)\n        // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n        // // console.log(\"In render: \", this.state.dropdownDisplay);\n        // if (this.state == null){\n        //     this.props.history.push(\"/error\");\n        //     }\n        \n        \n        // var Message = \"Your WatchList\";\n        // if(this.state.stocks===\"No stocks added\"){\n        //     Message =\"Empty Watchlist\"; \n        // }\n        // var MessageArrowDir;\n        // if(this.state.dropdownOpen){\n        //   MessageArrowDir = \"\\u25BC\";\n        // }\n    \n        // else{\n        //   MessageArrowDir = \"\\u25B2\";\n        // }\n        \n        // var dropdownDisplay =\n        //     <> <div className = \"dropDiv\">\n        //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n        //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n        //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n        //     </div></>\n        // var dropdown;\n        // if(this.state.stocks!==\"No stocks added\"){\n    \n        // dropdown = \n    \n        // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n        //     {dropdownDisplay}\n    \n        //     <DropdownMenu className = \"DDM\">\n        //       <div className = \"ArtistsDisplayWrapper\">\n        //         {this.state.stocks.map((stocks,index) =>\n                \n        //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n        //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n        //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n        //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n        //     </div>\n        //         )}\n        //       </div>\n        //     </DropdownMenu>\n        // </Dropdown>\n        // }\n        // else{\n        //     dropdown = dropdownDisplay;\n    \n           \n      \n        // }\n       \n        // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n        \n        // this.props.history.push(\"/error\",this.state)\n        return (\n           \n            <Grid\n            data={this.props.stocks}\n            style={{ height: 700 }}\n             >\n            \n  \n   \n    <GridColumn title=\"Symbol\" field=\"Symbol\"style={{ width: 100 }} locked={true} width={100} />\n    <GridColumn title=\"Current Price\" field=\"currentPrice\" />\n    {/* cell={this.CommandCell} */}\n    <GridColumn title=\"View Chart\" id=\"Symbol\" cell={\"hi\"} width=\"200px\" />\n    <GridColumn title=\"Remove From WatchList\" id=\"Symbol\" cell={this.CommandCell} width=\"200px\" />\n            {/* <GridColumn title=\"Name\" field=\"name\" />\n            <GridColumn title=\"Change\" field=\"day_change\" />\n            <GridColumn title=\"% Change\" field=\"change_pct\" />\n            <GridColumn title=\"Volume\" field=\"volume\" />\n            <GridColumn title=\"Market Cap\" field=\"market_cap\" /> */}\n          \n          </Grid>\n         \n          \n          );\n        }\n})\n"]},"metadata":{},"sourceType":"module"}