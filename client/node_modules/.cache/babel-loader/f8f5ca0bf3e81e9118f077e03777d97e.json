{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createClass = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _objectSpread = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar path = require(\"path\");\n\nvar fs = require(\"fs\").promises;\n\nvar vm = require(\"vm\");\n\nvar toughCookie = require(\"tough-cookie\");\n\nvar sniffHTMLEncoding = require(\"html-encoding-sniffer\");\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar _require = require(\"whatwg-url\"),\n    URL = _require.URL;\n\nvar MIMEType = require(\"whatwg-mimetype\");\n\nvar idlUtils = require(\"./jsdom/living/generated/utils.js\");\n\nvar VirtualConsole = require(\"./jsdom/virtual-console.js\");\n\nvar _require2 = require(\"./jsdom/browser/Window.js\"),\n    createWindow = _require2.createWindow;\n\nvar _require3 = require(\"./jsdom/browser/parser\"),\n    parseIntoDocument = _require3.parseIntoDocument;\n\nvar _require4 = require(\"./jsdom/living/domparsing/serialization.js\"),\n    fragmentSerialization = _require4.fragmentSerialization;\n\nvar ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\n\nvar NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\");\n\nvar CookieJar = /*#__PURE__*/function (_toughCookie$CookieJa) {\n  _inherits(CookieJar, _toughCookie$CookieJa);\n\n  var _super = _createSuper(CookieJar);\n\n  function CookieJar(store, options) {\n    _classCallCheck(this, CookieJar);\n\n    // jsdom cookie jars must be loose by default\n    return _super.call(this, store, _objectSpread({\n      looseMode: true\n    }, options));\n  }\n\n  return CookieJar;\n}(toughCookie.CookieJar);\n\nvar window = Symbol(\"window\");\nvar sharedFragmentDocument = null;\n\nvar JSDOM = /*#__PURE__*/function () {\n  function JSDOM() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, JSDOM);\n\n    var mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n\n    var _normalizeHTML = normalizeHTML(input, mimeType),\n        html = _normalizeHTML.html,\n        encoding = _normalizeHTML.encoding;\n\n    options = transformOptions(options, encoding, mimeType);\n    this[window] = createWindow(options.windowOptions);\n    var documentImpl = idlUtils.implForWrapper(this[window]._document);\n    options.beforeParse(this[window]._globalProxy);\n    parseIntoDocument(html, documentImpl);\n    documentImpl.close();\n  }\n\n  _createClass(JSDOM, [{\n    key: \"window\",\n    get: function get() {\n      // It's important to grab the global proxy, instead of just the result of `createWindow(...)`, since otherwise\n      // things like `window.eval` don't exist.\n      return this[window]._globalProxy;\n    }\n  }, {\n    key: \"virtualConsole\",\n    get: function get() {\n      return this[window]._virtualConsole;\n    }\n  }, {\n    key: \"cookieJar\",\n    get: function get() {\n      // TODO NEWAPI move _cookieJar to window probably\n      return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), {\n        requireWellFormed: false\n      });\n    }\n  }, {\n    key: \"nodeLocation\",\n    value: function nodeLocation(node) {\n      if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n        throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n      }\n\n      return idlUtils.implForWrapper(node).sourceCodeLocation;\n    }\n  }, {\n    key: \"getInternalVMContext\",\n    value: function getInternalVMContext() {\n      if (!vm.isContext(this[window])) {\n        throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n      }\n\n      return this[window];\n    }\n  }, {\n    key: \"reconfigure\",\n    value: function reconfigure(settings) {\n      if (\"windowTop\" in settings) {\n        this[window]._top = settings.windowTop;\n      }\n\n      if (\"url\" in settings) {\n        var document = idlUtils.implForWrapper(this[window]._document);\n        var url = whatwgURL.parseURL(settings.url);\n\n        if (url === null) {\n          throw new TypeError(\"Could not parse \\\"\".concat(settings.url, \"\\\" as a URL\"));\n        }\n\n        document._URL = url;\n        document._origin = whatwgURL.serializeURLOrigin(document._URL);\n      }\n    }\n  }], [{\n    key: \"fragment\",\n    value: function fragment() {\n      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n      if (!sharedFragmentDocument) {\n        sharedFragmentDocument = new JSDOM().window.document;\n      }\n\n      var template = sharedFragmentDocument.createElement(\"template\");\n      template.innerHTML = string;\n      return template.content;\n    }\n  }, {\n    key: \"fromURL\",\n    value: function fromURL(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Promise.resolve().then(function () {\n        // Remove the hash while sending this through the research loader fetch().\n        // It gets added back a few lines down when constructing the JSDOM object.\n        var parsedURL = new URL(url);\n        var originalHash = parsedURL.hash;\n        parsedURL.hash = \"\";\n        url = parsedURL.href;\n        options = normalizeFromURLOptions(options);\n        var resourceLoader = resourcesToResourceLoader(options.resources);\n        var resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ? new ResourceLoader() : resourceLoader;\n        var req = resourceLoaderForInitialRequest.fetch(url, {\n          accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          cookieJar: options.cookieJar,\n          referrer: options.referrer\n        });\n        return req.then(function (body) {\n          var res = req.response;\n          options = Object.assign(options, {\n            url: req.href + originalHash,\n            contentType: res.headers[\"content-type\"],\n            referrer: req.getHeader(\"referer\")\n          });\n          return new JSDOM(body, options);\n        });\n      });\n    }\n  }, {\n    key: \"fromFile\",\n    value: function () {\n      var _fromFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filename) {\n        var options,\n            buffer,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                options = normalizeFromFileOptions(filename, options);\n                _context.next = 4;\n                return fs.readFile(filename);\n\n              case 4:\n                buffer = _context.sent;\n                return _context.abrupt(\"return\", new JSDOM(buffer, options));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function fromFile(_x) {\n        return _fromFile.apply(this, arguments);\n      }\n\n      return fromFile;\n    }()\n  }]);\n\n  return JSDOM;\n}();\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  } // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n\n\n  var normalized = _objectSpread({}, options);\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized; // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  var normalized = _objectSpread({}, options);\n\n  if (normalized.contentType === undefined) {\n    var extname = path.extname(filename);\n\n    if (extname === \".xhtml\" || extname === \".xht\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding, mimeType) {\n  var transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: {\n        sourceCodeLocationInfo: false,\n        scriptingEnabled: false\n      },\n      runScripts: undefined,\n      encoding: encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n    // Defaults\n    beforeParse: function beforeParse() {}\n  }; // options.contentType was parsed into mimeType by the caller.\n\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(\"The given content type of \\\"\".concat(options.contentType, \"\\\" was not a HTML or XML content type\"));\n  }\n\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = {\n      sourceCodeLocationInfo: true\n    };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n\n    if (transformed.windowOptions.runScripts === \"dangerously\") {\n      transformed.windowOptions.parseOptions.scriptingEnabled = true;\n    } else if (transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(\"runScripts must be undefined, \\\"dangerously\\\", or \\\"outside-only\\\"\");\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  return transformed;\n}\n\nfunction normalizeHTML(html, mimeType) {\n  var encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel: mimeType.parameters.get(\"charset\")\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return {\n    html: html,\n    encoding: encoding\n  };\n}\n\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined:\n      {\n        return new NoOpResourceLoader();\n      }\n\n    case \"usable\":\n      {\n        return new ResourceLoader();\n      }\n\n    default:\n      {\n        if (!(resources instanceof ResourceLoader)) {\n          throw new TypeError(\"resources must be an instance of ResourceLoader\");\n        }\n\n        return resources;\n      }\n  }\n}\n\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\nexports.toughCookie = toughCookie;","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/jsdom/lib/api.js"],"names":["path","require","fs","promises","vm","toughCookie","sniffHTMLEncoding","whatwgURL","whatwgEncoding","URL","MIMEType","idlUtils","VirtualConsole","createWindow","parseIntoDocument","fragmentSerialization","ResourceLoader","NoOpResourceLoader","CookieJar","store","options","looseMode","window","Symbol","sharedFragmentDocument","JSDOM","input","mimeType","contentType","undefined","normalizeHTML","html","encoding","transformOptions","windowOptions","documentImpl","implForWrapper","_document","beforeParse","_globalProxy","close","_virtualConsole","_cookieJar","requireWellFormed","node","_parseOptions","sourceCodeLocationInfo","Error","sourceCodeLocation","isContext","TypeError","settings","_top","windowTop","document","url","parseURL","_URL","_origin","serializeURLOrigin","string","template","createElement","innerHTML","content","Promise","resolve","then","parsedURL","originalHash","hash","href","normalizeFromURLOptions","resourceLoader","resourcesToResourceLoader","resources","resourceLoaderForInitialRequest","constructor","req","fetch","accept","cookieJar","referrer","body","res","response","Object","assign","headers","getHeader","filename","normalizeFromFileOptions","readFile","buffer","normalized","extname","transformed","parsingMode","parseOptions","scriptingEnabled","runScripts","pretendToBeVisual","storageQuota","virtualConsole","isHTML","isXML","RangeError","essence","includeNodeLocations","sendTo","console","String","Boolean","Number","ArrayBuffer","isView","Buffer","from","byteOffset","byteLength","isBuffer","defaultEncoding","transportLayerEncodingLabel","parameters","get","decode","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst { URL } = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst { createWindow } = require(\"./jsdom/browser/Window.js\");\nconst { parseIntoDocument } = require(\"./jsdom/browser/parser\");\nconst { fragmentSerialization } = require(\"./jsdom/living/domparsing/serialization.js\");\nconst ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\nconst NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, { looseMode: true, ...options });\n  }\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input = \"\", options = {}) {\n    const mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n    const { html, encoding } = normalizeHTML(input, mimeType);\n\n    options = transformOptions(options, encoding, mimeType);\n\n    this[window] = createWindow(options.windowOptions);\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n\n    options.beforeParse(this[window]._globalProxy);\n\n    parseIntoDocument(html, documentImpl);\n\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `createWindow(...)`, since otherwise\n    // things like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), { requireWellFormed: false });\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).sourceCodeLocation;\n  }\n\n  getInternalVMContext() {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" +\n        \"Use the runScripts option during creation.\");\n    }\n\n    return this[window];\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document._origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string = \"\") {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = (new JSDOM()).window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      // Remove the hash while sending this through the research loader fetch().\n      // It gets added back a few lines down when constructing the JSDOM object.\n      const parsedURL = new URL(url);\n      const originalHash = parsedURL.hash;\n      parsedURL.hash = \"\";\n      url = parsedURL.href;\n\n      options = normalizeFromURLOptions(options);\n\n      const resourceLoader = resourcesToResourceLoader(options.resources);\n      const resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ?\n        new ResourceLoader() :\n        resourceLoader;\n\n      const req = resourceLoaderForInitialRequest.fetch(url, {\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        cookieJar: options.cookieJar,\n        referrer: options.referrer\n      });\n\n      return req.then(body => {\n        const res = req.response;\n\n        options = Object.assign(options, {\n          url: req.href + originalHash,\n          contentType: res.headers[\"content-type\"],\n          referrer: req.getHeader(\"referer\")\n        });\n\n        return new JSDOM(body, options);\n      });\n    });\n  }\n\n  static async fromFile(filename, options = {}) {\n    options = normalizeFromFileOptions(filename, options);\n    const buffer = await fs.readFile(filename);\n\n    return new JSDOM(buffer, options);\n  }\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = { ...options };\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = { ...options };\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xht\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding, mimeType) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: {\n        sourceCodeLocationInfo: false,\n        scriptingEnabled: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    beforeParse() { }\n  };\n\n  // options.contentType was parsed into mimeType by the caller.\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n  }\n\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = (new URL(options.url)).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = { sourceCodeLocationInfo: true };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ?\n                                       new CookieJar() :\n                                       options.cookieJar;\n\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ?\n                                            (new VirtualConsole()).sendTo(console) :\n                                            options.virtualConsole;\n\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts === \"dangerously\") {\n      transformed.windowOptions.parseOptions.scriptingEnabled = true;\n    } else if (transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  return transformed;\n}\n\nfunction normalizeHTML(html, mimeType) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel: mimeType.parameters.get(\"charset\")\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return { html, encoding };\n}\n\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined: {\n      return new NoOpResourceLoader();\n    }\n    case \"usable\": {\n      return new ResourceLoader();\n    }\n    default: {\n      if (!(resources instanceof ResourceLoader)) {\n        throw new TypeError(\"resources must be an instance of ResourceLoader\");\n      }\n      return resources;\n    }\n  }\n}\n\nexports.JSDOM = JSDOM;\n\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\n\nexports.toughCookie = toughCookie;\n"]},"metadata":{},"sourceType":"script"}