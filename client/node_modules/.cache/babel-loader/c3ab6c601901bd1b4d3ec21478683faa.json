{"ast":null,"code":"var _classCallCheck = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/**\n * Module name: node-emailer\n * Version: v1.0.0\n * Description: Node emailer allows you to send HTML based emails with or without attachments.\n * License: MIT\n * Git: https://github.com/rudrakshpathak/node-emailer.git\n * Dependencies: async, nodemailer, promise\n */\nvar emailTransporter = require('nodemailer');\n\nvar configurations = require('./config');\n/**\n * Emailer class to send HTML based emails with attachments\n */\n\n\nvar Emailer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Initializing emailer properties\n   */\n  function Emailer() {\n    _classCallCheck(this, Emailer);\n\n    // Initializing email transporter\n    this.transporterConfig = null; // Initialiing email configurations\n\n    this.mailOptions = {};\n  }\n  /**\n   * Sending HTML content email with or without attachments\n   * @param {object} emailData Email content\n   */\n\n\n  _createClass(Emailer, [{\n    key: \"sendMail\",\n    value: function sendMail(emailData) {\n      var _this = this;\n\n      try {\n        // Validating email data\n        var _validationResult = this.validateEmailData(emailData); // If validation is successfull, sending the mail\n\n\n        if (_validationResult.result) {\n          this.mailOptions.to = emailData.to != undefined ? emailData.to : \"\";\n          this.mailOptions.from = emailData.emailConfig.emailFrom != undefined ? emailData.emailConfig.emailFrom : \"\";\n          this.mailOptions.subject = emailData.subject != undefined ? emailData.subject : \"\";\n          this.mailOptions.html = emailData.content != undefined ? emailData.content : \"\";\n          this.transporterConfig = emailData.emailConfig.transporterConfig; // Creating email transporter\n\n          this.transporter = emailTransporter.createTransport(this.transporterConfig); // Checking if attachment exists\n\n          if (emailData.attachments != undefined && emailData.attachments != null && emailData.attachments != \"\") {\n            // Attaching all attachments in email configuraiton\n            this.mailOptions.attachments = emailData.attachments; // Reading files for attachments\n\n            this.readFiles(emailData.attachments).then(function () {\n              _this.transporter.sendMail(_this.mailOptions, function (error, info) {\n                return error ? false : true;\n              });\n            });\n          } else {\n            // Seding non-attachment email\n            this.transporter.sendMail(this.mailOptions, function (error, info) {\n              return error ? false : true;\n            });\n          }\n        } else {\n          return _validationResult.message;\n        }\n      } catch (exception) {\n        console.warn(exception);\n      }\n    }\n    /**\n     * Validating email data for errors\n     * @param {object} emailData Email data\n     */\n\n  }, {\n    key: \"validateEmailData\",\n    value: function validateEmailData(emailData) {\n      try {\n        if (emailData.emailConfig.transporterConfig == undefined || emailData.emailConfig.transporterConfig == \"\") {\n          return {\n            result: false,\n            message: configurations.EMAIL_CONFIGURATION_MISSING\n          };\n        } else if (emailData.to == undefined || emailData.to.trim() == \"\") {\n          return {\n            result: false,\n            message: configurations.EMAIL_TO_MISSING\n          };\n        } else if (!this.validateEmailFormat(emailData.to)) {\n          return {\n            result: false,\n            message: configurations.INVALID_TO_EMAIL\n          };\n        } else if (emailData.emailConfig.emailFrom == undefined || emailData.emailConfig.emailFrom.trim() == \"\") {\n          return {\n            result: false,\n            message: configurations.EMAIL_FROM_MISSING\n          };\n        } else if (!this.validateEmailFormat(emailData.emailConfig.emailFrom)) {\n          return {\n            result: false,\n            message: configurations.INVALID_FROM_EMAIL\n          };\n        } else if (emailData.subject == undefined || emailData.subject.trim() == \"\") {\n          return {\n            result: false,\n            message: configurations.EMAIL_SUBJECT_MISSING\n          };\n        } else if (emailData.attachments != undefined && emailData.attachments != \"\" && this.validateFileExtension(emailData.attachments)) {\n          return {\n            result: false,\n            message: configurations.INVALID_EXTENSION\n          };\n        } else {\n          return {\n            result: true\n          };\n        }\n      } catch (exception) {\n        console.warn(exception);\n      }\n    }\n    /**\n     * Validating file extension for malicious files\n     * @param {array} attachmentArray Attachment data\n     */\n\n  }, {\n    key: \"validateFileExtension\",\n    value: function validateFileExtension(attachmentArray) {\n      try {\n        var _isInValidExtension = null;\n        attachmentArray.forEach(function (value) {\n          var _fileExtension = value.path.split('.').pop().toLowerCase();\n\n          _isInValidExtension = configurations.RESTRICTED_EXTENSIONS.indexOf(_fileExtension) > -1;\n        });\n        return _isInValidExtension ? true : false;\n      } catch (exception) {\n        console.warn(exception);\n      }\n    }\n    /**\n     * Validate email format\n     * @param {string} email Email string\n     */\n\n  }, {\n    key: \"validateEmailFormat\",\n    value: function validateEmailFormat(email) {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(String(email).toLowerCase());\n    }\n    /**\n     * Reading files to be send as attachment\n     * @param {array} attachmentArray Attachcment array\n     */\n\n  }, {\n    key: \"readFiles\",\n    value: function readFiles(attachmentArray) {\n      var _this2 = this;\n\n      try {\n        return new Promise(function (resolve, reject) {\n          attachmentArray.forEach(function (value) {\n            // Pushing file configurations in object\n            _this2.mailOptions.attachments.push(value);\n          });\n          resolve();\n        });\n      } catch (exception) {\n        console.warn(exception);\n      }\n    }\n  }]);\n\n  return Emailer;\n}(); // Exporting modules to be used in files\n\n\nmodule.exports = new Emailer();","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/node_modules/node-email-sender/emailer.js"],"names":["emailTransporter","require","configurations","Emailer","transporterConfig","mailOptions","emailData","_validationResult","validateEmailData","result","to","undefined","from","emailConfig","emailFrom","subject","html","content","transporter","createTransport","attachments","readFiles","then","sendMail","error","info","message","exception","console","warn","EMAIL_CONFIGURATION_MISSING","trim","EMAIL_TO_MISSING","validateEmailFormat","INVALID_TO_EMAIL","EMAIL_FROM_MISSING","INVALID_FROM_EMAIL","EMAIL_SUBJECT_MISSING","validateFileExtension","INVALID_EXTENSION","attachmentArray","_isInValidExtension","forEach","value","_fileExtension","path","split","pop","toLowerCase","RESTRICTED_EXTENSIONS","indexOf","email","re","test","String","Promise","resolve","reject","push","module","exports"],"mappings":"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","sourcesContent":["/**\n * Module name: node-emailer\n * Version: v1.0.0\n * Description: Node emailer allows you to send HTML based emails with or without attachments.\n * License: MIT\n * Git: https://github.com/rudrakshpathak/node-emailer.git\n * Dependencies: async, nodemailer, promise\n */\n\nvar emailTransporter = require('nodemailer');\nvar configurations = require('./config');\n\n/**\n * Emailer class to send HTML based emails with attachments\n */\nclass Emailer {\n\n    /**\n     * Initializing emailer properties\n     */\n    constructor() {\n        // Initializing email transporter\n        this.transporterConfig = null;\n\n        // Initialiing email configurations\n        this.mailOptions = {};\n    }\n\n    /**\n     * Sending HTML content email with or without attachments\n     * @param {object} emailData Email content\n     */\n    sendMail(emailData) {\n        try {\n            // Validating email data\n            let _validationResult = this.validateEmailData(emailData);\n\n            // If validation is successfull, sending the mail\n            if (_validationResult.result) {\n                this.mailOptions.to = (emailData.to != undefined) ? emailData.to : \"\";\n                this.mailOptions.from = (emailData.emailConfig.emailFrom != undefined) ? emailData.emailConfig.emailFrom : \"\";\n                this.mailOptions.subject = (emailData.subject != undefined) ? emailData.subject : \"\";\n                this.mailOptions.html = (emailData.content != undefined) ? emailData.content : \"\";\n                this.transporterConfig = emailData.emailConfig.transporterConfig;\n\n                // Creating email transporter\n                this.transporter = emailTransporter.createTransport(this.transporterConfig);\n\n                // Checking if attachment exists\n                if (emailData.attachments != undefined && emailData.attachments != null && emailData.attachments != \"\") {\n                    // Attaching all attachments in email configuraiton\n                    this.mailOptions.attachments = emailData.attachments;\n\n                    // Reading files for attachments\n                    this.readFiles(emailData.attachments).then(() => {\n                        this.transporter.sendMail(this.mailOptions, function (error, info) {\n                            return (error) ? false : true;\n                        });\n                    });\n                } else {\n                    // Seding non-attachment email\n                    this.transporter.sendMail(this.mailOptions, function (error, info) {\n                        return (error) ? false : true;\n                    });\n                }\n            } else {\n                return _validationResult.message;\n            }\n        } catch (exception) {\n            console.warn(exception);\n        }\n    }\n\n    /**\n     * Validating email data for errors\n     * @param {object} emailData Email data\n     */\n    validateEmailData(emailData) {\n        try {\n            if (emailData.emailConfig.transporterConfig == undefined || emailData.emailConfig.transporterConfig == \"\") {\n                return {\n                    result: false,\n                    message: configurations.EMAIL_CONFIGURATION_MISSING\n                };\n            } else if (emailData.to == undefined || (emailData.to).trim() == \"\") {\n                return {\n                    result: false,\n                    message: configurations.EMAIL_TO_MISSING\n                };\n            } else if (!this.validateEmailFormat(emailData.to)) {\n                return {\n                    result: false,\n                    message: configurations.INVALID_TO_EMAIL\n                };\n            } else if (emailData.emailConfig.emailFrom == undefined || (emailData.emailConfig.emailFrom).trim() == \"\") {\n                return {\n                    result: false,\n                    message: configurations.EMAIL_FROM_MISSING\n                };\n            } else if (!this.validateEmailFormat(emailData.emailConfig.emailFrom)) {\n                return {\n                    result: false,\n                    message: configurations.INVALID_FROM_EMAIL\n                };\n            } else if (emailData.subject == undefined || (emailData.subject).trim() == \"\") {\n                return {\n                    result: false,\n                    message: configurations.EMAIL_SUBJECT_MISSING\n                };\n            } else if (emailData.attachments != undefined && emailData.attachments != \"\" && this.validateFileExtension(emailData.attachments)) {\n                return {\n                    result: false,\n                    message: configurations.INVALID_EXTENSION\n                };\n            } else {\n                return {\n                    result: true\n                };\n            }\n        } catch (exception) {\n            console.warn(exception);\n        }\n    }\n\n    /**\n     * Validating file extension for malicious files\n     * @param {array} attachmentArray Attachment data\n     */\n    validateFileExtension(attachmentArray) {\n        try {\n            let _isInValidExtension = null;\n            attachmentArray.forEach((value) => {\n                let _fileExtension = value.path.split('.').pop().toLowerCase();\n                _isInValidExtension = configurations.RESTRICTED_EXTENSIONS.indexOf(_fileExtension) > -1;\n\n            });\n\n            return (_isInValidExtension) ? true : false;\n        } catch(exception) {\n            console.warn(exception);\n        }\n    }\n\n    /**\n     * Validate email format\n     * @param {string} email Email string\n     */\n    validateEmailFormat(email) {\n        var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(String(email).toLowerCase());\n    }\n\n    /**\n     * Reading files to be send as attachment\n     * @param {array} attachmentArray Attachcment array\n     */\n    readFiles(attachmentArray) {\n        try {\n            return new Promise((resolve, reject) => {\n                attachmentArray.forEach((value) => {\n                    // Pushing file configurations in object\n                    this.mailOptions.attachments.push(value);\n                });\n                resolve();\n            });\n        } catch (exception) {\n            console.warn(exception);\n        }\n    }\n}\n\n// Exporting modules to be used in files\nmodule.exports = new Emailer();"]},"metadata":{},"sourceType":"script"}