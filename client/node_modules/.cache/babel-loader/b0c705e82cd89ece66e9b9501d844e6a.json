{"ast":null,"code":"import _classCallCheck from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/samehrlich/Desktop/final-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx\";\nimport React, { Component, ChildComponent } from \"react\";\nimport { ListGroup } from \"react-bootstrap/esm\";\nimport { Button, DropdownMenu, Dropdown } from \"reactstrap/es\";\nimport { withRouter } from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\"; // import \"./CSS/GlobalCSS.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar WatchList = /*#__PURE__*/function (_React$Component) {\n  _inherits(WatchList, _React$Component);\n\n  var _super = _createSuper(WatchList);\n\n  function WatchList(props) {\n    var _this;\n\n    _classCallCheck(this, WatchList);\n\n    _this = _super.call(this, props); // this.saveNewStockTrade=this.saveNewStockTrade.bind(this);\n    // this.getUserStocks= this.getUserStocks.bind(this);\n    // this.UpdateStockOnPage= this.UpdateStockOnPage.bind(this);\n    // this.addUserStock = this.addUserStock.bind(this);\n    // // this.updateDropdown=this.updateDropdown.bind(this);\n    // this.handleChange=this.handleChange.bind(this);\n    // // this.updatePage= this.updatePage.bind(this);\n    // this.removeStock= this.removeStock.bind(this);\n    // // this.UpdateStockOnPageRemove=this.UpdateStockOnPageRemove.bind(this); \n    // this.toggle=this.toggle.bind(this);\n\n    _this.state = {\n      email: _this.props.email,\n      stocks: _this.props.stocks,\n      connectionError: false,\n      dropdownOpen: false,\n      value: \"Your Watchlist\"\n    };\n    return _this;\n  } // componentWillMount(){\n  //     this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n  //     this.getUserStocks();\n  // }\n  // componentWillUnmount(){\n  //     this.state.stocks.forEach(symbol=>{\n  //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n  //     })\n  //     this.connection.close();\n  //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n  //     // or cleaning up any subscriptions that were created in componentDidMount().\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //     if (prevState.stocks !== this.state.stocks) {\n  //       console.log('stocks state has changed.')\n  //       this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n  //     }\n  //   }\n  // toggle(event) {\n  //     this.setState({\n  //       dropdownOpen: !this.state.dropdownOpen,\n  //       value: event.currentTarget.textContent\n  //     });\n  //   }\n  // saveNewStockTrade= (event) => {\n  //     let result = JSON.parse(event.data)\n  //     console.log(result)\n  //     let user_watchlist = this.state.stocks\n  //     console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n  //     if(result.type===\"trade\"){\n  //         user_watchlist.forEach(symbol => {\n  //             var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n  //             if(tradePrice.length !==0){\n  //                 symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n  //                 console.log(\"Found Updated price for \",symbol.Symbol)\n  //                 // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n  //             }\n  //         })\n  //     }\n  //     this.setState({stocks:user_watchlist});\n  // }\n  // componentDidMount(){\n  //     this.connection.onopen = ()=> { \n  //         if (this.state.stocks!==\"No stocks added\"){\n  //             this.state.stocks.forEach(symbol=>{\n  //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n  //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n  //             })\n  //         }\n  //         else{\n  //             console.log(\"no stocks added to subscribe to\");\n  //         }\n  //     }\n  //     this.connection.onmessage= this.saveNewStockTrade;\n  //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n  // }\n  // updateDropdown(){\n  //     var Message = \"Your WatchList\";\n  //     if(this.state.stocks===\"No stocks added\"){\n  //         Message =\"Empty Watchlist\"; \n  //     }\n  //     var MessageArrowDir;\n  //     if(this.state.dropdownOpen){\n  //       MessageArrowDir = \"\\u25BC\";\n  //     }\n  //     else{\n  //       MessageArrowDir = \"\\u25B2\";\n  //     }\n  //     var header =\n  //         <> <div className = \"dropDiv\">\n  //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n  //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n  //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n  //         </div></>\n  //     if(this.state.stocks!==\"No stocks added\"){\n  //     var display = \n  //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n  //         {header}\n  //         <DropdownMenu className = \"DDM\">\n  //           <div className = \"ArtistsDisplayWrapper\">\n  //             {this.state.stocks.map((stocks,index) =>\n  //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n  //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n  //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n  //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n  //         </div>\n  //             )}\n  //           </div>\n  //         </DropdownMenu>\n  //     </Dropdown>\n  //     this.setState({dropdownDisplay:display});\n  //             }\n  //             else{\n  //                 this.setState({dropdownDisplay:header});\n  //             }\n  // }\n  // removeStock(htmlEvent,stock){\n  //     //unsubsribe from listening to thsi stock\n  //    console.log(\"Unsubscribing from: \",stock)\n  //     this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n  //     //first stop the htmlEvents default status\n  //     htmlEvent.preventDefault();\n  //     var user={\n  //         email:this.props.email,\n  //         stock_symbol: stock,\n  //     } \n  //     console.log(user)\n  //     var url = '/api/removeUserStock';\n  //     const req = new Request(url,{\n  //         method:\"POST\",\n  //         headers:{\"Content-Type\":\"application/json\"},\n  //         body:JSON.stringify(user),\n  //     });\n  //     fetch(req)\n  //     .then((res)=>{\n  //         if(res.status===500){\n  //         res.json()\n  //         .then((json)=>{\n  //             const {message,stackTrace}=json;\n  //           })\n  //           .catch((error)=>{\n  //             return Promise.reject(error);\n  //           });\n  //         }\n  //         else{\n  //           return res.json();\n  //         }\n  //       })\n  //       .then((result)=> {\n  //           console.log(\"1st remove stock rerender\");\n  //           this.setState({remove_status:result},()=>this.removeHelper())});\n  // }\n  // removeHelper(){\n  //     console.log(\"p/179\",this.state.remove_status);\n  //     //removed but still showing on watch list\n  //     if(this.state.remove_status.response===\"Stock not on watch list\"){\n  //         alert(\"Stock Queued For Deletion, Please Login In Again\");\n  //     }\n  //     //stock has been removed from watchlist\n  //     else if(this.state.remove_status.Response===\"Sucessfully removed stock\"){\n  //         console.log(\"2nd remove stock rerender\");\n  //         this.setState({Remove_Status:\"\"},()=>this.getUserStocks());\n  //     }\n  // }\n  // getUserStocks(){\n  //     var user={ \n  //         email: this.state.email,\n  //     }\n  //     var url = \"/api/getUserStocks\";\n  //     const req = new Request(url,{\n  //         method:\"POST\",\n  //         headers:{\"Content-Type\":\"application/json\"},\n  //         body:JSON.stringify(user),\n  //     });\n  //     fetch(req)\n  //     .then((res)=>{\n  //         return res.json();\n  //     }).catch((error)=>{\n  //         console.log(\"p/121\");\n  //         console.log(error);\n  //         return Promise.reject(error);\n  //         })\n  //     .then(stock_results => {\n  //         console.log(\"3rdt ADD/remove Stock Rerender\");\n  //         this.setState({stocks:stock_results},()=>this.updatePage)});\n  // }\n  // updatePage(){\n  //     console.log(\"In update page \",this.state.stocks);\n  //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n  // }\n  // UpdateStockOnPage(){\n  //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n  //         alert(\"This stock is already on your watchlist\");\n  //     }\n  //     else{\n  //         console.log(\"2nd ADD Stock Rerender\");\n  //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n  //     }\n  // }\n  // addUserStock(){\n  //     if(this.state.stock_symbol_status !== \"stock not found\"){\n  //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n  //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n  //         var user={\n  //             email:this.props.email,\n  //             addStock: this.state.stock_to_watch\n  //         } \n  //         var url=\"/api/AddUserStocks\";\n  //         const req = new Request(url,{\n  //             method:\"POST\",\n  //             headers:{\"Content-Type\":\"application/json\"},\n  //             body:JSON.stringify(user),\n  //         });\n  //         fetch(req)\n  //         .then((res)=>{\n  //             return res.json();\n  //         }).catch((error)=>{\n  //             return Promise.reject(error);\n  //           })\n  //         .then(result => {\n  //             console.log(\"1st ADD Stock Rerender\");\n  //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n  //     }\n  //     else{\n  //         //put in this functionality \n  //         alert(\"stock not found\");\n  //     }\n  // }\n  // handleChange(event) {\n  //     this.setState({stock_to_watch: event.target.value});\n  //   }\n\n\n  _createClass(WatchList, [{\n    key: \"render\",\n    value: function render() {\n      // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n      // // console.log(\"In render: \", this.state.dropdownDisplay);\n      // if (this.state == null){\n      //     this.props.history.push(\"/error\");\n      //     }\n      // var Message = \"Your WatchList\";\n      // if(this.state.stocks===\"No stocks added\"){\n      //     Message =\"Empty Watchlist\"; \n      // }\n      // var MessageArrowDir;\n      // if(this.state.dropdownOpen){\n      //   MessageArrowDir = \"\\u25BC\";\n      // }\n      // else{\n      //   MessageArrowDir = \"\\u25B2\";\n      // }\n      // var dropdownDisplay =\n      //     <> <div className = \"dropDiv\">\n      //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n      //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n      //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n      //     </div></>\n      // var dropdown;\n      // if(this.state.stocks!==\"No stocks added\"){\n      // dropdown = \n      // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n      //     {dropdownDisplay}\n      //     <DropdownMenu className = \"DDM\">\n      //       <div className = \"ArtistsDisplayWrapper\">\n      //         {this.state.stocks.map((stocks,index) =>\n      //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n      //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n      //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n      //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n      //     </div>\n      //         )}\n      //       </div>\n      //     </DropdownMenu>\n      // </Dropdown>\n      // }\n      // else{\n      //     dropdown = dropdownDisplay;\n      // }\n      // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n      // this.props.history.push(\"/error\",this.state)\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        data: this.state.stocks,\n        style: {\n          height: 700\n        },\n        children: [/*#__PURE__*/_jsxDEV(GridColumn, {\n          title: \"Symbol\",\n          field: \"Symbol\",\n          locked: true,\n          width: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridColumn, {\n          title: \"Current Price\",\n          field: \"currentPrice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return WatchList;\n}(React.Component);\n\nexport default _c = withRouter(WatchList);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/samehrlich/Desktop/final-app/client/src/components/WatchList.jsx"],"names":["React","Component","ChildComponent","ListGroup","Button","DropdownMenu","Dropdown","withRouter","Grid","GridCellProps","GridColumn","WatchList","props","state","email","stocks","connectionError","dropdownOpen","value","height"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,cAAxB,QAA6C,OAA7C;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,MAAR,EAAeC,YAAf,EAA4BC,QAA5B,QAA2C,eAA3C;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAASC,IAAT,EAAeC,aAAf,EAA8BC,UAA9B,QAAgD,4BAAhD,C,CACA;;;;IAEMC,S;;;;;AAEF,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN,EADe,CAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,UAAKC,KAAL,GAAW;AACPC,MAAAA,KAAK,EAAG,MAAKF,KAAL,CAAWE,KADZ;AAEPC,MAAAA,MAAM,EAAC,MAAKH,KAAL,CAAWG,MAFX;AAGPC,MAAAA,eAAe,EAAE,KAHV;AAIPC,MAAAA,YAAY,EAAE,KAJP;AAKPC,MAAAA,KAAK,EAAC;AALC,KAAX;AAbW;AAsBlkBAAQ;AAEJ;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA,0BAEI,QAAC,IAAD;AACA,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWE,MADjB;AAEA,QAAA,KAAK,EAAE;AAAEI,UAAAA,MAAM,EAAE;AAAV,SAFP;AAAA,gCAIA,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,QAAlB;AAA2B,UAAA,KAAK,EAAC,QAAjC;AAA0C,UAAA,MAAM,EAAE,IAAlD;AAAwD,UAAA,KAAK,EAAE;AAA/D;AAAA;AAAA;AAAA;AAAA,gBAJA,eAKA,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,eAAlB;AAAkC,UAAA,KAAK,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,gBALA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAeC;;;;EApWenB,KAAK,CAACC,S;;AAsW9B,oBAAeM,UAAU,CAACI,SAAD,CAAzB","sourcesContent":["import React,{Component,ChildComponent} from \"react\";\nimport {ListGroup} from \"react-bootstrap/esm\";\nimport {Button,DropdownMenu,Dropdown} from \"reactstrap/es\";\nimport {withRouter} from \"react-router-dom\";\nimport { Grid, GridCellProps, GridColumn } from \"@progress/kendo-react-grid\";\n// import \"./CSS/GlobalCSS.css\";\n\nclass WatchList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        // this.saveNewStockTrade=this.saveNewStockTrade.bind(this);\n        // this.getUserStocks= this.getUserStocks.bind(this);\n        // this.UpdateStockOnPage= this.UpdateStockOnPage.bind(this);\n        // this.addUserStock = this.addUserStock.bind(this);\n        // // this.updateDropdown=this.updateDropdown.bind(this);\n        // this.handleChange=this.handleChange.bind(this);\n        // // this.updatePage= this.updatePage.bind(this);\n        // this.removeStock= this.removeStock.bind(this);\n        // // this.UpdateStockOnPageRemove=this.UpdateStockOnPageRemove.bind(this); \n        // this.toggle=this.toggle.bind(this);\n       \n            this.state={\n                email : this.props.email,\n                stocks:this.props.stocks,\n                connectionError: false,\n                dropdownOpen: false,\n                value:\"Your Watchlist\"\n            }\n        \n        \n    }\n    // componentWillMount(){\n    //     this.connection = new WebSocket('wss://ws.finnhub.io?token=c34391qad3i8edlcgrgg');\n    //     this.getUserStocks();\n        \n    // }\n    // componentWillUnmount(){\n        \n    //     this.state.stocks.forEach(symbol=>{\n    //         this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.Symbol}));\n            \n    //     })\n    //     this.connection.close();\n    //     // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, \n    //     // or cleaning up any subscriptions that were created in componentDidMount().\n    // }\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (prevState.stocks !== this.state.stocks) {\n    //       console.log('stocks state has changed.')\n    //       this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks]);\n    //     }\n    //   }\n    // toggle(event) {\n    //     this.setState({\n    //       dropdownOpen: !this.state.dropdownOpen,\n    //       value: event.currentTarget.textContent\n    //     });\n    //   }\n    // saveNewStockTrade= (event) => {\n        \n    //     let result = JSON.parse(event.data)\n    //     console.log(result)\n    //     let user_watchlist = this.state.stocks\n    //     console.log(\"InsidesaveNewStockTrade: \", user_watchlist)\n    //     if(result.type===\"trade\"){\n    //         user_watchlist.forEach(symbol => {\n    //             var tradePrice= result.data.filter((i,n)=>i.s===symbol.Symbol);\n    //             if(tradePrice.length !==0){\n    //                 symbol.currentPrice = tradePrice[tradePrice.length-1].p; \n    //                 console.log(\"Found Updated price for \",symbol.Symbol)\n    //                 // socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol.name}))\n    //             }\n    //         })\n            \n    //     }\n    //     this.setState({stocks:user_watchlist});\n    // }\n     \n    // componentDidMount(){\n       \n    //     this.connection.onopen = ()=> { \n    //         if (this.state.stocks!==\"No stocks added\"){\n    //             this.state.stocks.forEach(symbol=>{\n    //                 this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': symbol.Symbol}));\n    //                 console.log(\"Inside OnOpen: Subscribed To: \", symbol.Symbol)\n    //             })\n    //         }\n    //         else{\n    //             console.log(\"no stocks added to subscribe to\");\n    //         }\n            \n    //     }\n    //     this.connection.onmessage= this.saveNewStockTrade;\n    //     this.connection.onclose = () => { this.setState({connectionError: true}) }\n    // }\n    \n    // updateDropdown(){\n    //     var Message = \"Your WatchList\";\n    //     if(this.state.stocks===\"No stocks added\"){\n    //         Message =\"Empty Watchlist\"; \n    //     }\n    //     var MessageArrowDir;\n    //     if(this.state.dropdownOpen){\n    //       MessageArrowDir = \"\\u25BC\";\n    //     }\n    \n    //     else{\n    //       MessageArrowDir = \"\\u25B2\";\n    //     }\n        \n    //     var header =\n    //         <> <div className = \"dropDiv\">\n    //             <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n    //             <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n    //                     data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n    //         </div></>\n        \n    //     if(this.state.stocks!==\"No stocks added\"){\n    //     var display = \n    //     <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n    //         {header}\n    \n    //         <DropdownMenu className = \"DDM\">\n    //           <div className = \"ArtistsDisplayWrapper\">\n    //             {this.state.stocks.map((stocks,index) =>\n                \n    //         <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n    //             <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n    //             <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n    //             <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n    //         </div>\n    //             )}\n    //           </div>\n    //         </DropdownMenu>\n    //     </Dropdown>\n    //     this.setState({dropdownDisplay:display});\n    //             }\n    //             else{\n    //                 this.setState({dropdownDisplay:header});\n    //             }\n        \n\n    // }\n   \n    // removeStock(htmlEvent,stock){\n    //     //unsubsribe from listening to thsi stock\n    //    console.log(\"Unsubscribing from: \",stock)\n    //     this.connection.send(JSON.stringify({'type':'unsubscribe', 'symbol': stock}))\n    //     //first stop the htmlEvents default status\n    //     htmlEvent.preventDefault();\n    //     var user={\n    //         email:this.props.email,\n    //         stock_symbol: stock,\n    \n    //     } \n    //     console.log(user)\n    //     var url = '/api/removeUserStock';\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n    //         if(res.status===500){\n    //         res.json()\n    //         .then((json)=>{\n    //             const {message,stackTrace}=json;\n    //           })\n    //           .catch((error)=>{\n    //             return Promise.reject(error);\n    //           });\n    //         }\n    //         else{\n    //           return res.json();\n    //         }\n    //       })\n    //       .then((result)=> {\n    //           console.log(\"1st remove stock rerender\");\n    //           this.setState({remove_status:result},()=>this.removeHelper())});\n    \n    // }\n    \n    // removeHelper(){\n    //     console.log(\"p/179\",this.state.remove_status);\n    //     //removed but still showing on watch list\n    //     if(this.state.remove_status.response===\"Stock not on watch list\"){\n    //         alert(\"Stock Queued For Deletion, Please Login In Again\");\n    //     }\n    //     //stock has been removed from watchlist\n    //     else if(this.state.remove_status.Response===\"Sucessfully removed stock\"){\n    //         console.log(\"2nd remove stock rerender\");\n    //         this.setState({Remove_Status:\"\"},()=>this.getUserStocks());\n           \n    //     }\n    // }\n    // getUserStocks(){\n    //     var user={ \n    //         email: this.state.email,\n    //     }\n    //     var url = \"/api/getUserStocks\";\n    //     const req = new Request(url,{\n    //         method:\"POST\",\n    //         headers:{\"Content-Type\":\"application/json\"},\n    //         body:JSON.stringify(user),\n    //     });\n    //     fetch(req)\n    //     .then((res)=>{\n           \n    //         return res.json();\n    //     }).catch((error)=>{\n    //         console.log(\"p/121\");\n    //         console.log(error);\n    //         return Promise.reject(error);\n    //         })\n    //     .then(stock_results => {\n    //         console.log(\"3rdt ADD/remove Stock Rerender\");\n    //         this.setState({stocks:stock_results},()=>this.updatePage)});\n        \n    // }\n    \n    // updatePage(){\n    //     console.log(\"In update page \",this.state.stocks);\n        \n    //     this.props.history.push(\"/profile\",[[{email:this.state.email}],this.state.stocks])\n        \n        \n        \n    // }\n    \n    // UpdateStockOnPage(){\n    //     if(this.state.stock_symbol_status === 'User had already added this stock'){\n    //         alert(\"This stock is already on your watchlist\");\n    //     }\n        \n    //     else{\n    //         console.log(\"2nd ADD Stock Rerender\");\n    //         this.setState({stock_symbol_status:\"\",Remove_Status:\"\"},()=>this.getUserStocks());\n    //     }\n    // }\n\n    // addUserStock(){\n    //     if(this.state.stock_symbol_status !== \"stock not found\"){\n    //         console.log(\"Subscribing to \",this.state.stock_to_watch)\n    //         this.connection.send(JSON.stringify({'type':'subscribe', 'symbol': this.state.stock_to_watch}))\n    //         var user={\n    //             email:this.props.email,\n    //             addStock: this.state.stock_to_watch\n    //         } \n           \n    //         var url=\"/api/AddUserStocks\";\n    //         const req = new Request(url,{\n    //             method:\"POST\",\n    //             headers:{\"Content-Type\":\"application/json\"},\n    //             body:JSON.stringify(user),\n    //         });\n    //         fetch(req)\n    //         .then((res)=>{\n                \n    //             return res.json();\n    //         }).catch((error)=>{\n    //             return Promise.reject(error);\n    //           })\n    //         .then(result => {\n    //             console.log(\"1st ADD Stock Rerender\");\n    //             this.setState({stock_symbol_status: result},()=>this.UpdateStockOnPage())});\n            \n    //     }\n    \n    //     else{\n    //         //put in this functionality \n    //         alert(\"stock not found\");\n    //     }\n        \n        \n    // }\n    // handleChange(event) {\n         \n    //     this.setState({stock_to_watch: event.target.value});\n    //   }\n    \n    render(){\n       \n        // console.log(\"In render: \", this.state.stocks,this.props.stocks);\n        // // console.log(\"In render: \", this.state.dropdownDisplay);\n        // if (this.state == null){\n        //     this.props.history.push(\"/error\");\n        //     }\n        \n        \n        // var Message = \"Your WatchList\";\n        // if(this.state.stocks===\"No stocks added\"){\n        //     Message =\"Empty Watchlist\"; \n        // }\n        // var MessageArrowDir;\n        // if(this.state.dropdownOpen){\n        //   MessageArrowDir = \"\\u25BC\";\n        // }\n    \n        // else{\n        //   MessageArrowDir = \"\\u25B2\";\n        // }\n        \n        // var dropdownDisplay =\n        //     <> <div className = \"dropDiv\">\n        //         <Button className = \"FakeDropDown\" onClick = {(e)=>{this.doNothing(e)}}><span style={{marginLeft:\"55px\"}}>{Message}</span></Button>\n    \n        //         <Button className = \"realDropDown \"onClick = {this.toggle} aria-expanded = {this.state.dropdownOpen}\n        //                 data-toggle = \"dropdown\" aria-haspopup=\"true\"><span style={{fontSize:\"18px\"}}>{MessageArrowDir}</span></Button>\n    \n        //     </div></>\n        // var dropdown;\n        // if(this.state.stocks!==\"No stocks added\"){\n    \n        // dropdown = \n    \n        // <Dropdown style = {{marginBottom:\"20px\"}} isOpen={this.state.dropdownOpen}>\n        //     {dropdownDisplay}\n    \n        //     <DropdownMenu className = \"DDM\">\n        //       <div className = \"ArtistsDisplayWrapper\">\n        //         {this.state.stocks.map((stocks,index) =>\n                \n        //     <div className = \"ArtistLine\" style = {{marginBottom:\"55px\"}}>\n                \n        //         <button  onClick = {(e)=>{this.doNothing(e)}} className = \"artistButton\">{stocks.Symbol}</button>\n        //         <button id = {stocks.symbol} onClick = {(e)=>{this.doNothing(e)}} className = \"playArtistButton\">${stocks.currentPrice}</button>\n        //         <button onClick = {(e)=>{this.removeStock(e,stocks.Symbol)}} className = \"removeButton\">X</button> \n        //     </div>\n        //         )}\n        //       </div>\n        //     </DropdownMenu>\n        // </Dropdown>\n        // }\n        // else{\n        //     dropdown = dropdownDisplay;\n    \n           \n      \n        // }\n       \n        // var trackButton = <Button onClick = {this.getStockInfo} className= \"Button\" id = \"TrackButton\" >Track </Button>;\n    \n        // this.props.history.push(\"/error\",this.state)\n        return (\n            \n            <Grid\n            data={this.state.stocks}\n            style={{ height: 700 }}\n          >\n            <GridColumn title=\"Symbol\" field=\"Symbol\" locked={true} width={100} />\n            <GridColumn title=\"Current Price\" field=\"currentPrice\" />\n            {/* <GridColumn title=\"Name\" field=\"name\" />\n            <GridColumn title=\"Change\" field=\"day_change\" />\n            <GridColumn title=\"% Change\" field=\"change_pct\" />\n            <GridColumn title=\"Volume\" field=\"volume\" />\n            <GridColumn title=\"Market Cap\" field=\"market_cap\" /> */}\n          </Grid>\n          );\n        }\n}\nexport default withRouter(WatchList);"]},"metadata":{},"sourceType":"module"}